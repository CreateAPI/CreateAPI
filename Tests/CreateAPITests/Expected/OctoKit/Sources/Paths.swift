// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths {
    public static var root: Root {
        Root(path: "/")
    }

    public struct Root {
        /// Path: `/`
        public let path: String

        /// GitHub API Root
        ///
        /// Get Hypermedia links to resources accessible in GitHub's REST API
        ///
        /// [API method documentation](https://docs.github.com/rest/overview/resources-in-the-rest-api#root-endpoint)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var currentUserURL: String
            public var currentUserAuthorizationsHTMLURL: String
            public var authorizationsURL: String
            public var codeSearchURL: String
            public var commitSearchURL: String
            public var emailsURL: String
            public var emojisURL: String
            public var eventsURL: String
            public var feedsURL: String
            public var followersURL: String
            public var followingURL: String
            public var gistsURL: String
            public var hubURL: String
            public var issueSearchURL: String
            public var issuesURL: String
            public var keysURL: String
            public var labelSearchURL: String
            public var notificationsURL: String
            public var organizationURL: String
            public var organizationRepositoriesURL: String
            public var organizationTeamsURL: String
            public var publicGistsURL: String
            public var rateLimitURL: String
            public var repositoryURL: String
            public var repositorySearchURL: String
            public var currentUserRepositoriesURL: String
            public var starredURL: String
            public var starredGistsURL: String
            public var topicSearchURL: String?
            public var userURL: String
            public var userOrganizationsURL: String
            public var userRepositoriesURL: String
            public var userSearchURL: String

            public init(currentUserURL: String, currentUserAuthorizationsHTMLURL: String, authorizationsURL: String, codeSearchURL: String, commitSearchURL: String, emailsURL: String, emojisURL: String, eventsURL: String, feedsURL: String, followersURL: String, followingURL: String, gistsURL: String, hubURL: String, issueSearchURL: String, issuesURL: String, keysURL: String, labelSearchURL: String, notificationsURL: String, organizationURL: String, organizationRepositoriesURL: String, organizationTeamsURL: String, publicGistsURL: String, rateLimitURL: String, repositoryURL: String, repositorySearchURL: String, currentUserRepositoriesURL: String, starredURL: String, starredGistsURL: String, topicSearchURL: String? = nil, userURL: String, userOrganizationsURL: String, userRepositoriesURL: String, userSearchURL: String) {
                self.currentUserURL = currentUserURL
                self.currentUserAuthorizationsHTMLURL = currentUserAuthorizationsHTMLURL
                self.authorizationsURL = authorizationsURL
                self.codeSearchURL = codeSearchURL
                self.commitSearchURL = commitSearchURL
                self.emailsURL = emailsURL
                self.emojisURL = emojisURL
                self.eventsURL = eventsURL
                self.feedsURL = feedsURL
                self.followersURL = followersURL
                self.followingURL = followingURL
                self.gistsURL = gistsURL
                self.hubURL = hubURL
                self.issueSearchURL = issueSearchURL
                self.issuesURL = issuesURL
                self.keysURL = keysURL
                self.labelSearchURL = labelSearchURL
                self.notificationsURL = notificationsURL
                self.organizationURL = organizationURL
                self.organizationRepositoriesURL = organizationRepositoriesURL
                self.organizationTeamsURL = organizationTeamsURL
                self.publicGistsURL = publicGistsURL
                self.rateLimitURL = rateLimitURL
                self.repositoryURL = repositoryURL
                self.repositorySearchURL = repositorySearchURL
                self.currentUserRepositoriesURL = currentUserRepositoriesURL
                self.starredURL = starredURL
                self.starredGistsURL = starredGistsURL
                self.topicSearchURL = topicSearchURL
                self.userURL = userURL
                self.userOrganizationsURL = userOrganizationsURL
                self.userRepositoriesURL = userRepositoriesURL
                self.userSearchURL = userSearchURL
            }

            private enum CodingKeys: String, CodingKey {
                case currentUserURL = "current_user_url"
                case currentUserAuthorizationsHTMLURL = "current_user_authorizations_html_url"
                case authorizationsURL = "authorizations_url"
                case codeSearchURL = "code_search_url"
                case commitSearchURL = "commit_search_url"
                case emailsURL = "emails_url"
                case emojisURL = "emojis_url"
                case eventsURL = "events_url"
                case feedsURL = "feeds_url"
                case followersURL = "followers_url"
                case followingURL = "following_url"
                case gistsURL = "gists_url"
                case hubURL = "hub_url"
                case issueSearchURL = "issue_search_url"
                case issuesURL = "issues_url"
                case keysURL = "keys_url"
                case labelSearchURL = "label_search_url"
                case notificationsURL = "notifications_url"
                case organizationURL = "organization_url"
                case organizationRepositoriesURL = "organization_repositories_url"
                case organizationTeamsURL = "organization_teams_url"
                case publicGistsURL = "public_gists_url"
                case rateLimitURL = "rate_limit_url"
                case repositoryURL = "repository_url"
                case repositorySearchURL = "repository_search_url"
                case currentUserRepositoriesURL = "current_user_repositories_url"
                case starredURL = "starred_url"
                case starredGistsURL = "starred_gists_url"
                case topicSearchURL = "topic_search_url"
                case userURL = "user_url"
                case userOrganizationsURL = "user_organizations_url"
                case userRepositoriesURL = "user_repositories_url"
                case userSearchURL = "user_search_url"
            }
        }
    }
}

extension Paths {
    public static var app: App {
        App(path: "/app")
    }

    public struct App {
        /// Path: `/app`
        public let path: String

        /// Get the authenticated app
        ///
        /// Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-the-authenticated-app)
        public var get: Request<OctoKit.Integration> {
            .get(path)
        }
    }
}

extension Paths {
    public static var appManifests: AppManifests {
        AppManifests(path: "/app-manifests")
    }

    public struct AppManifests {
        /// Path: `/app-manifests`
        public let path: String
    }
}

extension Paths.AppManifests {
    public func code(_ code: String) -> WithCode {
        WithCode(path: "\(path)/\(code)")
    }

    public struct WithCode {
        /// Path: `/app-manifests/{code}`
        public let path: String
    }
}

extension Paths.AppManifests.WithCode {
    public var conversions: Conversions {
        Conversions(path: path + "/conversions")
    }

    public struct Conversions {
        /// Path: `/app-manifests/{code}/conversions`
        public let path: String

        /// Create a GitHub App from a manifest
        ///
        /// Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest)
        public var post: Request<PostResponse> {
            .post(path)
        }

        public struct PostResponse: Decodable {
            /// GitHub app
            ///
            /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
            public var integration: OctoKit.Integration
            public var clientID: String
            public var clientSecret: String
            public var webhookSecret: String?
            public var pem: String

            public init(integration: OctoKit.Integration, clientID: String, clientSecret: String, webhookSecret: String? = nil, pem: String) {
                self.integration = integration
                self.clientID = clientID
                self.clientSecret = clientSecret
                self.webhookSecret = webhookSecret
                self.pem = pem
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.integration = try OctoKit.Integration(from: decoder)
                self.clientID = try values.decode(String.self, forKey: "client_id")
                self.clientSecret = try values.decode(String.self, forKey: "client_secret")
                self.webhookSecret = try values.decodeIfPresent(String.self, forKey: "webhook_secret")
                self.pem = try values.decode(String.self, forKey: "pem")
            }
        }
    }
}

extension Paths.App {
    public var hook: Hook {
        Hook(path: path + "/hook")
    }

    public struct Hook {
        /// Path: `/app/hook`
        public let path: String
    }
}

extension Paths.App.Hook {
    public var config: Config {
        Config(path: path + "/config")
    }

    public struct Config {
        /// Path: `/app/hook/config`
        public let path: String

        /// Get a webhook configuration for an app
        ///
        /// Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-webhook-configuration-for-an-app)
        public var get: Request<OctoKit.WebhookConfig> {
            .get(path)
        }

        /// Update a webhook configuration for an app
        ///
        /// Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#update-a-webhook-configuration-for-an-app)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.WebhookConfig> {
            .patch(path, body: body)
        }

        /// Example:
        ///
        /// {
        ///   "content_type" : "json",
        ///   "insecure_ssl" : "0",
        ///   "secret" : "********",
        ///   "url" : "https:\/\/example.com\/webhook"
        /// }
        public struct PatchRequest: Encodable {
            /// The URL to which the payloads will be delivered.
            ///
            /// Example: "https://example.com/webhook"
            public var url: URL?
            /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
            ///
            /// Example: "json"
            public var contentType: String?
            /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
            ///
            /// Example: "********"
            public var secret: String?
            public var insecureSSL: OctoKit.WebhookConfigInsecureSSL?

            public init(url: URL? = nil, contentType: String? = nil, secret: String? = nil, insecureSSL: OctoKit.WebhookConfigInsecureSSL? = nil) {
                self.url = url
                self.contentType = contentType
                self.secret = secret
                self.insecureSSL = insecureSSL
            }

            private enum CodingKeys: String, CodingKey {
                case url
                case contentType = "content_type"
                case secret
                case insecureSSL = "insecure_ssl"
            }
        }
    }
}

extension Paths.App.Hook {
    public var deliveries: Deliveries {
        Deliveries(path: path + "/deliveries")
    }

    public struct Deliveries {
        /// Path: `/app/hook/deliveries`
        public let path: String

        /// List deliveries for an app webhook
        ///
        /// Returns a list of webhook deliveries for the webhook configured for a GitHub App.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-deliveries-for-an-app-webhook)
        public func get(perPage: Int? = nil, cursor: String? = nil) -> Request<[OctoKit.HookDeliveryItem]> {
            .get(path, query: makeGetQuery(perPage, cursor))
        }

        private func makeGetQuery(_ perPage: Int?, _ cursor: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(cursor, forKey: "cursor")
            return encoder.items
        }
    }
}

extension Paths.App.Hook.Deliveries {
    public func deliveryID(_ deliveryID: Int) -> WithDeliveryID {
        WithDeliveryID(path: "\(path)/\(deliveryID)")
    }

    public struct WithDeliveryID {
        /// Path: `/app/hook/deliveries/{delivery_id}`
        public let path: String

        /// Get a delivery for an app webhook
        ///
        /// Returns a delivery for the webhook configured for a GitHub App.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-delivery-for-an-app-webhook)
        public var get: Request<OctoKit.HookDelivery> {
            .get(path)
        }
    }
}

extension Paths.App.Hook.Deliveries.WithDeliveryID {
    public var attempts: Attempts {
        Attempts(path: path + "/attempts")
    }

    public struct Attempts {
        /// Path: `/app/hook/deliveries/{delivery_id}/attempts`
        public let path: String

        /// Redeliver a delivery for an app webhook
        ///
        /// Redeliver a delivery for the webhook configured for a GitHub App.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#redeliver-a-delivery-for-an-app-webhook)
        public var post: Request<[String: AnyJSON]> {
            .post(path)
        }
    }
}

extension Paths.App {
    public var installations: Installations {
        Installations(path: path + "/installations")
    }

    public struct Installations {
        /// Path: `/app/installations`
        public let path: String

        /// List installations for the authenticated app
        ///
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        /// 
        /// The permissions the installation has are included under the `permissions` key.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Installation]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            public var since: Date?
            public var outdated: String?

            public init(perPage: Int? = nil, page: Int? = nil, since: Date? = nil, outdated: String? = nil) {
                self.perPage = perPage
                self.page = page
                self.since = since
                self.outdated = outdated
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(since, forKey: "since")
                encoder.encode(outdated, forKey: "outdated")
                return encoder.items
            }
        }
    }
}

extension Paths.App.Installations {
    public func installationID(_ installationID: Int) -> WithInstallationID {
        WithInstallationID(path: "\(path)/\(installationID)")
    }

    public struct WithInstallationID {
        /// Path: `/app/installations/{installation_id}`
        public let path: String

        /// Get an installation for the authenticated app
        ///
        /// Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-an-installation-for-the-authenticated-app)
        public var get: Request<OctoKit.Installation> {
            .get(path)
        }

        /// Delete an installation for the authenticated app
        ///
        /// Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#delete-an-installation-for-the-authenticated-app)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.App.Installations.WithInstallationID {
    public var accessTokens: AccessTokens {
        AccessTokens(path: path + "/access_tokens")
    }

    public struct AccessTokens {
        /// Path: `/app/installations/{installation_id}/access_tokens`
        public let path: String

        /// Create an installation access token for an app
        ///
        /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps/#create-an-installation-access-token-for-an-app)
        public func post(_ body: PostRequest? = nil) -> Request<OctoKit.InstallationToken> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// List of repository names that the token should have access to
            public var repositories: [String]?
            /// List of repository IDs that the token should have access to
            ///
            /// Example: [1]
            public var repositoryIDs: [Int]?
            /// App Permissions
            ///
            /// The permissions granted to the user-to-server access token.
            ///
            /// Example:
            ///
            /// {
            ///   "contents" : "read",
            ///   "deployments" : "write",
            ///   "issues" : "read",
            ///   "single_file" : "read"
            /// }
            public var permissions: OctoKit.AppPermissions?

            public init(repositories: [String]? = nil, repositoryIDs: [Int]? = nil, permissions: OctoKit.AppPermissions? = nil) {
                self.repositories = repositories
                self.repositoryIDs = repositoryIDs
                self.permissions = permissions
            }

            private enum CodingKeys: String, CodingKey {
                case repositories
                case repositoryIDs = "repository_ids"
                case permissions
            }
        }
    }
}

extension Paths.App.Installations.WithInstallationID {
    public var suspended: Suspended {
        Suspended(path: path + "/suspended")
    }

    public struct Suspended {
        /// Path: `/app/installations/{installation_id}/suspended`
        public let path: String

        /// Suspend an app installation
        ///
        /// Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#suspend-an-app-installation)
        public var put: Request<Void> {
            .put(path)
        }

        /// Unsuspend an app installation
        ///
        /// Removes a GitHub App installation suspension.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#unsuspend-an-app-installation)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var applications: Applications {
        Applications(path: "/applications")
    }

    public struct Applications {
        /// Path: `/applications`
        public let path: String
    }
}

extension Paths.Applications {
    public var grants: Grants {
        Grants(path: path + "/grants")
    }

    public struct Grants {
        /// Path: `/applications/grants`
        public let path: String

        /// List your grants
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        /// 
        /// You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#list-your-grants)
        @available(*, deprecated, message: "Deprecated")
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.ApplicationGrant]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            public var clientID: String?

            public init(perPage: Int? = nil, page: Int? = nil, clientID: String? = nil) {
                self.perPage = perPage
                self.page = page
                self.clientID = clientID
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(clientID, forKey: "client_id")
                return encoder.items
            }
        }
    }
}

extension Paths.Applications.Grants {
    public func grantID(_ grantID: Int) -> WithGrantID {
        WithGrantID(path: "\(path)/\(grantID)")
    }

    public struct WithGrantID {
        /// Path: `/applications/grants/{grant_id}`
        public let path: String

        /// Get a single grant
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#get-a-single-grant)
        @available(*, deprecated, message: "Deprecated")
        public var get: Request<OctoKit.ApplicationGrant> {
            .get(path)
        }

        /// Delete a grant
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        /// 
        /// Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#delete-a-grant)
        @available(*, deprecated, message: "Deprecated")
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Applications {
    public func clientID(_ clientID: String) -> WithClientID {
        WithClientID(path: "\(path)/\(clientID)")
    }

    public struct WithClientID {
        /// Path: `/applications/{client_id}`
        public let path: String
    }
}

extension Paths.Applications.WithClientID {
    public var grant: Grant {
        Grant(path: path + "/grant")
    }

    public struct Grant {
        /// Path: `/applications/{client_id}/grant`
        public let path: String

        /// Delete an app authorization
        ///
        /// OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
        /// Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#delete-an-app-authorization)
        public func delete(accessToken: String) -> Request<Void> {
            .delete(path, body: ["access_token": accessToken])
        }
    }
}

extension Paths.Applications.WithClientID {
    public var token: Token {
        Token(path: path + "/token")
    }

    public struct Token {
        /// Path: `/applications/{client_id}/token`
        public let path: String

        /// Check a token
        ///
        /// OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#check-a-token)
        public func post(accessToken: String) -> Request<OctoKit.Authorization> {
            .post(path, body: ["access_token": accessToken])
        }

        /// Reset a token
        ///
        /// OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#reset-a-token)
        public func patch(accessToken: String) -> Request<OctoKit.Authorization> {
            .patch(path, body: ["access_token": accessToken])
        }

        /// Delete an app token
        ///
        /// OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#delete-an-app-token)
        public func delete(accessToken: String) -> Request<Void> {
            .delete(path, body: ["access_token": accessToken])
        }
    }
}

extension Paths.Applications.WithClientID.Token {
    public var scoped: Scoped {
        Scoped(path: path + "/scoped")
    }

    public struct Scoped {
        /// Path: `/applications/{client_id}/token/scoped`
        public let path: String

        /// Create a scoped access token
        ///
        /// Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#create-a-scoped-access-token)
        public func post(_ body: PostRequest) -> Request<OctoKit.Authorization> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The OAuth access token used to authenticate to the GitHub API.
            ///
            /// Example: "e72e16c7e42f292c6912e7710c838347ae178b4a"
            public var accessToken: String
            /// The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
            ///
            /// Example: "octocat"
            public var target: String?
            /// The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
            public var targetID: Int?
            /// The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.
            public var repositories: [String]?
            /// The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
            ///
            /// Example: [1]
            public var repositoryIDs: [Int]?
            /// App Permissions
            ///
            /// The permissions granted to the user-to-server access token.
            ///
            /// Example:
            ///
            /// {
            ///   "contents" : "read",
            ///   "deployments" : "write",
            ///   "issues" : "read",
            ///   "single_file" : "read"
            /// }
            public var permissions: OctoKit.AppPermissions?

            public init(accessToken: String, target: String? = nil, targetID: Int? = nil, repositories: [String]? = nil, repositoryIDs: [Int]? = nil, permissions: OctoKit.AppPermissions? = nil) {
                self.accessToken = accessToken
                self.target = target
                self.targetID = targetID
                self.repositories = repositories
                self.repositoryIDs = repositoryIDs
                self.permissions = permissions
            }

            private enum CodingKeys: String, CodingKey {
                case accessToken = "access_token"
                case target
                case targetID = "target_id"
                case repositories
                case repositoryIDs = "repository_ids"
                case permissions
            }
        }
    }
}

extension Paths {
    public static var apps: Apps {
        Apps(path: "/apps")
    }

    public struct Apps {
        /// Path: `/apps`
        public let path: String
    }
}

extension Paths.Apps {
    public func appSlug(_ appSlug: String) -> WithAppSlug {
        WithAppSlug(path: "\(path)/\(appSlug)")
    }

    public struct WithAppSlug {
        /// Path: `/apps/{app_slug}`
        public let path: String

        /// Get an app
        ///
        /// **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
        /// 
        /// If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps/#get-an-app)
        public var get: Request<OctoKit.Integration> {
            .get(path)
        }
    }
}

extension Paths {
    public static var authorizations: Authorizations {
        Authorizations(path: "/authorizations")
    }

    public struct Authorizations {
        /// Path: `/authorizations`
        public let path: String

        /// List your authorizations
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations)
        @available(*, deprecated, message: "Deprecated")
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Authorization]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            public var clientID: String?

            public init(perPage: Int? = nil, page: Int? = nil, clientID: String? = nil) {
                self.perPage = perPage
                self.page = page
                self.clientID = clientID
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(clientID, forKey: "client_id")
                return encoder.items
            }
        }

        /// Create a new authorization
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        /// 
        /// **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
        /// 
        /// Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
        /// 
        /// To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
        /// 
        /// You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).
        /// 
        /// Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#create-a-new-authorization)
        @available(*, deprecated, message: "Deprecated")
        public func post(_ body: PostRequest? = nil) -> Request<OctoKit.Authorization> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// A list of scopes that this authorization is in.
            ///
            /// Example: ["public_repo", "user"]
            public var scopes: [String]?
            /// A note to remind you what the OAuth token is for.
            ///
            /// Example: "Update all gems"
            public var note: String?
            /// A URL to remind you what app the OAuth token is for.
            public var noteURL: String?
            /// The OAuth app client key for which to create the token.
            public var clientID: String?
            /// The OAuth app client secret for which to create the token.
            public var clientSecret: String?
            /// A unique string to distinguish an authorization from others created for the same client ID and user.
            public var fingerprint: String?

            public init(scopes: [String]? = nil, note: String? = nil, noteURL: String? = nil, clientID: String? = nil, clientSecret: String? = nil, fingerprint: String? = nil) {
                self.scopes = scopes
                self.note = note
                self.noteURL = noteURL
                self.clientID = clientID
                self.clientSecret = clientSecret
                self.fingerprint = fingerprint
            }

            private enum CodingKeys: String, CodingKey {
                case scopes
                case note
                case noteURL = "note_url"
                case clientID = "client_id"
                case clientSecret = "client_secret"
                case fingerprint
            }
        }
    }
}

extension Paths.Authorizations {
    public var clients: Clients {
        Clients(path: path + "/clients")
    }

    public struct Clients {
        /// Path: `/authorizations/clients`
        public let path: String
    }
}

extension Paths.Authorizations.Clients {
    public func clientID(_ clientID: String) -> WithClientID {
        WithClientID(path: "\(path)/\(clientID)")
    }

    public struct WithClientID {
        /// Path: `/authorizations/clients/{client_id}`
        public let path: String

        /// Get-or-create an authorization for a specific app
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        /// 
        /// **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
        /// 
        /// Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
        /// 
        /// If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
        /// 
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#get-or-create-an-authorization-for-a-specific-app)
        @available(*, deprecated, message: "Deprecated")
        public func put(_ body: PutRequest) -> Request<OctoKit.Authorization> {
            .put(path, body: body)
        }

        public enum PutResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PutRequest: Encodable {
            /// The OAuth app client secret for which to create the token.
            public var clientSecret: String
            /// A list of scopes that this authorization is in.
            ///
            /// Example: ["public_repo", "user"]
            public var scopes: [String]?
            /// A note to remind you what the OAuth token is for.
            ///
            /// Example: "Update all gems"
            public var note: String?
            /// A URL to remind you what app the OAuth token is for.
            public var noteURL: String?
            /// A unique string to distinguish an authorization from others created for the same client ID and user.
            public var fingerprint: String?

            public init(clientSecret: String, scopes: [String]? = nil, note: String? = nil, noteURL: String? = nil, fingerprint: String? = nil) {
                self.clientSecret = clientSecret
                self.scopes = scopes
                self.note = note
                self.noteURL = noteURL
                self.fingerprint = fingerprint
            }

            private enum CodingKeys: String, CodingKey {
                case clientSecret = "client_secret"
                case scopes
                case note
                case noteURL = "note_url"
                case fingerprint
            }
        }
    }
}

extension Paths.Authorizations.Clients.WithClientID {
    public func fingerprint(_ fingerprint: String) -> WithFingerprint {
        WithFingerprint(path: "\(path)/\(fingerprint)")
    }

    public struct WithFingerprint {
        /// Path: `/authorizations/clients/{client_id}/{fingerprint}`
        public let path: String

        /// Get-or-create an authorization for a specific app and fingerprint
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        /// 
        /// **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
        /// 
        /// This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
        /// 
        /// If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#get-or-create-an-authorization-for-a-specific-app-and-fingerprint)
        @available(*, deprecated, message: "Deprecated")
        public func put(_ body: PutRequest) -> Request<OctoKit.Authorization> {
            .put(path, body: body)
        }

        public enum PutResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PutRequest: Encodable {
            /// The OAuth app client secret for which to create the token.
            public var clientSecret: String
            /// A list of scopes that this authorization is in.
            ///
            /// Example: ["public_repo", "user"]
            public var scopes: [String]?
            /// A note to remind you what the OAuth token is for.
            ///
            /// Example: "Update all gems"
            public var note: String?
            /// A URL to remind you what app the OAuth token is for.
            public var noteURL: String?

            public init(clientSecret: String, scopes: [String]? = nil, note: String? = nil, noteURL: String? = nil) {
                self.clientSecret = clientSecret
                self.scopes = scopes
                self.note = note
                self.noteURL = noteURL
            }

            private enum CodingKeys: String, CodingKey {
                case clientSecret = "client_secret"
                case scopes
                case note
                case noteURL = "note_url"
            }
        }
    }
}

extension Paths.Authorizations {
    public func authorizationID(_ authorizationID: Int) -> WithAuthorizationID {
        WithAuthorizationID(path: "\(path)/\(authorizationID)")
    }

    public struct WithAuthorizationID {
        /// Path: `/authorizations/{authorization_id}`
        public let path: String

        /// Get a single authorization
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#get-a-single-authorization)
        @available(*, deprecated, message: "Deprecated")
        public var get: Request<OctoKit.Authorization> {
            .get(path)
        }

        /// Update an existing authorization
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        /// 
        /// If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
        /// 
        /// You can only send one of these scope keys at a time.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#update-an-existing-authorization)
        @available(*, deprecated, message: "Deprecated")
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.Authorization> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// A list of scopes that this authorization is in.
            ///
            /// Example: ["public_repo", "user"]
            public var scopes: [String]?
            /// A list of scopes to add to this authorization.
            public var addScopes: [String]?
            /// A list of scopes to remove from this authorization.
            public var removeScopes: [String]?
            /// A note to remind you what the OAuth token is for.
            ///
            /// Example: "Update all gems"
            public var note: String?
            /// A URL to remind you what app the OAuth token is for.
            public var noteURL: String?
            /// A unique string to distinguish an authorization from others created for the same client ID and user.
            public var fingerprint: String?

            public init(scopes: [String]? = nil, addScopes: [String]? = nil, removeScopes: [String]? = nil, note: String? = nil, noteURL: String? = nil, fingerprint: String? = nil) {
                self.scopes = scopes
                self.addScopes = addScopes
                self.removeScopes = removeScopes
                self.note = note
                self.noteURL = noteURL
                self.fingerprint = fingerprint
            }

            private enum CodingKeys: String, CodingKey {
                case scopes
                case addScopes = "add_scopes"
                case removeScopes = "remove_scopes"
                case note
                case noteURL = "note_url"
                case fingerprint
            }
        }

        /// Delete an authorization
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#delete-an-authorization)
        @available(*, deprecated, message: "Deprecated")
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var codesOfConduct: CodesOfConduct {
        CodesOfConduct(path: "/codes_of_conduct")
    }

    public struct CodesOfConduct {
        /// Path: `/codes_of_conduct`
        public let path: String

        /// Get all codes of conduct
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codes-of-conduct#get-all-codes-of-conduct)
        public var get: Request<[OctoKit.CodeOfConduct]> {
            .get(path)
        }
    }
}

extension Paths.CodesOfConduct {
    public func key(_ key: String) -> WithKey {
        WithKey(path: "\(path)/\(key)")
    }

    public struct WithKey {
        /// Path: `/codes_of_conduct/{key}`
        public let path: String

        /// Get a code of conduct
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codes-of-conduct#get-a-code-of-conduct)
        public var get: Request<OctoKit.CodeOfConduct> {
            .get(path)
        }
    }
}

extension Paths {
    public static var emojis: Emojis {
        Emojis(path: "/emojis")
    }

    public struct Emojis {
        /// Path: `/emojis`
        public let path: String

        /// Get emojis
        ///
        /// Lists all the emojis available to use on GitHub.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/emojis#get-emojis)
        public var get: Request<[String: String]> {
            .get(path)
        }
    }
}

extension Paths {
    public static var enterprises: Enterprises {
        Enterprises(path: "/enterprises")
    }

    public struct Enterprises {
        /// Path: `/enterprises`
        public let path: String
    }
}

extension Paths.Enterprises {
    public func enterprise(_ enterprise: String) -> WithEnterprise {
        WithEnterprise(path: "\(path)/\(enterprise)")
    }

    public struct WithEnterprise {
        /// Path: `/enterprises/{enterprise}`
        public let path: String
    }
}

extension Paths.Enterprises.WithEnterprise {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/enterprises/{enterprise}/actions`
        public let path: String
    }
}

extension Paths.Enterprises.WithEnterprise.Actions {
    public var permissions: Permissions {
        Permissions(path: path + "/permissions")
    }

    public struct Permissions {
        /// Path: `/enterprises/{enterprise}/actions/permissions`
        public let path: String

        /// Get GitHub Actions permissions for an enterprise
        ///
        /// Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-github-actions-permissions-for-an-enterprise)
        public var get: Request<OctoKit.ActionsEnterprisePermissions> {
            .get(path)
        }

        /// Set GitHub Actions permissions for an enterprise
        ///
        /// Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#set-github-actions-permissions-for-an-enterprise)
        public func put(_ body: PutRequest) -> Request<Void> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
            public var enabledOrganizations: OctoKit.EnabledOrganizations
            /// The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
            public var allowedActions: OctoKit.AllowedActions?

            public init(enabledOrganizations: OctoKit.EnabledOrganizations, allowedActions: OctoKit.AllowedActions? = nil) {
                self.enabledOrganizations = enabledOrganizations
                self.allowedActions = allowedActions
            }

            private enum CodingKeys: String, CodingKey {
                case enabledOrganizations = "enabled_organizations"
                case allowedActions = "allowed_actions"
            }
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Permissions {
    public var organizations: Organizations {
        Organizations(path: path + "/organizations")
    }

    public struct Organizations {
        /// Path: `/enterprises/{enterprise}/actions/permissions/organizations`
        public let path: String

        /// List selected organizations enabled for GitHub Actions in an enterprise
        ///
        /// Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-selected-organizations-enabled-for-github-actions-in-an-enterprise)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double
            public var organizations: [OctoKit.OrganizationSimple]

            public init(totalCount: Double, organizations: [OctoKit.OrganizationSimple]) {
                self.totalCount = totalCount
                self.organizations = organizations
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case organizations
            }
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Set selected organizations enabled for GitHub Actions in an enterprise
        ///
        /// Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#set-selected-organizations-enabled-for-github-actions-in-an-enterprise)
        public func put(selectedOrganizationIDs: [Int]) -> Request<Void> {
            .put(path, body: ["selected_organization_ids": selectedOrganizationIDs])
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Permissions.Organizations {
    public func orgID(_ orgID: Int) -> WithOrgID {
        WithOrgID(path: "\(path)/\(orgID)")
    }

    public struct WithOrgID {
        /// Path: `/enterprises/{enterprise}/actions/permissions/organizations/{org_id}`
        public let path: String

        /// Enable a selected organization for GitHub Actions in an enterprise
        ///
        /// Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#enable-a-selected-organization-for-github-actions-in-an-enterprise)
        public var put: Request<Void> {
            .put(path)
        }

        /// Disable a selected organization for GitHub Actions in an enterprise
        ///
        /// Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#disable-a-selected-organization-for-github-actions-in-an-enterprise)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Permissions {
    public var selectedActions: SelectedActions {
        SelectedActions(path: path + "/selected-actions")
    }

    public struct SelectedActions {
        /// Path: `/enterprises/{enterprise}/actions/permissions/selected-actions`
        public let path: String

        /// Get allowed actions for an enterprise
        ///
        /// Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-allowed-actions-for-an-enterprise)
        public var get: Request<OctoKit.SelectedActions> {
            .get(path)
        }

        /// Set allowed actions for an enterprise
        ///
        /// Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#set-allowed-actions-for-an-enterprise)
        public func put(_ body: OctoKit.SelectedActions) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions {
    public var runnerGroups: RunnerGroups {
        RunnerGroups(path: path + "/runner-groups")
    }

    public struct RunnerGroups {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups`
        public let path: String

        /// List self-hosted runner groups for an enterprise
        ///
        /// Lists all self-hosted runner groups for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runner-groups-for-an-enterprise)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double
            public var runnerGroups: [OctoKit.RunnerGroupsEnterprise]

            public init(totalCount: Double, runnerGroups: [OctoKit.RunnerGroupsEnterprise]) {
                self.totalCount = totalCount
                self.runnerGroups = runnerGroups
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case runnerGroups = "runner_groups"
            }
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a self-hosted runner group for an enterprise
        ///
        /// Creates a new self-hosted runner group for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#create-self-hosted-runner-group-for-an-enterprise)
        public func post(_ body: PostRequest) -> Request<OctoKit.RunnerGroupsEnterprise> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// Name of the runner group.
            public var name: String
            /// Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected`
            public var visibility: Visibility?
            /// List of organization IDs that can access the runner group.
            public var selectedOrganizationIDs: [Int]?
            /// List of runner IDs to add to the runner group.
            public var runners: [Int]?
            /// Whether the runner group can be used by `public` repositories.
            public var allowsPublicRepositories: Bool

            /// Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected`
            public enum Visibility: String, Codable, CaseIterable {
                case selected
                case all
            }

            public init(name: String, visibility: Visibility? = nil, selectedOrganizationIDs: [Int]? = nil, runners: [Int]? = nil, allowsPublicRepositories: Bool? = nil) {
                self.name = name
                self.visibility = visibility
                self.selectedOrganizationIDs = selectedOrganizationIDs
                self.runners = runners
                self.allowsPublicRepositories = allowsPublicRepositories ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case visibility
                case selectedOrganizationIDs = "selected_organization_ids"
                case runners
                case allowsPublicRepositories = "allows_public_repositories"
            }
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.RunnerGroups {
    public func runnerGroupID(_ runnerGroupID: Int) -> WithRunnerGroupID {
        WithRunnerGroupID(path: "\(path)/\(runnerGroupID)")
    }

    public struct WithRunnerGroupID {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}`
        public let path: String

        /// Get a self-hosted runner group for an enterprise
        ///
        /// Gets a specific self-hosted runner group for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-a-self-hosted-runner-group-for-an-enterprise)
        public var get: Request<OctoKit.RunnerGroupsEnterprise> {
            .get(path)
        }

        /// Update a self-hosted runner group for an enterprise
        ///
        /// Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#update-a-self-hosted-runner-group-for-an-enterprise)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.RunnerGroupsEnterprise> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Name of the runner group.
            public var name: String?
            /// Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected`
            public var visibility: Visibility?
            /// Whether the runner group can be used by `public` repositories.
            public var allowsPublicRepositories: Bool

            /// Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected`
            public enum Visibility: String, Codable, CaseIterable {
                case selected
                case all
            }

            public init(name: String? = nil, visibility: Visibility? = nil, allowsPublicRepositories: Bool? = nil) {
                self.name = name
                self.visibility = visibility
                self.allowsPublicRepositories = allowsPublicRepositories ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case visibility
                case allowsPublicRepositories = "allows_public_repositories"
            }
        }

        /// Delete a self-hosted runner group from an enterprise
        ///
        /// Deletes a self-hosted runner group for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#delete-a-self-hosted-runner-group-from-an-enterprise)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.RunnerGroups.WithRunnerGroupID {
    public var organizations: Organizations {
        Organizations(path: path + "/organizations")
    }

    public struct Organizations {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations`
        public let path: String

        /// List organization access to a self-hosted runner group in an enterprise
        ///
        /// Lists the organizations with access to a self-hosted runner group.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double
            public var organizations: [OctoKit.OrganizationSimple]

            public init(totalCount: Double, organizations: [OctoKit.OrganizationSimple]) {
                self.totalCount = totalCount
                self.organizations = organizations
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case organizations
            }
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Set organization access for a self-hosted runner group in an enterprise
        ///
        /// Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise)
        public func put(selectedOrganizationIDs: [Int]) -> Request<Void> {
            .put(path, body: ["selected_organization_ids": selectedOrganizationIDs])
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.RunnerGroups.WithRunnerGroupID.Organizations {
    public func orgID(_ orgID: Int) -> WithOrgID {
        WithOrgID(path: "\(path)/\(orgID)")
    }

    public struct WithOrgID {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}`
        public let path: String

        /// Add organization access to a self-hosted runner group in an enterprise
        ///
        /// Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise)
        public var put: Request<Void> {
            .put(path)
        }

        /// Remove organization access to a self-hosted runner group in an enterprise
        ///
        /// Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.RunnerGroups.WithRunnerGroupID {
    public var runners: Runners {
        Runners(path: path + "/runners")
    }

    public struct Runners {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners`
        public let path: String

        /// List self-hosted runners in a group for an enterprise
        ///
        /// Lists the self-hosted runners that are in a specific enterprise group.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-in-a-group-for-an-enterprise)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double
            public var runners: [OctoKit.Runner]

            public init(totalCount: Double, runners: [OctoKit.Runner]) {
                self.totalCount = totalCount
                self.runners = runners
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case runners
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Set self-hosted runners in a group for an enterprise
        ///
        /// Replaces the list of self-hosted runners that are part of an enterprise runner group.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#set-self-hosted-runners-in-a-group-for-an-enterprise)
        public func put(runners: [Int]) -> Request<Void> {
            .put(path, body: ["runners": runners])
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.RunnerGroups.WithRunnerGroupID.Runners {
    public func runnerID(_ runnerID: Int) -> WithRunnerID {
        WithRunnerID(path: "\(path)/\(runnerID)")
    }

    public struct WithRunnerID {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}`
        public let path: String

        /// Add a self-hosted runner to a group for an enterprise
        ///
        /// Adds a self-hosted runner to a runner group configured in an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise`
        /// scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#add-a-self-hosted-runner-to-a-group-for-an-enterprise)
        public var put: Request<Void> {
            .put(path)
        }

        /// Remove a self-hosted runner from a group for an enterprise
        ///
        /// Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#remove-a-self-hosted-runner-from-a-group-for-an-enterprise)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions {
    public var runners: Runners {
        Runners(path: path + "/runners")
    }

    public struct Runners {
        /// Path: `/enterprises/{enterprise}/actions/runners`
        public let path: String

        /// List self-hosted runners for an enterprise
        ///
        /// Lists all self-hosted runners configured for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-for-an-enterprise)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double?
            public var runners: [OctoKit.Runner]?

            public init(totalCount: Double? = nil, runners: [OctoKit.Runner]? = nil) {
                self.totalCount = totalCount
                self.runners = runners
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case runners
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Runners {
    public var downloads: Downloads {
        Downloads(path: path + "/downloads")
    }

    public struct Downloads {
        /// Path: `/enterprises/{enterprise}/actions/runners/downloads`
        public let path: String

        /// List runner applications for an enterprise
        ///
        /// Lists binaries for the runner application that you can download and run.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-runner-applications-for-an-enterprise)
        public var get: Request<[OctoKit.RunnerApplication]> {
            .get(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Runners {
    public var registrationToken: RegistrationToken {
        RegistrationToken(path: path + "/registration-token")
    }

    public struct RegistrationToken {
        /// Path: `/enterprises/{enterprise}/actions/runners/registration-token`
        public let path: String

        /// Create a registration token for an enterprise
        ///
        /// Returns a token that you can pass to the `config` script. The token expires after one hour.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        /// 
        /// #### Example using registration token
        /// 
        /// Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
        /// 
        /// ```
        /// ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#create-a-registration-token-for-an-enterprise)
        public var post: Request<OctoKit.AuthenticationToken> {
            .post(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Runners {
    public var removeToken: RemoveToken {
        RemoveToken(path: path + "/remove-token")
    }

    public struct RemoveToken {
        /// Path: `/enterprises/{enterprise}/actions/runners/remove-token`
        public let path: String

        /// Create a remove token for an enterprise
        ///
        /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        /// 
        /// #### Example using remove token
        /// 
        /// To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
        /// endpoint.
        /// 
        /// ```
        /// ./config.sh remove --token TOKEN
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#create-a-remove-token-for-an-enterprise)
        public var post: Request<OctoKit.AuthenticationToken> {
            .post(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Runners {
    public func runnerID(_ runnerID: Int) -> WithRunnerID {
        WithRunnerID(path: "\(path)/\(runnerID)")
    }

    public struct WithRunnerID {
        /// Path: `/enterprises/{enterprise}/actions/runners/{runner_id}`
        public let path: String

        /// Get a self-hosted runner for an enterprise
        ///
        /// Gets a specific self-hosted runner configured in an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-a-self-hosted-runner-for-an-enterprise)
        public var get: Request<OctoKit.Runner> {
            .get(path)
        }

        /// Delete a self-hosted runner from an enterprise
        ///
        /// Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#delete-self-hosted-runner-from-an-enterprise)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Runners.WithRunnerID {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/enterprises/{enterprise}/actions/runners/{runner_id}/labels`
        public let path: String

        /// List labels for a self-hosted runner for an enterprise
        ///
        /// Lists all labels for a self-hosted runner configured in an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-labels-for-a-self-hosted-runner-for-an-enterprise)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }

        /// Add custom labels to a self-hosted runner for an enterprise
        ///
        /// Add custom labels to a self-hosted runner configured in an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#add-custom-labels-to-a-self-hosted-runner-for-an-enterprise)
        public func post(labels: [String]) -> Request<PostResponse> {
            .post(path, body: ["labels": labels])
        }

        public struct PostResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }

        /// Set custom labels for a self-hosted runner for an enterprise
        ///
        /// Remove all previous custom labels and set the new custom labels for a specific
        /// self-hosted runner configured in an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#set-custom-labels-for-a-self-hosted-runner-for-an-enterprise)
        public func put(labels: [String]) -> Request<PutResponse> {
            .put(path, body: ["labels": labels])
        }

        public struct PutResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }

        /// Remove all custom labels from a self-hosted runner for an enterprise
        ///
        /// Remove all custom labels from a self-hosted runner configured in an
        /// enterprise. Returns the remaining read-only labels from the runner.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#remove-all-custom-labels-from-a-self-hosted-runner-for-an-enterprise)
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Runners.WithRunnerID.Labels {
    public func name(_ name: String) -> WithName {
        WithName(path: "\(path)/\(name)")
    }

    public struct WithName {
        /// Path: `/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}`
        public let path: String

        /// Remove a custom label from a self-hosted runner for an enterprise
        ///
        /// Remove a custom label from a self-hosted runner configured
        /// in an enterprise. Returns the remaining labels from the runner.
        /// 
        /// This endpoint returns a `404 Not Found` status if the custom label is not
        /// present on the runner.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#remove-a-custom-label-from-a-self-hosted-runner-for-an-enterprise)
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }
    }
}

extension Paths.Enterprises.WithEnterprise {
    public var auditLog: AuditLog {
        AuditLog(path: path + "/audit-log")
    }

    public struct AuditLog {
        /// Path: `/enterprises/{enterprise}/audit-log`
        public let path: String

        /// Get the audit log for an enterprise
        ///
        /// Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.AuditLogEvent]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var phrase: String?
            public var include: Include?
            public var after: String?
            public var before: String?
            public var order: Order?
            public var page: Int?
            public var perPage: Int?

            public enum Include: String, Codable, CaseIterable {
                case web
                case git
                case all
            }

            public enum Order: String, Codable, CaseIterable {
                case desc
                case asc
            }

            public init(phrase: String? = nil, include: Include? = nil, after: String? = nil, before: String? = nil, order: Order? = nil, page: Int? = nil, perPage: Int? = nil) {
                self.phrase = phrase
                self.include = include
                self.after = after
                self.before = before
                self.order = order
                self.page = page
                self.perPage = perPage
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(phrase, forKey: "phrase")
                encoder.encode(include, forKey: "include")
                encoder.encode(after, forKey: "after")
                encoder.encode(before, forKey: "before")
                encoder.encode(order, forKey: "order")
                encoder.encode(page, forKey: "page")
                encoder.encode(perPage, forKey: "per_page")
                return encoder.items
            }
        }
    }
}

extension Paths.Enterprises.WithEnterprise {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/enterprises/{enterprise}/settings`
        public let path: String
    }
}

extension Paths.Enterprises.WithEnterprise.Settings {
    public var billing: Billing {
        Billing(path: path + "/billing")
    }

    public struct Billing {
        /// Path: `/enterprises/{enterprise}/settings/billing`
        public let path: String
    }
}

extension Paths.Enterprises.WithEnterprise.Settings.Billing {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/enterprises/{enterprise}/settings/billing/actions`
        public let path: String

        /// Get GitHub Actions billing for an enterprise
        ///
        /// Gets the summary of the free and paid GitHub Actions minutes used.
        /// 
        /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
        /// 
        /// The authenticated user must be an enterprise admin.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-enterprise)
        public var get: Request<OctoKit.ActionsBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Settings.Billing {
    public var advancedSecurity: AdvancedSecurity {
        AdvancedSecurity(path: path + "/advanced-security")
    }

    public struct AdvancedSecurity {
        /// Path: `/enterprises/{enterprise}/settings/billing/advanced-security`
        public let path: String

        /// Get GitHub Advanced Security active committers for an enterprise
        ///
        /// Gets the GitHub Advanced Security active committers for an enterprise per repository.
        /// Each distinct user login across all repositories is counted as a single Advanced Security seat, so the total_advanced_security_committers is not the sum of active_users for each repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#export-advanced-security-active-committers-data-for-enterprise)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<OctoKit.AdvancedSecurityActiveCommitters> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Settings.Billing {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/enterprises/{enterprise}/settings/billing/packages`
        public let path: String

        /// Get GitHub Packages billing for an enterprise
        ///
        /// Gets the free and paid storage used for GitHub Packages in gigabytes.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// The authenticated user must be an enterprise admin.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-enterprise)
        public var get: Request<OctoKit.PackagesBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Settings.Billing {
    public var sharedStorage: SharedStorage {
        SharedStorage(path: path + "/shared-storage")
    }

    public struct SharedStorage {
        /// Path: `/enterprises/{enterprise}/settings/billing/shared-storage`
        public let path: String

        /// Get shared storage billing for an enterprise
        ///
        /// Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// The authenticated user must be an enterprise admin.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-enterprise)
        public var get: Request<OctoKit.CombinedBillingUsage> {
            .get(path)
        }
    }
}

extension Paths {
    public static var events: Events {
        Events(path: "/events")
    }

    public struct Events {
        /// Path: `/events`
        public let path: String

        /// List public events
        ///
        /// We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-public-events)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Event]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths {
    public static var feeds: Feeds {
        Feeds(path: "/feeds")
    }

    public struct Feeds {
        /// Path: `/feeds`
        public let path: String

        /// Get feeds
        ///
        /// GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
        /// 
        /// *   **Timeline**: The GitHub global public timeline
        /// *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
        /// *   **Current user public**: The public timeline for the authenticated user
        /// *   **Current user**: The private timeline for the authenticated user
        /// *   **Current user actor**: The private timeline for activity created by the authenticated user
        /// *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
        /// *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
        /// 
        /// **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#get-feeds)
        public var get: Request<OctoKit.Feed> {
            .get(path)
        }
    }
}

extension Paths {
    public static var gists: Gists {
        Gists(path: "/gists")
    }

    public struct Gists {
        /// Path: `/gists`
        public let path: String

        /// List gists for the authenticated user
        ///
        /// Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gists-for-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.BaseGist]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public init(since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a gist
        ///
        /// Allows you to add a new gist with one or more files.
        /// 
        /// **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#create-a-gist)
        public func post(_ body: PostRequest) -> Request<OctoKit.GistSimple> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// Description of the gist
            ///
            /// Example: "Example Ruby script"
            public var description: String?
            /// Names and content for the files that make up the gist
            ///
            /// Example:
            ///
            /// {
            ///   "hello.rb" : {
            ///     "content" : "puts \"Hello, World!\""
            ///   }
            /// }
            public var files: [String: File]
            public var `public`: Public?

            public struct File: Encodable {
                /// Content of the file
                public var content: String

                public init(content: String) {
                    self.content = content
                }
            }

            public enum Public: Encodable {
                case bool(Bool)
                case object(Object)

                /// Example: true
                public enum Object: String, Codable, CaseIterable {
                    case `true`
                    case `false`
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .bool(let value): try container.encode(value)
                    case .object(let value): try container.encode(value)
                    }
                }
            }

            public init(description: String? = nil, files: [String: File], `public`: Public? = nil) {
                self.description = description
                self.files = files
                self.public = `public`
            }

            private enum CodingKeys: String, CodingKey {
                case description
                case files
                case `public`
            }
        }
    }
}

extension Paths.Gists {
    public var `public`: Public {
        Public(path: path + "/public")
    }

    public struct Public {
        /// Path: `/gists/public`
        public let path: String

        /// List public gists
        ///
        /// List public gists sorted by most recently updated to least recently updated.
        /// 
        /// Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-public-gists)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.BaseGist]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public init(since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Gists {
    public var starred: Starred {
        Starred(path: path + "/starred")
    }

    public struct Starred {
        /// Path: `/gists/starred`
        public let path: String

        /// List starred gists
        ///
        /// List the authenticated user's starred gists:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-starred-gists)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.BaseGist]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public init(since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Gists {
    public func gistID(_ gistID: String) -> WithGistID {
        WithGistID(path: "\(path)/\(gistID)")
    }

    public struct WithGistID {
        /// Path: `/gists/{gist_id}`
        public let path: String

        /// Get a gist
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#get-a-gist)
        public var get: Request<OctoKit.GistSimple> {
            .get(path)
        }

        /// Update a gist
        ///
        /// Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists/#update-a-gist)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.GistSimple> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Description of the gist
            ///
            /// Example: "Example Ruby script"
            public var description: String?
            /// Names of files to be updated
            ///
            /// Example:
            ///
            /// {
            ///   "hello.rb" : {
            ///     "content" : "blah",
            ///     "filename" : "goodbye.rb"
            ///   }
            /// }
            public var files: [String: File]?

            public struct File: Encodable {
                /// The new content of the file
                public var content: String
                /// The new filename for the file
                public var filename: String?

                public init(content: String, filename: String? = nil) {
                    self.content = content
                    self.filename = filename
                }
            }

            public init(description: String? = nil, files: [String: File]? = nil) {
                self.description = description
                self.files = files
            }
        }

        /// Delete a gist
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#delete-a-gist)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Gists.WithGistID {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/gists/{gist_id}/comments`
        public let path: String

        /// List gist comments
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gist-comments)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.GistComment]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a gist comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#create-a-gist-comment)
        public func post(body: String) -> Request<OctoKit.GistComment> {
            .post(path, body: ["body": body])
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }
    }
}

extension Paths.Gists.WithGistID.Comments {
    public func commentID(_ commentID: Int) -> WithCommentID {
        WithCommentID(path: "\(path)/\(commentID)")
    }

    public struct WithCommentID {
        /// Path: `/gists/{gist_id}/comments/{comment_id}`
        public let path: String

        /// Get a gist comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#get-a-gist-comment)
        public var get: Request<OctoKit.GistComment> {
            .get(path)
        }

        /// Update a gist comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#update-a-gist-comment)
        public func patch(body: String) -> Request<OctoKit.GistComment> {
            .patch(path, body: ["body": body])
        }

        /// Delete a gist comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#delete-a-gist-comment)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Gists.WithGistID {
    public var commits: Commits {
        Commits(path: path + "/commits")
    }

    public struct Commits {
        /// Path: `/gists/{gist_id}/commits`
        public let path: String

        /// List gist commits
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gist-commits)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.GistCommit]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Gists.WithGistID {
    public var forks: Forks {
        Forks(path: path + "/forks")
    }

    public struct Forks {
        /// Path: `/gists/{gist_id}/forks`
        public let path: String

        /// List gist forks
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gist-forks)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.GistSimple]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Fork a gist
        ///
        /// **Note**: This was previously `/gists/:gist_id/fork`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#fork-a-gist)
        public var post: Request<OctoKit.BaseGist> {
            .post(path)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }
    }
}

extension Paths.Gists.WithGistID {
    public var star: Star {
        Star(path: path + "/star")
    }

    public struct Star {
        /// Path: `/gists/{gist_id}/star`
        public let path: String

        /// Check if a gist is starred
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#check-if-a-gist-is-starred)
        public var get: Request<Void> {
            .get(path)
        }

        /// Star a gist
        ///
        /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#star-a-gist)
        public var put: Request<Void> {
            .put(path)
        }

        /// Unstar a gist
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#unstar-a-gist)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Gists.WithGistID {
    public func sha(_ sha: String) -> WithSha {
        WithSha(path: "\(path)/\(sha)")
    }

    public struct WithSha {
        /// Path: `/gists/{gist_id}/{sha}`
        public let path: String

        /// Get a gist revision
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#get-a-gist-revision)
        public var get: Request<OctoKit.GistSimple> {
            .get(path)
        }
    }
}

extension Paths {
    public static var gitignore: Gitignore {
        Gitignore(path: "/gitignore")
    }

    public struct Gitignore {
        /// Path: `/gitignore`
        public let path: String
    }
}

extension Paths.Gitignore {
    public var templates: Templates {
        Templates(path: path + "/templates")
    }

    public struct Templates {
        /// Path: `/gitignore/templates`
        public let path: String

        /// Get all gitignore templates
        ///
        /// List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gitignore#get-all-gitignore-templates)
        public var get: Request<[String]> {
            .get(path)
        }
    }
}

extension Paths.Gitignore.Templates {
    public func name(_ name: String) -> WithName {
        WithName(path: "\(path)/\(name)")
    }

    public struct WithName {
        /// Path: `/gitignore/templates/{name}`
        public let path: String

        /// Get a gitignore template
        ///
        /// The API also allows fetching the source of a single template.
        /// Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gitignore#get-a-gitignore-template)
        public var get: Request<OctoKit.GitignoreTemplate> {
            .get(path)
        }
    }
}

extension Paths {
    public static var installation: Installation {
        Installation(path: "/installation")
    }

    public struct Installation {
        /// Path: `/installation`
        public let path: String
    }
}

extension Paths.Installation {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/installation/repositories`
        public let path: String

        /// List repositories accessible to the app installation
        ///
        /// List repositories that an app installation can access.
        /// 
        /// You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var repositories: [OctoKit.Repository]
            /// Example: "selected"
            public var repositorySelection: String?

            public init(totalCount: Int, repositories: [OctoKit.Repository], repositorySelection: String? = nil) {
                self.totalCount = totalCount
                self.repositories = repositories
                self.repositorySelection = repositorySelection
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case repositories
                case repositorySelection = "repository_selection"
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Installation {
    public var token: Token {
        Token(path: path + "/token")
    }

    public struct Token {
        /// Path: `/installation/token`
        public let path: String

        /// Revoke an installation access token
        ///
        /// Revokes the installation token you're using to authenticate as an installation and access this endpoint.
        /// 
        /// Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
        /// 
        /// You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#revoke-an-installation-access-token)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var issues: Issues {
        Issues(path: "/issues")
    }

    public struct Issues {
        /// Path: `/issues`
        public let path: String

        /// List issues assigned to the authenticated user
        ///
        /// List issues assigned to the authenticated user across all visible repositories including owned repositories, member
        /// repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
        /// necessarily assigned to you.
        /// 
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-issues-assigned-to-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Issue]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var filter: Filter?
            public var state: State?
            public var labels: String?
            public var sort: Sort?
            public var direction: Direction?
            public var since: Date?
            public var isCollab: Bool?
            public var isOrgs: Bool?
            public var isOwned: Bool?
            public var isPulls: Bool?
            public var perPage: Int?
            public var page: Int?

            public enum Filter: String, Codable, CaseIterable {
                case assigned
                case created
                case mentioned
                case subscribed
                case repos
                case all
            }

            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case all
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case comments
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(filter: Filter? = nil, state: State? = nil, labels: String? = nil, sort: Sort? = nil, direction: Direction? = nil, since: Date? = nil, isCollab: Bool? = nil, isOrgs: Bool? = nil, isOwned: Bool? = nil, isPulls: Bool? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.filter = filter
                self.state = state
                self.labels = labels
                self.sort = sort
                self.direction = direction
                self.since = since
                self.isCollab = isCollab
                self.isOrgs = isOrgs
                self.isOwned = isOwned
                self.isPulls = isPulls
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(state, forKey: "state")
                encoder.encode(labels, forKey: "labels")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(since, forKey: "since")
                encoder.encode(isCollab, forKey: "collab")
                encoder.encode(isOrgs, forKey: "orgs")
                encoder.encode(isOwned, forKey: "owned")
                encoder.encode(isPulls, forKey: "pulls")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var licenses: Licenses {
        Licenses(path: "/licenses")
    }

    public struct Licenses {
        /// Path: `/licenses`
        public let path: String

        /// Get all commonly used licenses
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/licenses#get-all-commonly-used-licenses)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.LicenseSimple]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isFeatured: Bool?
            public var perPage: Int?
            public var page: Int?

            public init(isFeatured: Bool? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.isFeatured = isFeatured
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isFeatured, forKey: "featured")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Licenses {
    public func license(_ license: String) -> WithLicense {
        WithLicense(path: "\(path)/\(license)")
    }

    public struct WithLicense {
        /// Path: `/licenses/{license}`
        public let path: String

        /// Get a license
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/licenses#get-a-license)
        public var get: Request<OctoKit.License> {
            .get(path)
        }
    }
}

extension Paths {
    public static var markdown: Markdown {
        Markdown(path: "/markdown")
    }

    public struct Markdown {
        /// Path: `/markdown`
        public let path: String

        /// Render a Markdown document
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/markdown#render-a-markdown-document)
        public func post(_ body: PostRequest) -> Request<String> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let contentType = HTTPHeader<String>(field: "Content-Type")
            public static let contentLength = HTTPHeader<String>(field: "Content-Length")
            public static let commonMarkerVersion = HTTPHeader<String>(field: "X-CommonMarker-Version")
        }

        public struct PostRequest: Encodable {
            /// The Markdown text to render in HTML.
            public var text: String
            /// The rendering mode. Can be either `markdown` or `gfm`.
            ///
            /// Example: "markdown"
            public var mode: Mode?
            /// The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
            public var context: String?

            /// The rendering mode. Can be either `markdown` or `gfm`.
            ///
            /// Example: "markdown"
            public enum Mode: String, Codable, CaseIterable {
                case markdown
                case gfm
            }

            public init(text: String, mode: Mode? = nil, context: String? = nil) {
                self.text = text
                self.mode = mode
                self.context = context
            }
        }
    }
}

extension Paths.Markdown {
    public var raw: Raw {
        Raw(path: path + "/raw")
    }

    public struct Raw {
        /// Path: `/markdown/raw`
        public let path: String

        /// Render a Markdown document in raw mode
        ///
        /// You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/markdown#render-a-markdown-document-in-raw-mode)
        public func post(_ body: String? = nil) -> Request<String> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let commonMarkerVersion = HTTPHeader<String>(field: "X-CommonMarker-Version")
        }
    }
}

extension Paths {
    public static var marketplaceListing: MarketplaceListing {
        MarketplaceListing(path: "/marketplace_listing")
    }

    public struct MarketplaceListing {
        /// Path: `/marketplace_listing`
        public let path: String
    }
}

extension Paths.MarketplaceListing {
    public var accounts: Accounts {
        Accounts(path: path + "/accounts")
    }

    public struct Accounts {
        /// Path: `/marketplace_listing/accounts`
        public let path: String
    }
}

extension Paths.MarketplaceListing.Accounts {
    public func accountID(_ accountID: Int) -> WithAccountID {
        WithAccountID(path: "\(path)/\(accountID)")
    }

    public struct WithAccountID {
        /// Path: `/marketplace_listing/accounts/{account_id}`
        public let path: String

        /// Get a subscription plan for an account
        ///
        /// Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account)
        public var get: Request<OctoKit.MarketplacePurchase> {
            .get(path)
        }
    }
}

extension Paths.MarketplaceListing {
    public var plans: Plans {
        Plans(path: path + "/plans")
    }

    public struct Plans {
        /// Path: `/marketplace_listing/plans`
        public let path: String

        /// List plans
        ///
        /// Lists all plans that are part of your GitHub Marketplace listing.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-plans)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.MarketplaceListingPlan]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.MarketplaceListing.Plans {
    public func planID(_ planID: Int) -> WithPlanID {
        WithPlanID(path: "\(path)/\(planID)")
    }

    public struct WithPlanID {
        /// Path: `/marketplace_listing/plans/{plan_id}`
        public let path: String
    }
}

extension Paths.MarketplaceListing.Plans.WithPlanID {
    public var accounts: Accounts {
        Accounts(path: path + "/accounts")
    }

    public struct Accounts {
        /// Path: `/marketplace_listing/plans/{plan_id}/accounts`
        public let path: String

        /// List accounts for a plan
        ///
        /// Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.MarketplacePurchase]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var sort: Sort?
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(sort: Sort? = nil, direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.sort = sort
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.MarketplaceListing {
    public var stubbed: Stubbed {
        Stubbed(path: path + "/stubbed")
    }

    public struct Stubbed {
        /// Path: `/marketplace_listing/stubbed`
        public let path: String
    }
}

extension Paths.MarketplaceListing.Stubbed {
    public var accounts: Accounts {
        Accounts(path: path + "/accounts")
    }

    public struct Accounts {
        /// Path: `/marketplace_listing/stubbed/accounts`
        public let path: String
    }
}

extension Paths.MarketplaceListing.Stubbed.Accounts {
    public func accountID(_ accountID: Int) -> WithAccountID {
        WithAccountID(path: "\(path)/\(accountID)")
    }

    public struct WithAccountID {
        /// Path: `/marketplace_listing/stubbed/accounts/{account_id}`
        public let path: String

        /// Get a subscription plan for an account (stubbed)
        ///
        /// Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account-stubbed)
        public var get: Request<OctoKit.MarketplacePurchase> {
            .get(path)
        }
    }
}

extension Paths.MarketplaceListing.Stubbed {
    public var plans: Plans {
        Plans(path: path + "/plans")
    }

    public struct Plans {
        /// Path: `/marketplace_listing/stubbed/plans`
        public let path: String

        /// List plans (stubbed)
        ///
        /// Lists all plans that are part of your GitHub Marketplace listing.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-plans-stubbed)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.MarketplaceListingPlan]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.MarketplaceListing.Stubbed.Plans {
    public func planID(_ planID: Int) -> WithPlanID {
        WithPlanID(path: "\(path)/\(planID)")
    }

    public struct WithPlanID {
        /// Path: `/marketplace_listing/stubbed/plans/{plan_id}`
        public let path: String
    }
}

extension Paths.MarketplaceListing.Stubbed.Plans.WithPlanID {
    public var accounts: Accounts {
        Accounts(path: path + "/accounts")
    }

    public struct Accounts {
        /// Path: `/marketplace_listing/stubbed/plans/{plan_id}/accounts`
        public let path: String

        /// List accounts for a plan (stubbed)
        ///
        /// Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan-stubbed)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.MarketplacePurchase]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var sort: Sort?
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(sort: Sort? = nil, direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.sort = sort
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var meta: Meta {
        Meta(path: "/meta")
    }

    public struct Meta {
        /// Path: `/meta`
        public let path: String

        /// Get GitHub meta information
        ///
        /// Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
        /// 
        /// **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/meta#get-github-meta-information)
        public var get: Request<OctoKit.APIOverview> {
            .get(path)
        }
    }
}

extension Paths {
    public static var networks: Networks {
        Networks(path: "/networks")
    }

    public struct Networks {
        /// Path: `/networks`
        public let path: String
    }
}

extension Paths.Networks {
    public func owner(_ owner: String) -> WithOwner {
        WithOwner(path: "\(path)/\(owner)")
    }

    public struct WithOwner {
        /// Path: `/networks/{owner}`
        public let path: String
    }
}

extension Paths.Networks.WithOwner {
    public func repo(_ repo: String) -> WithRepo {
        WithRepo(path: "\(path)/\(repo)")
    }

    public struct WithRepo {
        /// Path: `/networks/{owner}/{repo}`
        public let path: String
    }
}

extension Paths.Networks.WithOwner.WithRepo {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/networks/{owner}/{repo}/events`
        public let path: String

        /// List public events for a network of repositories
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-public-events-for-a-network-of-repositories)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Event]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths {
    public static var notifications: Notifications {
        Notifications(path: "/notifications")
    }

    public struct Notifications {
        /// Path: `/notifications`
        public let path: String

        /// List notifications for the authenticated user
        ///
        /// List all notifications for the current user, sorted by most recently updated.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Thread]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var isAll: Bool?
            public var isParticipating: Bool?
            public var since: Date?
            public var before: Date?
            public var perPage: Int?
            public var page: Int?

            public init(isAll: Bool? = nil, isParticipating: Bool? = nil, since: Date? = nil, before: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.isAll = isAll
                self.isParticipating = isParticipating
                self.since = since
                self.before = before
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isAll, forKey: "all")
                encoder.encode(isParticipating, forKey: "participating")
                encoder.encode(since, forKey: "since")
                encoder.encode(before, forKey: "before")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Mark notifications as read
        ///
        /// Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#mark-notifications-as-read)
        public func put(_ body: PutRequest? = nil) -> Request<PutResponse> {
            .put(path, body: body)
        }

        public struct PutResponse: Decodable {
            public var message: String?

            public init(message: String? = nil) {
                self.message = message
            }
        }

        public struct PutRequest: Encodable {
            /// Describes the last point that notifications were checked.
            public var lastReadAt: Date?
            /// Whether the notification has been read.
            public var isRead: Bool?

            public init(lastReadAt: Date? = nil, isRead: Bool? = nil) {
                self.lastReadAt = lastReadAt
                self.isRead = isRead
            }

            private enum CodingKeys: String, CodingKey {
                case lastReadAt = "last_read_at"
                case isRead = "read"
            }
        }
    }
}

extension Paths.Notifications {
    public var threads: Threads {
        Threads(path: path + "/threads")
    }

    public struct Threads {
        /// Path: `/notifications/threads`
        public let path: String
    }
}

extension Paths.Notifications.Threads {
    public func threadID(_ threadID: Int) -> WithThreadID {
        WithThreadID(path: "\(path)/\(threadID)")
    }

    public struct WithThreadID {
        /// Path: `/notifications/threads/{thread_id}`
        public let path: String

        /// Get a thread
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#get-a-thread)
        public var get: Request<OctoKit.Thread> {
            .get(path)
        }

        /// Mark a thread as read
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#mark-a-thread-as-read)
        public var patch: Request<Void> {
            .patch(path)
        }
    }
}

extension Paths.Notifications.Threads.WithThreadID {
    public var subscription: Subscription {
        Subscription(path: path + "/subscription")
    }

    public struct Subscription {
        /// Path: `/notifications/threads/{thread_id}/subscription`
        public let path: String

        /// Get a thread subscription for the authenticated user
        ///
        /// This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
        /// 
        /// Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user)
        public var get: Request<OctoKit.ThreadSubscription> {
            .get(path)
        }

        /// Set a thread subscription
        ///
        /// If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
        /// 
        /// You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
        /// 
        /// Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#set-a-thread-subscription)
        public func put(isIgnored: Bool? = nil) -> Request<OctoKit.ThreadSubscription> {
            .put(path, body: ["ignored": isIgnored])
        }

        /// Delete a thread subscription
        ///
        /// Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var octocat: Octocat {
        Octocat(path: "/octocat")
    }

    public struct Octocat {
        /// Path: `/octocat`
        public let path: String

        /// Get Octocat
        ///
        /// Get the octocat as ASCII art
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/meta#get-octocat)
        public func get(s: String? = nil) -> Request<String> {
            .get(path, query: makeGetQuery(s))
        }

        private func makeGetQuery(_ s: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(s, forKey: "s")
            return encoder.items
        }
    }
}

extension Paths {
    public static var organizations: Organizations {
        Organizations(path: "/organizations")
    }

    public struct Organizations {
        /// Path: `/organizations`
        public let path: String

        /// List organizations
        ///
        /// Lists all organizations, in the order that they were created on GitHub.
        /// 
        /// **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organizations)
        public func get(since: Int? = nil, perPage: Int? = nil) -> Request<[OctoKit.OrganizationSimple]> {
            .get(path, query: makeGetQuery(since, perPage))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ since: Int?, _ perPage: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(since, forKey: "since")
            encoder.encode(perPage, forKey: "per_page")
            return encoder.items
        }
    }
}

extension Paths.Organizations {
    public func organizationID(_ organizationID: String) -> WithOrganizationID {
        WithOrganizationID(path: "\(path)/\(organizationID)")
    }

    public struct WithOrganizationID {
        /// Path: `/organizations/{organization_id}`
        public let path: String
    }
}

extension Paths.Organizations.WithOrganizationID {
    public var customRoles: CustomRoles {
        CustomRoles(path: path + "/custom_roles")
    }

    public struct CustomRoles {
        /// Path: `/organizations/{organization_id}/custom_roles`
        public let path: String

        /// List custom repository roles in an organization
        ///
        /// List the custom repository roles available in this organization. In order to see custom
        /// repository roles in an organization, the authenticated user must be an organization owner.
        /// 
        /// For more information on custom repository roles, see "[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-custom-repository-roles-in-an-organization)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            /// The number of custom roles in this organization
            public var totalCount: Int?
            public var customRoles: [OctoKit.OrganizationCustomRepositoryRole]?

            public init(totalCount: Int? = nil, customRoles: [OctoKit.OrganizationCustomRepositoryRole]? = nil) {
                self.totalCount = totalCount
                self.customRoles = customRoles
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case customRoles = "custom_roles"
            }
        }
    }
}

extension Paths {
    public static var orgs: Orgs {
        Orgs(path: "/orgs")
    }

    public struct Orgs {
        /// Path: `/orgs`
        public let path: String
    }
}

extension Paths.Orgs {
    public func org(_ org: String) -> WithOrg {
        WithOrg(path: "\(path)/\(org)")
    }

    public struct WithOrg {
        /// Path: `/orgs/{org}`
        public let path: String

        /// Get an organization
        ///
        /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
        /// 
        /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-an-organization)
        public var get: Request<OctoKit.OrganizationFull> {
            .get(path)
        }

        /// Update an organization
        ///
        /// **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
        /// 
        /// Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs/#update-an-organization)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.OrganizationFull> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Billing email address. This address is not publicized.
            public var billingEmail: String?
            /// The company name.
            public var company: String?
            /// The publicly visible email address.
            public var email: String?
            /// The Twitter username of the company.
            public var twitterUsername: String?
            /// The location.
            public var location: String?
            /// The shorthand name of the company.
            public var name: String?
            /// The description of the company.
            public var description: String?
            /// Toggles whether an organization can use organization projects.
            public var hasOrganizationProjects: Bool?
            /// Toggles whether repositories that belong to the organization can use repository projects.
            public var hasRepositoryProjects: Bool?
            /// Default permission level members have for organization repositories:  
            /// \* `read` - can pull, but not push to or administer this repository.  
            /// \* `write` - can pull and push, but not administer this repository.  
            /// \* `admin` - can pull, push, and administer this repository.  
            /// \* `none` - no permissions granted by default.
            public var defaultRepositoryPermission: DefaultRepositoryPermission?
            /// Toggles the ability of non-admin organization members to create repositories. Can be one of:  
            /// \* `true` - all organization members can create repositories.  
            /// \* `false` - only organization owners can create repositories.  
            /// Default: `true`  
            /// **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
            public var membersCanCreateRepositories: Bool
            /// Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:  
            /// \* `true` - all organization members can create internal repositories.  
            /// \* `false` - only organization owners can create internal repositories.  
            /// Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
            public var membersCanCreateInternalRepositories: Bool?
            /// Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:  
            /// \* `true` - all organization members can create private repositories.  
            /// \* `false` - only organization owners can create private repositories.  
            /// Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
            public var membersCanCreatePrivateRepositories: Bool?
            /// Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:  
            /// \* `true` - all organization members can create public repositories.  
            /// \* `false` - only organization owners can create public repositories.  
            /// Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
            public var membersCanCreatePublicRepositories: Bool?
            /// Specifies which types of repositories non-admin organization members can create. Can be one of:  
            /// \* `all` - all organization members can create public and private repositories.  
            /// \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  
            /// \* `none` - only admin members can create repositories.  
            /// **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
            public var membersAllowedRepositoryCreationType: MembersAllowedRepositoryCreationType?
            /// Toggles whether organization members can create GitHub Pages sites. Can be one of:  
            /// \* `true` - all organization members can create GitHub Pages sites.  
            /// \* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
            public var membersCanCreatePages: Bool
            /// Toggles whether organization members can create public GitHub Pages sites. Can be one of:  
            /// \* `true` - all organization members can create public GitHub Pages sites.  
            /// \* `false` - no organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
            public var membersCanCreatePublicPages: Bool
            /// Toggles whether organization members can create private GitHub Pages sites. Can be one of:  
            /// \* `true` - all organization members can create private GitHub Pages sites.  
            /// \* `false` - no organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
            public var membersCanCreatePrivatePages: Bool
            /// Toggles whether organization members can fork private organization repositories. Can be one of:  
            /// \* `true` - all organization members can fork private repositories within the organization.  
            /// \* `false` - no organization members can fork private repositories within the organization.
            public var membersCanForkPrivateRepositories: Bool
            /// Example: "http://github.blog"
            public var blog: String?

            /// Default permission level members have for organization repositories:  
            /// \* `read` - can pull, but not push to or administer this repository.  
            /// \* `write` - can pull and push, but not administer this repository.  
            /// \* `admin` - can pull, push, and administer this repository.  
            /// \* `none` - no permissions granted by default.
            public enum DefaultRepositoryPermission: String, Codable, CaseIterable {
                case read
                case write
                case admin
                case `none`
            }

            /// Specifies which types of repositories non-admin organization members can create. Can be one of:  
            /// \* `all` - all organization members can create public and private repositories.  
            /// \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  
            /// \* `none` - only admin members can create repositories.  
            /// **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
            public enum MembersAllowedRepositoryCreationType: String, Codable, CaseIterable {
                case all
                case `private`
                case `none`
            }

            public init(billingEmail: String? = nil, company: String? = nil, email: String? = nil, twitterUsername: String? = nil, location: String? = nil, name: String? = nil, description: String? = nil, hasOrganizationProjects: Bool? = nil, hasRepositoryProjects: Bool? = nil, defaultRepositoryPermission: DefaultRepositoryPermission? = nil, membersCanCreateRepositories: Bool? = nil, membersCanCreateInternalRepositories: Bool? = nil, membersCanCreatePrivateRepositories: Bool? = nil, membersCanCreatePublicRepositories: Bool? = nil, membersAllowedRepositoryCreationType: MembersAllowedRepositoryCreationType? = nil, membersCanCreatePages: Bool? = nil, membersCanCreatePublicPages: Bool? = nil, membersCanCreatePrivatePages: Bool? = nil, membersCanForkPrivateRepositories: Bool? = nil, blog: String? = nil) {
                self.billingEmail = billingEmail
                self.company = company
                self.email = email
                self.twitterUsername = twitterUsername
                self.location = location
                self.name = name
                self.description = description
                self.hasOrganizationProjects = hasOrganizationProjects
                self.hasRepositoryProjects = hasRepositoryProjects
                self.defaultRepositoryPermission = defaultRepositoryPermission
                self.membersCanCreateRepositories = membersCanCreateRepositories ?? true
                self.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories
                self.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories
                self.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories
                self.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType
                self.membersCanCreatePages = membersCanCreatePages ?? true
                self.membersCanCreatePublicPages = membersCanCreatePublicPages ?? true
                self.membersCanCreatePrivatePages = membersCanCreatePrivatePages ?? true
                self.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories ?? false
                self.blog = blog
            }

            private enum CodingKeys: String, CodingKey {
                case billingEmail = "billing_email"
                case company
                case email
                case twitterUsername = "twitter_username"
                case location
                case name
                case description
                case hasOrganizationProjects = "has_organization_projects"
                case hasRepositoryProjects = "has_repository_projects"
                case defaultRepositoryPermission = "default_repository_permission"
                case membersCanCreateRepositories = "members_can_create_repositories"
                case membersCanCreateInternalRepositories = "members_can_create_internal_repositories"
                case membersCanCreatePrivateRepositories = "members_can_create_private_repositories"
                case membersCanCreatePublicRepositories = "members_can_create_public_repositories"
                case membersAllowedRepositoryCreationType = "members_allowed_repository_creation_type"
                case membersCanCreatePages = "members_can_create_pages"
                case membersCanCreatePublicPages = "members_can_create_public_pages"
                case membersCanCreatePrivatePages = "members_can_create_private_pages"
                case membersCanForkPrivateRepositories = "members_can_fork_private_repositories"
                case blog
            }
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/orgs/{org}/actions`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Actions {
    public var permissions: Permissions {
        Permissions(path: path + "/permissions")
    }

    public struct Permissions {
        /// Path: `/orgs/{org}/actions/permissions`
        public let path: String

        /// Get GitHub Actions permissions for an organization
        ///
        /// Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization)
        public var get: Request<OctoKit.ActionsOrganizationPermissions> {
            .get(path)
        }

        /// Set GitHub Actions permissions for an organization
        ///
        /// Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
        /// 
        /// If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization)
        public func put(_ body: PutRequest) -> Request<Void> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
            public var enabledRepositories: OctoKit.EnabledRepositories
            /// The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
            public var allowedActions: OctoKit.AllowedActions?

            public init(enabledRepositories: OctoKit.EnabledRepositories, allowedActions: OctoKit.AllowedActions? = nil) {
                self.enabledRepositories = enabledRepositories
                self.allowedActions = allowedActions
            }

            private enum CodingKeys: String, CodingKey {
                case enabledRepositories = "enabled_repositories"
                case allowedActions = "allowed_actions"
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Permissions {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/orgs/{org}/actions/permissions/repositories`
        public let path: String

        /// List selected repositories enabled for GitHub Actions in an organization
        ///
        /// Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double
            public var repositories: [OctoKit.Repository]

            public init(totalCount: Double, repositories: [OctoKit.Repository]) {
                self.totalCount = totalCount
                self.repositories = repositories
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case repositories
            }
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Set selected repositories enabled for GitHub Actions in an organization
        ///
        /// Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization)
        public func put(selectedRepositoryIDs: [Int]) -> Request<Void> {
            .put(path, body: ["selected_repository_ids": selectedRepositoryIDs])
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Permissions.Repositories {
    public func repositoryID(_ repositoryID: Int) -> WithRepositoryID {
        WithRepositoryID(path: "\(path)/\(repositoryID)")
    }

    public struct WithRepositoryID {
        /// Path: `/orgs/{org}/actions/permissions/repositories/{repository_id}`
        public let path: String

        /// Enable a selected repository for GitHub Actions in an organization
        ///
        /// Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization)
        public var put: Request<Void> {
            .put(path)
        }

        /// Disable a selected repository for GitHub Actions in an organization
        ///
        /// Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Permissions {
    public var selectedActions: SelectedActions {
        SelectedActions(path: path + "/selected-actions")
    }

    public struct SelectedActions {
        /// Path: `/orgs/{org}/actions/permissions/selected-actions`
        public let path: String

        /// Get allowed actions for an organization
        ///
        /// Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization)
        public var get: Request<OctoKit.SelectedActions> {
            .get(path)
        }

        /// Set allowed actions for an organization
        ///
        /// Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
        /// 
        /// If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
        /// 
        /// To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization)
        public func put(_ body: OctoKit.SelectedActions? = nil) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions {
    public var runnerGroups: RunnerGroups {
        RunnerGroups(path: path + "/runner-groups")
    }

    public struct RunnerGroups {
        /// Path: `/orgs/{org}/actions/runner-groups`
        public let path: String

        /// List self-hosted runner groups for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double
            public var runnerGroups: [OctoKit.RunnerGroupsOrg]

            public init(totalCount: Double, runnerGroups: [OctoKit.RunnerGroupsOrg]) {
                self.totalCount = totalCount
                self.runnerGroups = runnerGroups
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case runnerGroups = "runner_groups"
            }
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a self-hosted runner group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Creates a new self-hosted runner group for an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization)
        public func post(_ body: PostRequest) -> Request<OctoKit.RunnerGroupsOrg> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// Name of the runner group.
            public var name: String
            /// Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
            public var visibility: Visibility?
            /// List of repository IDs that can access the runner group.
            public var selectedRepositoryIDs: [Int]?
            /// List of runner IDs to add to the runner group.
            public var runners: [Int]?
            /// Whether the runner group can be used by `public` repositories.
            public var allowsPublicRepositories: Bool

            /// Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
            public enum Visibility: String, Codable, CaseIterable {
                case selected
                case all
                case `private`
            }

            public init(name: String, visibility: Visibility? = nil, selectedRepositoryIDs: [Int]? = nil, runners: [Int]? = nil, allowsPublicRepositories: Bool? = nil) {
                self.name = name
                self.visibility = visibility
                self.selectedRepositoryIDs = selectedRepositoryIDs
                self.runners = runners
                self.allowsPublicRepositories = allowsPublicRepositories ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case visibility
                case selectedRepositoryIDs = "selected_repository_ids"
                case runners
                case allowsPublicRepositories = "allows_public_repositories"
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.RunnerGroups {
    public func runnerGroupID(_ runnerGroupID: Int) -> WithRunnerGroupID {
        WithRunnerGroupID(path: "\(path)/\(runnerGroupID)")
    }

    public struct WithRunnerGroupID {
        /// Path: `/orgs/{org}/actions/runner-groups/{runner_group_id}`
        public let path: String

        /// Get a self-hosted runner group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Gets a specific self-hosted runner group for an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization)
        public var get: Request<OctoKit.RunnerGroupsOrg> {
            .get(path)
        }

        /// Update a self-hosted runner group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Updates the `name` and `visibility` of a self-hosted runner group in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.RunnerGroupsOrg> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Name of the runner group.
            public var name: String
            /// Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.
            public var visibility: Visibility?
            /// Whether the runner group can be used by `public` repositories.
            public var allowsPublicRepositories: Bool

            /// Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.
            public enum Visibility: String, Codable, CaseIterable {
                case selected
                case all
                case `private`
            }

            public init(name: String, visibility: Visibility? = nil, allowsPublicRepositories: Bool? = nil) {
                self.name = name
                self.visibility = visibility
                self.allowsPublicRepositories = allowsPublicRepositories ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case visibility
                case allowsPublicRepositories = "allows_public_repositories"
            }
        }

        /// Delete a self-hosted runner group from an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Deletes a self-hosted runner group for an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.RunnerGroups.WithRunnerGroupID {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories`
        public let path: String

        /// List repository access to a self-hosted runner group in an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Lists the repositories with access to a self-hosted runner group configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization)
        public func get(page: Int? = nil, perPage: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(page, perPage))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double
            public var repositories: [OctoKit.MinimalRepository]

            public init(totalCount: Double, repositories: [OctoKit.MinimalRepository]) {
                self.totalCount = totalCount
                self.repositories = repositories
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case repositories
            }
        }

        private func makeGetQuery(_ page: Int?, _ perPage: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(page, forKey: "page")
            encoder.encode(perPage, forKey: "per_page")
            return encoder.items
        }

        /// Set repository access for a self-hosted runner group in an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-repository-access-to-a-self-hosted-runner-group-in-an-organization)
        public func put(selectedRepositoryIDs: [Int]) -> Request<Void> {
            .put(path, body: ["selected_repository_ids": selectedRepositoryIDs])
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.RunnerGroups.WithRunnerGroupID.Repositories {
    public func repositoryID(_ repositoryID: Int) -> WithRepositoryID {
        WithRepositoryID(path: "\(path)/\(repositoryID)")
    }

    public struct WithRepositoryID {
        /// Path: `/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}`
        public let path: String

        /// Add repository access to a self-hosted runner group in an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// 
        /// Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
        /// 
        /// You must authenticate using an access token with the `admin:org`
        /// scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization)
        public var put: Request<Void> {
            .put(path)
        }

        /// Remove repository access to a self-hosted runner group in an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// 
        /// Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.RunnerGroups.WithRunnerGroupID {
    public var runners: Runners {
        Runners(path: path + "/runners")
    }

    public struct Runners {
        /// Path: `/orgs/{org}/actions/runner-groups/{runner_group_id}/runners`
        public let path: String

        /// List self-hosted runners in a group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Lists self-hosted runners that are in a specific organization group.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double
            public var runners: [OctoKit.Runner]

            public init(totalCount: Double, runners: [OctoKit.Runner]) {
                self.totalCount = totalCount
                self.runners = runners
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case runners
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Set self-hosted runners in a group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Replaces the list of self-hosted runners that are part of an organization runner group.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization)
        public func put(runners: [Int]) -> Request<Void> {
            .put(path, body: ["runners": runners])
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.RunnerGroups.WithRunnerGroupID.Runners {
    public func runnerID(_ runnerID: Int) -> WithRunnerID {
        WithRunnerID(path: "\(path)/\(runnerID)")
    }

    public struct WithRunnerID {
        /// Path: `/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}`
        public let path: String

        /// Add a self-hosted runner to a group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// 
        /// Adds a self-hosted runner to a runner group configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org`
        /// scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization)
        public var put: Request<Void> {
            .put(path)
        }

        /// Remove a self-hosted runner from a group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// 
        /// Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions {
    public var runners: Runners {
        Runners(path: path + "/runners")
    }

    public struct Runners {
        /// Path: `/orgs/{org}/actions/runners`
        public let path: String

        /// List self-hosted runners for an organization
        ///
        /// Lists all self-hosted runners configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var runners: [OctoKit.Runner]

            public init(totalCount: Int, runners: [OctoKit.Runner]) {
                self.totalCount = totalCount
                self.runners = runners
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case runners
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Runners {
    public var downloads: Downloads {
        Downloads(path: path + "/downloads")
    }

    public struct Downloads {
        /// Path: `/orgs/{org}/actions/runners/downloads`
        public let path: String

        /// List runner applications for an organization
        ///
        /// Lists binaries for the runner application that you can download and run.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization)
        public var get: Request<[OctoKit.RunnerApplication]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Runners {
    public var registrationToken: RegistrationToken {
        RegistrationToken(path: path + "/registration-token")
    }

    public struct RegistrationToken {
        /// Path: `/orgs/{org}/actions/runners/registration-token`
        public let path: String

        /// Create a registration token for an organization
        ///
        /// Returns a token that you can pass to the `config` script. The token expires after one hour.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        /// 
        /// #### Example using registration token
        /// 
        /// Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
        /// 
        /// ```
        /// ./config.sh --url https://github.com/octo-org --token TOKEN
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization)
        public var post: Request<OctoKit.AuthenticationToken> {
            .post(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Runners {
    public var removeToken: RemoveToken {
        RemoveToken(path: path + "/remove-token")
    }

    public struct RemoveToken {
        /// Path: `/orgs/{org}/actions/runners/remove-token`
        public let path: String

        /// Create a remove token for an organization
        ///
        /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        /// 
        /// #### Example using remove token
        /// 
        /// To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
        /// endpoint.
        /// 
        /// ```
        /// ./config.sh remove --token TOKEN
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization)
        public var post: Request<OctoKit.AuthenticationToken> {
            .post(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Runners {
    public func runnerID(_ runnerID: Int) -> WithRunnerID {
        WithRunnerID(path: "\(path)/\(runnerID)")
    }

    public struct WithRunnerID {
        /// Path: `/orgs/{org}/actions/runners/{runner_id}`
        public let path: String

        /// Get a self-hosted runner for an organization
        ///
        /// Gets a specific self-hosted runner configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization)
        public var get: Request<OctoKit.Runner> {
            .get(path)
        }

        /// Delete a self-hosted runner from an organization
        ///
        /// Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Runners.WithRunnerID {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/orgs/{org}/actions/runners/{runner_id}/labels`
        public let path: String

        /// List labels for a self-hosted runner for an organization
        ///
        /// Lists all labels for a self-hosted runner configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-organization)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }

        /// Add custom labels to a self-hosted runner for an organization
        ///
        /// Add custom labels to a self-hosted runner configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-organization)
        public func post(labels: [String]) -> Request<PostResponse> {
            .post(path, body: ["labels": labels])
        }

        public struct PostResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }

        /// Set custom labels for a self-hosted runner for an organization
        ///
        /// Remove all previous custom labels and set the new custom labels for a specific
        /// self-hosted runner configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-organization)
        public func put(labels: [String]) -> Request<PutResponse> {
            .put(path, body: ["labels": labels])
        }

        public struct PutResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }

        /// Remove all custom labels from a self-hosted runner for an organization
        ///
        /// Remove all custom labels from a self-hosted runner configured in an
        /// organization. Returns the remaining read-only labels from the runner.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization)
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Runners.WithRunnerID.Labels {
    public func name(_ name: String) -> WithName {
        WithName(path: "\(path)/\(name)")
    }

    public struct WithName {
        /// Path: `/orgs/{org}/actions/runners/{runner_id}/labels/{name}`
        public let path: String

        /// Remove a custom label from a self-hosted runner for an organization
        ///
        /// Remove a custom label from a self-hosted runner configured
        /// in an organization. Returns the remaining labels from the runner.
        /// 
        /// This endpoint returns a `404 Not Found` status if the custom label is not
        /// present on the runner.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization)
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions {
    public var secrets: Secrets {
        Secrets(path: path + "/secrets")
    }

    public struct Secrets {
        /// Path: `/orgs/{org}/actions/secrets`
        public let path: String

        /// List organization secrets
        ///
        /// Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-organization-secrets)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var secrets: [OctoKit.OrganizationActionsSecret]

            public init(totalCount: Int, secrets: [OctoKit.OrganizationActionsSecret]) {
                self.totalCount = totalCount
                self.secrets = secrets
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case secrets
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Secrets {
    public var publicKey: PublicKey {
        PublicKey(path: path + "/public-key")
    }

    public struct PublicKey {
        /// Path: `/orgs/{org}/actions/secrets/public-key`
        public let path: String

        /// Get an organization public key
        ///
        /// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-an-organization-public-key)
        public var get: Request<OctoKit.ActionsPublicKey> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Secrets {
    public func secretName(_ secretName: String) -> WithSecretName {
        WithSecretName(path: "\(path)/\(secretName)")
    }

    public struct WithSecretName {
        /// Path: `/orgs/{org}/actions/secrets/{secret_name}`
        public let path: String

        /// Get an organization secret
        ///
        /// Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-an-organization-secret)
        public var get: Request<OctoKit.OrganizationActionsSecret> {
            .get(path)
        }

        /// Create or update an organization secret
        ///
        /// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
        /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        /// token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
        /// use this endpoint.
        /// 
        /// #### Example encrypting a secret using Node.js
        /// 
        /// Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
        /// 
        /// ```
        /// const sodium = require('tweetsodium');
        /// 
        /// const key = "base64-encoded-public-key";
        /// const value = "plain-text-secret";
        /// 
        /// // Convert the message and key to Uint8Array's (Buffer implements that interface)
        /// const messageBytes = Buffer.from(value);
        /// const keyBytes = Buffer.from(key, 'base64');
        /// 
        /// // Encrypt using LibSodium.
        /// const encryptedBytes = sodium.seal(messageBytes, keyBytes);
        /// 
        /// // Base64 the encrypted secret
        /// const encrypted = Buffer.from(encryptedBytes).toString('base64');
        /// 
        /// console.log(encrypted);
        /// ```
        /// 
        /// 
        /// #### Example encrypting a secret using Python
        /// 
        /// Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
        /// 
        /// ```
        /// from base64 import b64encode
        /// from nacl import encoding, public
        /// 
        /// def encrypt(public_key: str, secret_value: str) -> str:
        ///   """Encrypt a Unicode string using the public key."""
        ///   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
        ///   sealed_box = public.SealedBox(public_key)
        ///   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
        ///   return b64encode(encrypted).decode("utf-8")
        /// ```
        /// 
        /// #### Example encrypting a secret using C#
        /// 
        /// Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        /// 
        /// ```
        /// var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
        /// var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
        /// 
        /// var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        /// 
        /// Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        /// ```
        /// 
        /// #### Example encrypting a secret using Ruby
        /// 
        /// Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        /// 
        /// ```ruby
        /// require "rbnacl"
        /// require "base64"
        /// 
        /// key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
        /// public_key = RbNaCl::PublicKey.new(key)
        /// 
        /// box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        /// encrypted_secret = box.encrypt("my_secret")
        /// 
        /// # Print the base64 encoded secret
        /// puts Base64.strict_encode64(encrypted_secret)
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret)
        public func put(_ body: PutRequest) -> Request<Void> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
            public var encryptedValue: String?
            /// ID of the key you used to encrypt the secret.
            public var keyID: String?
            /// Configures the access that repositories have to the organization secret. Can be one of:  
            /// \- `all` - All repositories in an organization can access the secret.  
            /// \- `private` - Private repositories in an organization can access the secret.  
            /// \- `selected` - Only specific repositories can access the secret.
            public var visibility: Visibility
            /// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
            public var selectedRepositoryIDs: [String]?

            /// Configures the access that repositories have to the organization secret. Can be one of:  
            /// \- `all` - All repositories in an organization can access the secret.  
            /// \- `private` - Private repositories in an organization can access the secret.  
            /// \- `selected` - Only specific repositories can access the secret.
            public enum Visibility: String, Codable, CaseIterable {
                case all
                case `private`
                case selected
            }

            public init(encryptedValue: String? = nil, keyID: String? = nil, visibility: Visibility, selectedRepositoryIDs: [String]? = nil) {
                self.encryptedValue = encryptedValue
                self.keyID = keyID
                self.visibility = visibility
                self.selectedRepositoryIDs = selectedRepositoryIDs
            }

            private enum CodingKeys: String, CodingKey {
                case encryptedValue = "encrypted_value"
                case keyID = "key_id"
                case visibility
                case selectedRepositoryIDs = "selected_repository_ids"
            }
        }

        /// Delete an organization secret
        ///
        /// Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-an-organization-secret)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Secrets.WithSecretName {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/orgs/{org}/actions/secrets/{secret_name}/repositories`
        public let path: String

        /// List selected repositories for an organization secret
        ///
        /// Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret)
        public func get(page: Int? = nil, perPage: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(page, perPage))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var repositories: [OctoKit.MinimalRepository]

            public init(totalCount: Int, repositories: [OctoKit.MinimalRepository]) {
                self.totalCount = totalCount
                self.repositories = repositories
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case repositories
            }
        }

        private func makeGetQuery(_ page: Int?, _ perPage: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(page, forKey: "page")
            encoder.encode(perPage, forKey: "per_page")
            return encoder.items
        }

        /// Set selected repositories for an organization secret
        ///
        /// Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret)
        public func put(selectedRepositoryIDs: [Int]) -> Request<Void> {
            .put(path, body: ["selected_repository_ids": selectedRepositoryIDs])
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Secrets.WithSecretName.Repositories {
    public func repositoryID(_ repositoryID: Int) -> WithRepositoryID {
        WithRepositoryID(path: "\(path)/\(repositoryID)")
    }

    public struct WithRepositoryID {
        /// Path: `/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}`
        public let path: String

        /// Add selected repository to an organization secret
        ///
        /// Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret)
        public var put: Request<Void> {
            .put(path)
        }

        /// Remove selected repository from an organization secret
        ///
        /// Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var auditLog: AuditLog {
        AuditLog(path: path + "/audit-log")
    }

    public struct AuditLog {
        /// Path: `/orgs/{org}/audit-log`
        public let path: String

        /// Get the audit log for an organization
        ///
        /// Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
        /// 
        /// To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-audit-log)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.AuditLogEvent]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var phrase: String?
            public var include: Include?
            public var after: String?
            public var before: String?
            public var order: Order?
            public var perPage: Int?

            public enum Include: String, Codable, CaseIterable {
                case web
                case git
                case all
            }

            public enum Order: String, Codable, CaseIterable {
                case desc
                case asc
            }

            public init(phrase: String? = nil, include: Include? = nil, after: String? = nil, before: String? = nil, order: Order? = nil, perPage: Int? = nil) {
                self.phrase = phrase
                self.include = include
                self.after = after
                self.before = before
                self.order = order
                self.perPage = perPage
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(phrase, forKey: "phrase")
                encoder.encode(include, forKey: "include")
                encoder.encode(after, forKey: "after")
                encoder.encode(before, forKey: "before")
                encoder.encode(order, forKey: "order")
                encoder.encode(perPage, forKey: "per_page")
                return encoder.items
            }
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var blocks: Blocks {
        Blocks(path: path + "/blocks")
    }

    public struct Blocks {
        /// Path: `/orgs/{org}/blocks`
        public let path: String

        /// List users blocked by an organization
        ///
        /// List the users blocked by an organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-users-blocked-by-an-organization)
        public var get: Request<[OctoKit.SimpleUser]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Blocks {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/blocks/{username}`
        public let path: String

        /// Check if a user is blocked by an organization
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#check-if-a-user-is-blocked-by-an-organization)
        public var get: Request<Void> {
            .get(path)
        }

        /// Block a user from an organization
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#block-a-user-from-an-organization)
        public var put: Request<Void> {
            .put(path)
        }

        /// Unblock a user from an organization
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#unblock-a-user-from-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var credentialAuthorizations: CredentialAuthorizations {
        CredentialAuthorizations(path: path + "/credential-authorizations")
    }

    public struct CredentialAuthorizations {
        /// Path: `/orgs/{org}/credential-authorizations`
        public let path: String

        /// List SAML SSO authorizations for an organization
        ///
        /// Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
        /// 
        /// An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-saml-sso-authorizations-for-an-organization)
        public var get: Request<[OctoKit.CredentialAuthorization]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.CredentialAuthorizations {
    public func credentialID(_ credentialID: Int) -> WithCredentialID {
        WithCredentialID(path: "\(path)/\(credentialID)")
    }

    public struct WithCredentialID {
        /// Path: `/orgs/{org}/credential-authorizations/{credential_id}`
        public let path: String

        /// Remove a SAML SSO authorization for an organization
        ///
        /// Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
        /// 
        /// An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#remove-a-saml-sso-authorization-for-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/orgs/{org}/events`
        public let path: String

        /// List public organization events
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-public-organization-events)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Event]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var externalGroup: ExternalGroup {
        ExternalGroup(path: path + "/external-group")
    }

    public struct ExternalGroup {
        /// Path: `/orgs/{org}/external-group`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.ExternalGroup {
    public func groupID(_ groupID: Int) -> WithGroupID {
        WithGroupID(path: "\(path)/\(groupID)")
    }

    public struct WithGroupID {
        /// Path: `/orgs/{org}/external-group/{group_id}`
        public let path: String

        /// Get an external group
        ///
        /// Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.
        /// 
        /// You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#external-idp-group-info-for-an-organization)
        public var get: Request<OctoKit.ExternalGroup> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var externalGroups: ExternalGroups {
        ExternalGroups(path: path + "/external-groups")
    }

    public struct ExternalGroups {
        /// Path: `/orgs/{org}/external-groups`
        public let path: String

        /// List external groups in an organization
        ///
        /// Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
        /// 
        /// You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-external-idp-groups-for-an-organization)
        public func get(parameters: GetParameters? = nil) -> Request<OctoKit.ExternalGroups> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            public var displayName: String?

            public init(perPage: Int? = nil, page: Int? = nil, displayName: String? = nil) {
                self.perPage = perPage
                self.page = page
                self.displayName = displayName
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(displayName, forKey: "display_name")
                return encoder.items
            }
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var failedInvitations: FailedInvitations {
        FailedInvitations(path: path + "/failed_invitations")
    }

    public struct FailedInvitations {
        /// Path: `/orgs/{org}/failed_invitations`
        public let path: String

        /// List failed organization invitations
        ///
        /// The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.OrganizationInvitation]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var hooks: Hooks {
        Hooks(path: path + "/hooks")
    }

    public struct Hooks {
        /// Path: `/orgs/{org}/hooks`
        public let path: String

        /// List organization webhooks
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organization-webhooks)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.OrgHook]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create an organization webhook
        ///
        /// Here's how you can create a hook that posts payloads in JSON format:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#create-an-organization-webhook)
        public func post(_ body: PostRequest) -> Request<OctoKit.OrgHook> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// Must be passed as "web".
            public var name: String
            /// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
            public var config: Config
            /// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
            public var events: [String]?
            /// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
            public var isActive: Bool

            /// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
            public struct Config: Encodable {
                /// The URL to which the payloads will be delivered.
                ///
                /// Example: "https://example.com/webhook"
                public var url: URL
                /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
                ///
                /// Example: "json"
                public var contentType: String?
                /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
                ///
                /// Example: "********"
                public var secret: String?
                public var insecureSSL: OctoKit.WebhookConfigInsecureSSL?
                /// Example: "kdaigle"
                public var username: String?
                /// Example: "password"
                public var password: String?

                public init(url: URL, contentType: String? = nil, secret: String? = nil, insecureSSL: OctoKit.WebhookConfigInsecureSSL? = nil, username: String? = nil, password: String? = nil) {
                    self.url = url
                    self.contentType = contentType
                    self.secret = secret
                    self.insecureSSL = insecureSSL
                    self.username = username
                    self.password = password
                }

                private enum CodingKeys: String, CodingKey {
                    case url
                    case contentType = "content_type"
                    case secret
                    case insecureSSL = "insecure_ssl"
                    case username
                    case password
                }
            }

            public init(name: String, config: Config, events: [String]? = nil, isActive: Bool? = nil) {
                self.name = name
                self.config = config
                self.events = events
                self.isActive = isActive ?? true
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case config
                case events
                case isActive = "active"
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks {
    public func hookID(_ hookID: Int) -> WithHookID {
        WithHookID(path: "\(path)/\(hookID)")
    }

    public struct WithHookID {
        /// Path: `/orgs/{org}/hooks/{hook_id}`
        public let path: String

        /// Get an organization webhook
        ///
        /// Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-an-organization-webhook)
        public var get: Request<OctoKit.OrgHook> {
            .get(path)
        }

        /// Update an organization webhook
        ///
        /// Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#update-an-organization-webhook)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.OrgHook> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
            public var config: Config?
            /// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
            public var events: [String]?
            /// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
            public var isActive: Bool
            /// Example: "web"
            public var name: String?

            /// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
            public struct Config: Encodable {
                /// The URL to which the payloads will be delivered.
                ///
                /// Example: "https://example.com/webhook"
                public var url: URL
                /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
                ///
                /// Example: "json"
                public var contentType: String?
                /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
                ///
                /// Example: "********"
                public var secret: String?
                public var insecureSSL: OctoKit.WebhookConfigInsecureSSL?

                public init(url: URL, contentType: String? = nil, secret: String? = nil, insecureSSL: OctoKit.WebhookConfigInsecureSSL? = nil) {
                    self.url = url
                    self.contentType = contentType
                    self.secret = secret
                    self.insecureSSL = insecureSSL
                }

                private enum CodingKeys: String, CodingKey {
                    case url
                    case contentType = "content_type"
                    case secret
                    case insecureSSL = "insecure_ssl"
                }
            }

            public init(config: Config? = nil, events: [String]? = nil, isActive: Bool? = nil, name: String? = nil) {
                self.config = config
                self.events = events
                self.isActive = isActive ?? true
                self.name = name
            }

            private enum CodingKeys: String, CodingKey {
                case config
                case events
                case isActive = "active"
                case name
            }
        }

        /// Delete an organization webhook
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks.WithHookID {
    public var config: Config {
        Config(path: path + "/config")
    }

    public struct Config {
        /// Path: `/orgs/{org}/hooks/{hook_id}/config`
        public let path: String

        /// Get a webhook configuration for an organization
        ///
        /// Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
        /// 
        /// Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)
        public var get: Request<OctoKit.WebhookConfig> {
            .get(path)
        }

        /// Update a webhook configuration for an organization
        ///
        /// Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
        /// 
        /// Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.WebhookConfig> {
            .patch(path, body: body)
        }

        /// Example:
        ///
        /// {
        ///   "content_type" : "json",
        ///   "insecure_ssl" : "0",
        ///   "secret" : "********",
        ///   "url" : "https:\/\/example.com\/webhook"
        /// }
        public struct PatchRequest: Encodable {
            /// The URL to which the payloads will be delivered.
            ///
            /// Example: "https://example.com/webhook"
            public var url: URL?
            /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
            ///
            /// Example: "json"
            public var contentType: String?
            /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
            ///
            /// Example: "********"
            public var secret: String?
            public var insecureSSL: OctoKit.WebhookConfigInsecureSSL?

            public init(url: URL? = nil, contentType: String? = nil, secret: String? = nil, insecureSSL: OctoKit.WebhookConfigInsecureSSL? = nil) {
                self.url = url
                self.contentType = contentType
                self.secret = secret
                self.insecureSSL = insecureSSL
            }

            private enum CodingKeys: String, CodingKey {
                case url
                case contentType = "content_type"
                case secret
                case insecureSSL = "insecure_ssl"
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks.WithHookID {
    public var deliveries: Deliveries {
        Deliveries(path: path + "/deliveries")
    }

    public struct Deliveries {
        /// Path: `/orgs/{org}/hooks/{hook_id}/deliveries`
        public let path: String

        /// List deliveries for an organization webhook
        ///
        /// Returns a list of webhook deliveries for a webhook configured in an organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-deliveries-for-an-organization-webhook)
        public func get(perPage: Int? = nil, cursor: String? = nil) -> Request<[OctoKit.HookDeliveryItem]> {
            .get(path, query: makeGetQuery(perPage, cursor))
        }

        private func makeGetQuery(_ perPage: Int?, _ cursor: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(cursor, forKey: "cursor")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks.WithHookID.Deliveries {
    public func deliveryID(_ deliveryID: Int) -> WithDeliveryID {
        WithDeliveryID(path: "\(path)/\(deliveryID)")
    }

    public struct WithDeliveryID {
        /// Path: `/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}`
        public let path: String

        /// Get a webhook delivery for an organization webhook
        ///
        /// Returns a delivery for a webhook configured in an organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-a-webhook-delivery-for-an-organization-webhook)
        public var get: Request<OctoKit.HookDelivery> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks.WithHookID.Deliveries.WithDeliveryID {
    public var attempts: Attempts {
        Attempts(path: path + "/attempts")
    }

    public struct Attempts {
        /// Path: `/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts`
        public let path: String

        /// Redeliver a delivery for an organization webhook
        ///
        /// Redeliver a delivery for a webhook configured in an organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#redeliver-a-delivery-for-an-organization-webhook)
        public var post: Request<[String: AnyJSON]> {
            .post(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks.WithHookID {
    public var pings: Pings {
        Pings(path: path + "/pings")
    }

    public struct Pings {
        /// Path: `/orgs/{org}/hooks/{hook_id}/pings`
        public let path: String

        /// Ping an organization webhook
        ///
        /// This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#ping-an-organization-webhook)
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var installation: Installation {
        Installation(path: path + "/installation")
    }

    public struct Installation {
        /// Path: `/orgs/{org}/installation`
        public let path: String

        /// Get an organization installation for the authenticated app
        ///
        /// Enables an authenticated GitHub App to find the organization's installation information.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app)
        public var get: Request<OctoKit.Installation> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var installations: Installations {
        Installations(path: path + "/installations")
    }

    public struct Installations {
        /// Path: `/orgs/{org}/installations`
        public let path: String

        /// List app installations for an organization
        ///
        /// Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-app-installations-for-an-organization)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var installations: [OctoKit.Installation]

            public init(totalCount: Int, installations: [OctoKit.Installation]) {
                self.totalCount = totalCount
                self.installations = installations
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case installations
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var interactionLimits: InteractionLimits {
        InteractionLimits(path: path + "/interaction-limits")
    }

    public struct InteractionLimits {
        /// Path: `/orgs/{org}/interaction-limits`
        public let path: String

        /// Get interaction restrictions for an organization
        ///
        /// Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            /// Interaction Limits
            ///
            /// Interaction limit settings.
            public var interactionLimitResponse: OctoKit.InteractionLimitResponse?

            public init(interactionLimitResponse: OctoKit.InteractionLimitResponse? = nil) {
                self.interactionLimitResponse = interactionLimitResponse
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.interactionLimitResponse = try? container.decode(OctoKit.InteractionLimitResponse.self)
            }
        }

        /// Set interaction restrictions for an organization
        ///
        /// Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization)
        public func put(_ body: OctoKit.InteractionLimit) -> Request<OctoKit.InteractionLimitResponse> {
            .put(path, body: body)
        }

        /// Remove interaction restrictions for an organization
        ///
        /// Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var invitations: Invitations {
        Invitations(path: path + "/invitations")
    }

    public struct Invitations {
        /// Path: `/orgs/{org}/invitations`
        public let path: String

        /// List pending organization invitations
        ///
        /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.OrganizationInvitation]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create an organization invitation
        ///
        /// Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#create-an-organization-invitation)
        public func post(_ body: PostRequest? = nil) -> Request<OctoKit.OrganizationInvitation> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
            public var inviteeID: Int?
            /// **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
            public var email: String?
            /// Specify role for new member. Can be one of:  
            /// \* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
            /// \* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
            /// \* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
            public var role: Role?
            /// Specify IDs for the teams you want to invite new members to.
            public var teamIDs: [Int]?

            /// Specify role for new member. Can be one of:  
            /// \* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
            /// \* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
            /// \* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
            public enum Role: String, Codable, CaseIterable {
                case admin
                case directMember = "direct_member"
                case billingManager = "billing_manager"
            }

            public init(inviteeID: Int? = nil, email: String? = nil, role: Role? = nil, teamIDs: [Int]? = nil) {
                self.inviteeID = inviteeID
                self.email = email
                self.role = role
                self.teamIDs = teamIDs
            }

            private enum CodingKeys: String, CodingKey {
                case inviteeID = "invitee_id"
                case email
                case role
                case teamIDs = "team_ids"
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Invitations {
    public func invitationID(_ invitationID: Int) -> WithInvitationID {
        WithInvitationID(path: "\(path)/\(invitationID)")
    }

    public struct WithInvitationID {
        /// Path: `/orgs/{org}/invitations/{invitation_id}`
        public let path: String

        /// Cancel an organization invitation
        ///
        /// Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#cancel-an-organization-invitation)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Invitations.WithInvitationID {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/orgs/{org}/invitations/{invitation_id}/teams`
        public let path: String

        /// List organization invitation teams
        ///
        /// List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Team]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var issues: Issues {
        Issues(path: path + "/issues")
    }

    public struct Issues {
        /// Path: `/orgs/{org}/issues`
        public let path: String

        /// List organization issues assigned to the authenticated user
        ///
        /// List issues in an organization assigned to the authenticated user.
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Issue]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var filter: Filter?
            public var state: State?
            public var labels: String?
            public var sort: Sort?
            public var direction: Direction?
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public enum Filter: String, Codable, CaseIterable {
                case assigned
                case created
                case mentioned
                case subscribed
                case repos
                case all
            }

            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case all
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case comments
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(filter: Filter? = nil, state: State? = nil, labels: String? = nil, sort: Sort? = nil, direction: Direction? = nil, since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.filter = filter
                self.state = state
                self.labels = labels
                self.sort = sort
                self.direction = direction
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(state, forKey: "state")
                encoder.encode(labels, forKey: "labels")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/orgs/{org}/members`
        public let path: String

        /// List organization members
        ///
        /// List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organization-members)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var filter: Filter?
            public var role: Role?
            public var perPage: Int?
            public var page: Int?

            public enum Filter: String, Codable, CaseIterable {
                case _2faDisabled = "2fa_disabled"
                case all
            }

            public enum Role: String, Codable, CaseIterable {
                case all
                case admin
                case member
            }

            public init(filter: Filter? = nil, role: Role? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.filter = filter
                self.role = role
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(role, forKey: "role")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Members {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/members/{username}`
        public let path: String

        /// Check organization membership for a user
        ///
        /// Check if a user is, publicly or privately, a member of the organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user)
        public var get: Request<Void> {
            .get(path)
        }

        /// Remove an organization member
        ///
        /// Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#remove-an-organization-member)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var memberships: Memberships {
        Memberships(path: path + "/memberships")
    }

    public struct Memberships {
        /// Path: `/orgs/{org}/memberships`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Memberships {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/memberships/{username}`
        public let path: String

        /// Get organization membership for a user
        ///
        /// In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user)
        public var get: Request<OctoKit.OrgMembership> {
            .get(path)
        }

        /// Set organization membership for a user
        ///
        /// Only authenticated organization owners can add a member to the organization or update the member's role.
        /// 
        /// *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
        ///     
        /// *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
        /// 
        /// **Rate limits**
        /// 
        /// To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#set-organization-membership-for-a-user)
        public func put(role: PutRequest.Role? = nil) -> Request<OctoKit.OrgMembership> {
            .put(path, body: PutRequest(role: role))
        }

        public struct PutRequest: Encodable {
            /// The role to give the user in the organization. Can be one of:  
            /// \* `admin` - The user will become an owner of the organization.  
            /// \* `member` - The user will become a non-owner member of the organization.
            public var role: Role?

            /// The role to give the user in the organization. Can be one of:  
            /// \* `admin` - The user will become an owner of the organization.  
            /// \* `member` - The user will become a non-owner member of the organization.
            public enum Role: String, Codable, CaseIterable {
                case admin
                case member
            }

            public init(role: Role? = nil) {
                self.role = role
            }
        }

        /// Remove organization membership for a user
        ///
        /// In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
        /// 
        /// If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#remove-organization-membership-for-a-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var migrations: Migrations {
        Migrations(path: path + "/migrations")
    }

    public struct Migrations {
        /// Path: `/orgs/{org}/migrations`
        public let path: String

        /// List organization migrations
        ///
        /// Lists the most recent migrations.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#list-organization-migrations)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Migration]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            public var exclude: [Exclude]?

            /// Allowed values that can be passed to the exclude param.
            ///
            /// Example: "repositories"
            public enum Exclude: String, Codable, CaseIterable {
                case repositories
            }

            public init(perPage: Int? = nil, page: Int? = nil, exclude: [Exclude]? = nil) {
                self.perPage = perPage
                self.page = page
                self.exclude = exclude
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(exclude, forKey: "exclude")
                return encoder.items
            }
        }

        /// Start an organization migration
        ///
        /// Initiates the generation of a migration archive.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#start-an-organization-migration)
        public func post(_ body: PostRequest) -> Request<OctoKit.Migration> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// A list of arrays indicating which repositories should be migrated.
            public var repositories: [String]
            /// Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
            ///
            /// Example: true
            public var lockRepositories: Bool
            /// Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
            ///
            /// Example: true
            public var excludeAttachments: Bool
            /// Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
            ///
            /// Example: true
            public var excludeReleases: Bool
            /// Indicates whether projects owned by the organization or users should be excluded. from the migration.
            ///
            /// Example: true
            public var excludeOwnerProjects: Bool
            public var exclude: [ExcludeItem]?

            public enum ExcludeItem: String, Codable, CaseIterable {
                case repositories
            }

            public init(repositories: [String], lockRepositories: Bool? = nil, excludeAttachments: Bool? = nil, excludeReleases: Bool? = nil, excludeOwnerProjects: Bool? = nil, exclude: [ExcludeItem]? = nil) {
                self.repositories = repositories
                self.lockRepositories = lockRepositories ?? false
                self.excludeAttachments = excludeAttachments ?? false
                self.excludeReleases = excludeReleases ?? false
                self.excludeOwnerProjects = excludeOwnerProjects ?? false
                self.exclude = exclude
            }

            private enum CodingKeys: String, CodingKey {
                case repositories
                case lockRepositories = "lock_repositories"
                case excludeAttachments = "exclude_attachments"
                case excludeReleases = "exclude_releases"
                case excludeOwnerProjects = "exclude_owner_projects"
                case exclude
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Migrations {
    public func migrationID(_ migrationID: Int) -> WithMigrationID {
        WithMigrationID(path: "\(path)/\(migrationID)")
    }

    public struct WithMigrationID {
        /// Path: `/orgs/{org}/migrations/{migration_id}`
        public let path: String

        /// Get an organization migration status
        ///
        /// Fetches the status of a migration.
        /// 
        /// The `state` of a migration can be one of the following values:
        /// 
        /// *   `pending`, which means the migration hasn't started yet.
        /// *   `exporting`, which means the migration is in progress.
        /// *   `exported`, which means the migration finished successfully.
        /// *   `failed`, which means the migration failed.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#get-an-organization-migration-status)
        public func get(exclude: [Exclude]? = nil) -> Request<OctoKit.Migration> {
            .get(path, query: makeGetQuery(exclude))
        }

        private func makeGetQuery(_ exclude: [Exclude]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(exclude, forKey: "exclude")
            return encoder.items
        }

        /// Allowed values that can be passed to the exclude param.
        ///
        /// Example: "repositories"
        public enum Exclude: String, Codable, CaseIterable {
            case repositories
        }
    }
}

extension Paths.Orgs.WithOrg.Migrations.WithMigrationID {
    public var archive: Archive {
        Archive(path: path + "/archive")
    }

    public struct Archive {
        /// Path: `/orgs/{org}/migrations/{migration_id}/archive`
        public let path: String

        /// Download an organization migration archive
        ///
        /// Fetches the URL to a migration archive.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#download-an-organization-migration-archive)
        public var get: Request<Void> {
            .get(path)
        }

        /// Delete an organization migration archive
        ///
        /// Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#delete-an-organization-migration-archive)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Migrations.WithMigrationID {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/orgs/{org}/migrations/{migration_id}/repos`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Migrations.WithMigrationID.Repos {
    public func repoName(_ repoName: String) -> WithRepoName {
        WithRepoName(path: "\(path)/\(repoName)")
    }

    public struct WithRepoName {
        /// Path: `/orgs/{org}/migrations/{migration_id}/repos/{repo_name}`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Migrations.WithMigrationID.Repos.WithRepoName {
    public var lock: Lock {
        Lock(path: path + "/lock")
    }

    public struct Lock {
        /// Path: `/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock`
        public let path: String

        /// Unlock an organization repository
        ///
        /// Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#unlock-an-organization-repository)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Migrations.WithMigrationID {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/orgs/{org}/migrations/{migration_id}/repositories`
        public let path: String

        /// List repositories in an organization migration
        ///
        /// List all the repositories for this organization migration.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#list-repositories-in-an-organization-migration)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.MinimalRepository]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var outsideCollaborators: OutsideCollaborators {
        OutsideCollaborators(path: path + "/outside_collaborators")
    }

    public struct OutsideCollaborators {
        /// Path: `/orgs/{org}/outside_collaborators`
        public let path: String

        /// List outside collaborators for an organization
        ///
        /// List all users who are outside collaborators of an organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-outside-collaborators-for-an-organization)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var filter: Filter?
            public var perPage: Int?
            public var page: Int?

            public enum Filter: String, Codable, CaseIterable {
                case _2faDisabled = "2fa_disabled"
                case all
            }

            public init(filter: Filter? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.filter = filter
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Orgs.WithOrg.OutsideCollaborators {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/outside_collaborators/{username}`
        public let path: String

        /// Convert an organization member to outside collaborator
        ///
        /// When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator)
        public var put: Request<Void> {
            .put(path)
        }

        /// Remove outside collaborator from an organization
        ///
        /// Removing a user from this list will remove them from all the organization's repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#remove-outside-collaborator-from-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/orgs/{org}/packages`
        public let path: String

        /// List packages for an organization
        ///
        /// Lists all packages in an organization readable by the user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#list-packages-for-an-organization)
        public func get(packageType: PackageType, visibility: Visibility? = nil) -> Request<[OctoKit.Package]> {
            .get(path, query: makeGetQuery(packageType, visibility))
        }

        private func makeGetQuery(_ packageType: PackageType, _ visibility: Visibility?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(packageType, forKey: "package_type")
            encoder.encode(visibility, forKey: "visibility")
            return encoder.items
        }

        public enum PackageType: String, Codable, CaseIterable {
            case npm
            case maven
            case rubygems
            case docker
            case nuget
            case container
        }

        public enum Visibility: String, Codable, CaseIterable {
            case `public`
            case `private`
            case `internal`
        }
    }
}

extension Paths.Orgs.WithOrg.Packages {
    public func packageType(_ packageType: String) -> WithPackageType {
        WithPackageType(path: "\(path)/\(packageType)")
    }

    public struct WithPackageType {
        /// Path: `/orgs/{org}/packages/{package_type}`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Packages.WithPackageType {
    public func packageName(_ packageName: String) -> WithPackageName {
        WithPackageName(path: "\(path)/\(packageName)")
    }

    public struct WithPackageName {
        /// Path: `/orgs/{org}/packages/{package_type}/{package_name}`
        public let path: String

        /// Get a package for an organization
        ///
        /// Gets a specific package in an organization.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-for-an-organization)
        public var get: Request<OctoKit.Package> {
            .get(path)
        }

        /// Delete a package for an organization
        ///
        /// Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-for-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Packages.WithPackageType.WithPackageName {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/orgs/{org}/packages/{package_type}/{package_name}/restore`
        public let path: String

        /// Restore a package for an organization
        ///
        /// Restores an entire package in an organization.
        /// 
        /// You can restore a deleted package under the following conditions:
        ///   - The package was deleted within the last 30 days.
        ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
        /// 
        /// To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#restore-a-package-for-an-organization)
        public func post(token: String? = nil) -> Request<Void> {
            .post(path, query: makePostQuery(token))
        }

        private func makePostQuery(_ token: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(token, forKey: "token")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg.Packages.WithPackageType.WithPackageName {
    public var versions: Versions {
        Versions(path: path + "/versions")
    }

    public struct Versions {
        /// Path: `/orgs/{org}/packages/{package_type}/{package_name}/versions`
        public let path: String

        /// Get all package versions for a package owned by an organization
        ///
        /// Returns all package versions for a package owned by an organization.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-an-organization)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.PackageVersion]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var page: Int?
            public var perPage: Int?
            public var state: State?

            public enum State: String, Codable, CaseIterable {
                case active
                case deleted
            }

            public init(page: Int? = nil, perPage: Int? = nil, state: State? = nil) {
                self.page = page
                self.perPage = perPage
                self.state = state
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(page, forKey: "page")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(state, forKey: "state")
                return encoder.items
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Packages.WithPackageType.WithPackageName.Versions {
    public func packageVersionID(_ packageVersionID: Int) -> WithPackageVersionID {
        WithPackageVersionID(path: "\(path)/\(packageVersionID)")
    }

    public struct WithPackageVersionID {
        /// Path: `/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}`
        public let path: String

        /// Get a package version for an organization
        ///
        /// Gets a specific package version in an organization.
        /// 
        /// You must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-version-for-an-organization)
        public var get: Request<OctoKit.PackageVersion> {
            .get(path)
        }

        /// Delete package version for an organization
        ///
        /// Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-version-for-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Packages.WithPackageType.WithPackageName.Versions.WithPackageVersionID {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`
        public let path: String

        /// Restore package version for an organization
        ///
        /// Restores a specific package version in an organization.
        /// 
        /// You can restore a deleted package under the following conditions:
        ///   - The package was deleted within the last 30 days.
        ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
        /// 
        /// To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#restore-a-package-version-for-an-organization)
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/orgs/{org}/projects`
        public let path: String

        /// List organization projects
        ///
        /// Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-organization-projects)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Project]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var state: State?
            public var perPage: Int?
            public var page: Int?

            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case all
            }

            public init(state: State? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.state = state
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(state, forKey: "state")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create an organization project
        ///
        /// Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#create-an-organization-project)
        public func post(_ body: PostRequest) -> Request<OctoKit.Project> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The name of the project.
            public var name: String
            /// The description of the project.
            public var body: String?

            public init(name: String, body: String? = nil) {
                self.name = name
                self.body = body
            }
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var publicMembers: PublicMembers {
        PublicMembers(path: path + "/public_members")
    }

    public struct PublicMembers {
        /// Path: `/orgs/{org}/public_members`
        public let path: String

        /// List public organization members
        ///
        /// Members of an organization can choose to have their membership publicized or not.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-public-organization-members)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg.PublicMembers {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/public_members/{username}`
        public let path: String

        /// Check public organization membership for a user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#check-public-organization-membership-for-a-user)
        public var get: Request<Void> {
            .get(path)
        }

        /// Set public organization membership for the authenticated user
        ///
        /// The user can publicize their own membership. (A user cannot publicize the membership for another user.)
        /// 
        /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user)
        public var put: Request<Void> {
            .put(path)
        }

        /// Remove public organization membership for the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/orgs/{org}/repos`
        public let path: String

        /// List organization repositories
        ///
        /// Lists repositories for the specified organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-organization-repositories)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.MinimalRepository]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var type: `Type`?
            public var sort: Sort?
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum `Type`: String, Codable, CaseIterable {
                case all
                case `public`
                case `private`
                case forks
                case sources
                case member
                case `internal`
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case pushed
                case fullName = "full_name"
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(type: `Type`? = nil, sort: Sort? = nil, direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.type = type
                self.sort = sort
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(type, forKey: "type")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create an organization repository
        ///
        /// Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
        /// 
        /// **OAuth scope requirements**
        /// 
        /// When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
        /// 
        /// *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
        /// *   `repo` scope to create a private repository
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-an-organization-repository)
        public func post(_ body: PostRequest) -> Request<OctoKit.Repository> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The name of the repository.
            public var name: String
            /// A short description of the repository.
            public var description: String?
            /// A URL with more information about the repository.
            public var homepage: String?
            /// Whether the repository is private.
            public var isPrivate: Bool
            /// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
            public var visibility: Visibility?
            /// Either `true` to enable issues for this repository or `false` to disable them.
            public var hasIssues: Bool
            /// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
            public var hasProjects: Bool
            /// Either `true` to enable the wiki for this repository or `false` to disable it.
            public var hasWiki: Bool
            /// Either `true` to make this repo available as a template repository or `false` to prevent it.
            public var isTemplate: Bool
            /// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
            public var teamID: Int?
            /// Pass `true` to create an initial commit with empty README.
            public var isAutoInit: Bool
            /// Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
            public var gitignoreTemplate: String?
            /// Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
            public var licenseTemplate: String?
            /// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
            public var allowSquashMerge: Bool
            /// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
            public var allowMergeCommit: Bool
            /// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
            public var allowRebaseMerge: Bool
            /// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
            public var allowAutoMerge: Bool
            /// Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
            public var deleteBranchOnMerge: Bool

            /// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
            public enum Visibility: String, Codable, CaseIterable {
                case `public`
                case `private`
                case `internal`
            }

            public init(name: String, description: String? = nil, homepage: String? = nil, isPrivate: Bool? = nil, visibility: Visibility? = nil, hasIssues: Bool? = nil, hasProjects: Bool? = nil, hasWiki: Bool? = nil, isTemplate: Bool? = nil, teamID: Int? = nil, isAutoInit: Bool? = nil, gitignoreTemplate: String? = nil, licenseTemplate: String? = nil, allowSquashMerge: Bool? = nil, allowMergeCommit: Bool? = nil, allowRebaseMerge: Bool? = nil, allowAutoMerge: Bool? = nil, deleteBranchOnMerge: Bool? = nil) {
                self.name = name
                self.description = description
                self.homepage = homepage
                self.isPrivate = isPrivate ?? false
                self.visibility = visibility
                self.hasIssues = hasIssues ?? true
                self.hasProjects = hasProjects ?? true
                self.hasWiki = hasWiki ?? true
                self.isTemplate = isTemplate ?? false
                self.teamID = teamID
                self.isAutoInit = isAutoInit ?? false
                self.gitignoreTemplate = gitignoreTemplate
                self.licenseTemplate = licenseTemplate
                self.allowSquashMerge = allowSquashMerge ?? true
                self.allowMergeCommit = allowMergeCommit ?? true
                self.allowRebaseMerge = allowRebaseMerge ?? true
                self.allowAutoMerge = allowAutoMerge ?? false
                self.deleteBranchOnMerge = deleteBranchOnMerge ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case description
                case homepage
                case isPrivate = "private"
                case visibility
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case isTemplate = "is_template"
                case teamID = "team_id"
                case isAutoInit = "auto_init"
                case gitignoreTemplate = "gitignore_template"
                case licenseTemplate = "license_template"
                case allowSquashMerge = "allow_squash_merge"
                case allowMergeCommit = "allow_merge_commit"
                case allowRebaseMerge = "allow_rebase_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
            }
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var secretScanning: SecretScanning {
        SecretScanning(path: path + "/secret-scanning")
    }

    public struct SecretScanning {
        /// Path: `/orgs/{org}/secret-scanning`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.SecretScanning {
    public var alerts: Alerts {
        Alerts(path: path + "/alerts")
    }

    public struct Alerts {
        /// Path: `/orgs/{org}/secret-scanning/alerts`
        public let path: String

        /// List secret scanning alerts for an organization
        ///
        /// Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
        /// To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-organization)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.OrganizationSecretScanningAlert]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var state: State?
            public var secretType: String?
            public var resolution: String?
            public var page: Int?
            public var perPage: Int?

            public enum State: String, Codable, CaseIterable {
                case `open`
                case resolved
            }

            public init(state: State? = nil, secretType: String? = nil, resolution: String? = nil, page: Int? = nil, perPage: Int? = nil) {
                self.state = state
                self.secretType = secretType
                self.resolution = resolution
                self.page = page
                self.perPage = perPage
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(state, forKey: "state")
                encoder.encode(secretType, forKey: "secret_type")
                encoder.encode(resolution, forKey: "resolution")
                encoder.encode(page, forKey: "page")
                encoder.encode(perPage, forKey: "per_page")
                return encoder.items
            }
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/orgs/{org}/settings`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Settings {
    public var billing: Billing {
        Billing(path: path + "/billing")
    }

    public struct Billing {
        /// Path: `/orgs/{org}/settings/billing`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Settings.Billing {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/orgs/{org}/settings/billing/actions`
        public let path: String

        /// Get GitHub Actions billing for an organization
        ///
        /// Gets the summary of the free and paid GitHub Actions minutes used.
        /// 
        /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
        /// 
        /// Access tokens must have the `repo` or `admin:org` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization)
        public var get: Request<OctoKit.ActionsBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Settings.Billing {
    public var advancedSecurity: AdvancedSecurity {
        AdvancedSecurity(path: path + "/advanced-security")
    }

    public struct AdvancedSecurity {
        /// Path: `/orgs/{org}/settings/billing/advanced-security`
        public let path: String

        /// Get GitHub Advanced Security active committers for an organization
        ///
        /// Gets the GitHub Advanced Security active committers for an organization per repository.
        /// Each distinct user login across all repositories is counted as a single Advanced Security seat, so the total_advanced_security_committers is not the sum of advanced_security_committers for each repository.
        /// If this organization defers to an enterprise for billing, the total_advanced_security_committers returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-advanced-security-active-committers-for-an-organization)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<OctoKit.AdvancedSecurityActiveCommitters> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg.Settings.Billing {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/orgs/{org}/settings/billing/packages`
        public let path: String

        /// Get GitHub Packages billing for an organization
        ///
        /// Gets the free and paid storage used for GitHub Packages in gigabytes.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// Access tokens must have the `repo` or `admin:org` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization)
        public var get: Request<OctoKit.PackagesBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Settings.Billing {
    public var sharedStorage: SharedStorage {
        SharedStorage(path: path + "/shared-storage")
    }

    public struct SharedStorage {
        /// Path: `/orgs/{org}/settings/billing/shared-storage`
        public let path: String

        /// Get shared storage billing for an organization
        ///
        /// Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// Access tokens must have the `repo` or `admin:org` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization)
        public var get: Request<OctoKit.CombinedBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var teamSync: TeamSync {
        TeamSync(path: path + "/team-sync")
    }

    public struct TeamSync {
        /// Path: `/orgs/{org}/team-sync`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.TeamSync {
    public var groups: Groups {
        Groups(path: path + "/groups")
    }

    public struct Groups {
        /// Path: `/orgs/{org}/team-sync/groups`
        public let path: String

        /// List IdP groups for an organization
        ///
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-idp-groups-for-an-organization)
        public func get(perPage: Int? = nil, page: String? = nil) -> Request<OctoKit.GroupMapping> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/orgs/{org}/teams`
        public let path: String

        /// List teams
        ///
        /// Lists all teams in an organization that are visible to the authenticated user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-teams)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Team]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a team
        ///
        /// To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
        /// 
        /// When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#create-a-team)
        public func post(_ body: PostRequest) -> Request<OctoKit.TeamFull> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The name of the team.
            public var name: String
            /// The description of the team.
            public var description: String?
            /// List GitHub IDs for organization members who will become team maintainers.
            public var maintainers: [String]?
            /// The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
            public var repoNames: [String]?
            /// The level of privacy this team should have. The options are:  
            /// **For a non-nested team:**  
            /// \* `secret` - only visible to organization owners and members of this team.  
            /// \* `closed` - visible to all members of this organization.  
            /// Default: `secret`  
            /// **For a parent or child team:**  
            /// \* `closed` - visible to all members of this organization.  
            /// Default for child team: `closed`
            public var privacy: Privacy?
            /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
            /// \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
            /// \* `push` - team members can pull and push, but not administer newly-added repositories.  
            /// \* `admin` - team members can pull, push and administer newly-added repositories.
            public var permission: Permission?
            /// The ID of a team to set as the parent team.
            public var parentTeamID: Int?

            /// The level of privacy this team should have. The options are:  
            /// **For a non-nested team:**  
            /// \* `secret` - only visible to organization owners and members of this team.  
            /// \* `closed` - visible to all members of this organization.  
            /// Default: `secret`  
            /// **For a parent or child team:**  
            /// \* `closed` - visible to all members of this organization.  
            /// Default for child team: `closed`
            public enum Privacy: String, Codable, CaseIterable {
                case secret
                case closed
            }

            /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
            /// \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
            /// \* `push` - team members can pull and push, but not administer newly-added repositories.  
            /// \* `admin` - team members can pull, push and administer newly-added repositories.
            public enum Permission: String, Codable, CaseIterable {
                case pull
                case push
                case admin
            }

            public init(name: String, description: String? = nil, maintainers: [String]? = nil, repoNames: [String]? = nil, privacy: Privacy? = nil, permission: Permission? = nil, parentTeamID: Int? = nil) {
                self.name = name
                self.description = description
                self.maintainers = maintainers
                self.repoNames = repoNames
                self.privacy = privacy
                self.permission = permission
                self.parentTeamID = parentTeamID
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case description
                case maintainers
                case repoNames = "repo_names"
                case privacy
                case permission
                case parentTeamID = "parent_team_id"
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Teams {
    public func teamSlug(_ teamSlug: String) -> WithTeamSlug {
        WithTeamSlug(path: "\(path)/\(teamSlug)")
    }

    public struct WithTeamSlug {
        /// Path: `/orgs/{org}/teams/{team_slug}`
        public let path: String

        /// Get a team by name
        ///
        /// Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-a-team-by-name)
        public var get: Request<OctoKit.TeamFull> {
            .get(path)
        }

        /// Update a team
        ///
        /// To edit a team, the authenticated user must either be an organization owner or a team maintainer.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#update-a-team)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.TeamFull> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The name of the team.
            public var name: String?
            /// The description of the team.
            public var description: String?
            /// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
            /// **For a non-nested team:**  
            /// \* `secret` - only visible to organization owners and members of this team.  
            /// \* `closed` - visible to all members of this organization.  
            /// **For a parent or child team:**  
            /// \* `closed` - visible to all members of this organization.
            public var privacy: Privacy?
            /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
            /// \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
            /// \* `push` - team members can pull and push, but not administer newly-added repositories.  
            /// \* `admin` - team members can pull, push and administer newly-added repositories.
            public var permission: Permission?
            /// The ID of a team to set as the parent team.
            public var parentTeamID: Int?

            /// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
            /// **For a non-nested team:**  
            /// \* `secret` - only visible to organization owners and members of this team.  
            /// \* `closed` - visible to all members of this organization.  
            /// **For a parent or child team:**  
            /// \* `closed` - visible to all members of this organization.
            public enum Privacy: String, Codable, CaseIterable {
                case secret
                case closed
            }

            /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
            /// \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
            /// \* `push` - team members can pull and push, but not administer newly-added repositories.  
            /// \* `admin` - team members can pull, push and administer newly-added repositories.
            public enum Permission: String, Codable, CaseIterable {
                case pull
                case push
                case admin
            }

            public init(name: String? = nil, description: String? = nil, privacy: Privacy? = nil, permission: Permission? = nil, parentTeamID: Int? = nil) {
                self.name = name
                self.description = description
                self.privacy = privacy
                self.permission = permission
                self.parentTeamID = parentTeamID
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case description
                case privacy
                case permission
                case parentTeamID = "parent_team_id"
            }
        }

        /// Delete a team
        ///
        /// To delete a team, the authenticated user must be an organization owner or team maintainer.
        /// 
        /// If you are an organization owner, deleting a parent team will delete all of its child teams as well.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#delete-a-team)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var discussions: Discussions {
        Discussions(path: path + "/discussions")
    }

    public struct Discussions {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions`
        public let path: String

        /// List discussions
        ///
        /// List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-discussions)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.TeamDiscussion]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?
            public var pinned: String?

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil, pinned: String? = nil) {
                self.direction = direction
                self.perPage = perPage
                self.page = page
                self.pinned = pinned
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(pinned, forKey: "pinned")
                return encoder.items
            }
        }

        /// Create a discussion
        ///
        /// Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#create-a-discussion)
        public func post(_ body: PostRequest) -> Request<OctoKit.TeamDiscussion> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The discussion post's title.
            public var title: String
            /// The discussion post's body text.
            public var body: String
            /// Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
            public var isPrivate: Bool

            public init(title: String, body: String, isPrivate: Bool? = nil) {
                self.title = title
                self.body = body
                self.isPrivate = isPrivate ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case title
                case body
                case isPrivate = "private"
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions {
    public func discussionNumber(_ discussionNumber: Int) -> WithDiscussionNumber {
        WithDiscussionNumber(path: "\(path)/\(discussionNumber)")
    }

    public struct WithDiscussionNumber {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`
        public let path: String

        /// Get a discussion
        ///
        /// Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-a-discussion)
        public var get: Request<OctoKit.TeamDiscussion> {
            .get(path)
        }

        /// Update a discussion
        ///
        /// Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#update-a-discussion)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.TeamDiscussion> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The discussion post's title.
            public var title: String?
            /// The discussion post's body text.
            public var body: String?

            public init(title: String? = nil, body: String? = nil) {
                self.title = title
                self.body = body
            }
        }

        /// Delete a discussion
        ///
        /// Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#delete-a-discussion)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments`
        public let path: String

        /// List discussion comments
        ///
        /// List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-discussion-comments)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.TeamDiscussionComment]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a discussion comment
        ///
        /// Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#create-a-discussion-comment)
        public func post(body: String) -> Request<OctoKit.TeamDiscussionComment> {
            .post(path, body: ["body": body])
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber.Comments {
    public func commentNumber(_ commentNumber: Int) -> WithCommentNumber {
        WithCommentNumber(path: "\(path)/\(commentNumber)")
    }

    public struct WithCommentNumber {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`
        public let path: String

        /// Get a discussion comment
        ///
        /// Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-a-discussion-comment)
        public var get: Request<OctoKit.TeamDiscussionComment> {
            .get(path)
        }

        /// Update a discussion comment
        ///
        /// Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#update-a-discussion-comment)
        public func patch(body: String) -> Request<OctoKit.TeamDiscussionComment> {
            .patch(path, body: ["body": body])
        }

        /// Delete a discussion comment
        ///
        /// Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber.Comments.WithCommentNumber {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions`
        public let path: String

        /// List reactions for a team discussion comment
        ///
        /// List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Reaction]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var content: Content?
            public var perPage: Int?
            public var page: Int?

            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.content = content
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(content, forKey: "content")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create reaction for a team discussion comment
        ///
        /// Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)
        public func post(content: PostRequest.Content) -> Request<OctoKit.Reaction> {
            .post(path, body: PostRequest(content: content))
        }

        public struct PostRequest: Encodable {
            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
            public var content: Content

            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content) {
                self.content = content
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber.Comments.WithCommentNumber.Reactions {
    public func reactionID(_ reactionID: Int) -> WithReactionID {
        WithReactionID(path: "\(path)/\(reactionID)")
    }

    public struct WithReactionID {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}`
        public let path: String

        /// Delete team discussion comment reaction
        ///
        /// **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
        /// 
        /// Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-team-discussion-comment-reaction)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions`
        public let path: String

        /// List reactions for a team discussion
        ///
        /// List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Reaction]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var content: Content?
            public var perPage: Int?
            public var page: Int?

            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.content = content
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(content, forKey: "content")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create reaction for a team discussion
        ///
        /// Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion)
        public func post(content: PostRequest.Content) -> Request<OctoKit.Reaction> {
            .post(path, body: PostRequest(content: content))
        }

        public struct PostRequest: Encodable {
            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
            public var content: Content

            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content) {
                self.content = content
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber.Reactions {
    public func reactionID(_ reactionID: Int) -> WithReactionID {
        WithReactionID(path: "\(path)/\(reactionID)")
    }

    public struct WithReactionID {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}`
        public let path: String

        /// Delete team discussion reaction
        ///
        /// **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
        /// 
        /// Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-team-discussion-reaction)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var externalGroups: ExternalGroups {
        ExternalGroups(path: path + "/external-groups")
    }

    public struct ExternalGroups {
        /// Path: `/orgs/{org}/teams/{team_slug}/external-groups`
        public let path: String

        /// Update the connection between an external group and a team
        ///
        /// Creates a connection between a team and an external group.  Only one external group can be linked to a team.
        /// 
        /// You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#link-external-idp-group-team-connection)
        public func patch(groupID: Int) -> Request<OctoKit.ExternalGroup> {
            .patch(path, body: ["group_id": groupID])
        }

        /// Remove the connection between an external group and a team
        ///
        /// Deletes a connection between a team and an external group.
        /// 
        /// You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#unlink-external-idp-group-team-connection)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var invitations: Invitations {
        Invitations(path: path + "/invitations")
    }

    public struct Invitations {
        /// Path: `/orgs/{org}/teams/{team_slug}/invitations`
        public let path: String

        /// List pending team invitations
        ///
        /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-pending-team-invitations)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.OrganizationInvitation]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/orgs/{org}/teams/{team_slug}/members`
        public let path: String

        /// List team members
        ///
        /// Team members will include the members of child teams.
        /// 
        /// To list members in a team, the team must be visible to the authenticated user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-team-members)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var role: Role?
            public var perPage: Int?
            public var page: Int?

            public enum Role: String, Codable, CaseIterable {
                case member
                case maintainer
                case all
            }

            public init(role: Role? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.role = role
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(role, forKey: "role")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var memberships: Memberships {
        Memberships(path: path + "/memberships")
    }

    public struct Memberships {
        /// Path: `/orgs/{org}/teams/{team_slug}/memberships`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Memberships {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/teams/{team_slug}/memberships/{username}`
        public let path: String

        /// Get team membership for a user
        ///
        /// Team members will include the members of child teams.
        /// 
        /// To get a user's membership with a team, the team must be visible to the authenticated user.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
        /// 
        /// **Note:**
        /// The response contains the `state` of the membership and the member's `role`.
        /// 
        /// The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user)
        public var get: Request<OctoKit.TeamMembership> {
            .get(path)
        }

        /// Add or update team membership for a user
        ///
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
        /// 
        /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        /// 
        /// An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
        /// 
        /// If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user)
        public func put(role: PutRequest.Role? = nil) -> Request<OctoKit.TeamMembership> {
            .put(path, body: PutRequest(role: role))
        }

        public struct PutRequest: Encodable {
            /// The role that this user should have in the team. Can be one of:  
            /// \* `member` - a normal member of the team.  
            /// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
            public var role: Role?

            /// The role that this user should have in the team. Can be one of:  
            /// \* `member` - a normal member of the team.  
            /// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
            public enum Role: String, Codable, CaseIterable {
                case member
                case maintainer
            }

            public init(role: Role? = nil) {
                self.role = role
            }
        }

        /// Remove team membership for a user
        ///
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
        /// 
        /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/orgs/{org}/teams/{team_slug}/projects`
        public let path: String

        /// List team projects
        ///
        /// Lists the organization projects for a team.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-team-projects)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.TeamProject]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Projects {
    public func projectID(_ projectID: Int) -> WithProjectID {
        WithProjectID(path: "\(path)/\(projectID)")
    }

    public struct WithProjectID {
        /// Path: `/orgs/{org}/teams/{team_slug}/projects/{project_id}`
        public let path: String

        /// Check team permissions for a project
        ///
        /// Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project)
        public var get: Request<OctoKit.TeamProject> {
            .get(path)
        }

        /// Add or update team project permissions
        ///
        /// Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions)
        public func put(permission: PutRequest.Permission? = nil) -> Request<Void> {
            .put(path, body: PutRequest(permission: permission))
        }

        public struct PutRequest: Encodable {
            /// The permission to grant to the team for this project. Can be one of:  
            /// \* `read` - team members can read, but not write to or administer this project.  
            /// \* `write` - team members can read and write, but not administer this project.  
            /// \* `admin` - team members can read, write and administer this project.  
            /// Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
            public var permission: Permission?

            /// The permission to grant to the team for this project. Can be one of:  
            /// \* `read` - team members can read, but not write to or administer this project.  
            /// \* `write` - team members can read and write, but not administer this project.  
            /// \* `admin` - team members can read, write and administer this project.  
            /// Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
            public enum Permission: String, Codable, CaseIterable {
                case read
                case write
                case admin
            }

            public init(permission: Permission? = nil) {
                self.permission = permission
            }
        }

        /// Remove a project from a team
        ///
        /// Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/orgs/{org}/teams/{team_slug}/repos`
        public let path: String

        /// List team repositories
        ///
        /// Lists a team's repositories visible to the authenticated user.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-team-repositories)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.MinimalRepository]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Repos {
    public func owner(_ owner: String) -> WithOwner {
        WithOwner(path: "\(path)/\(owner)")
    }

    public struct WithOwner {
        /// Path: `/orgs/{org}/teams/{team_slug}/repos/{owner}`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Repos.WithOwner {
    public func repo(_ repo: String) -> WithRepo {
        WithRepo(path: "\(path)/\(repo)")
    }

    public struct WithRepo {
        /// Path: `/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`
        public let path: String

        /// Check team permissions for a repository
        ///
        /// Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
        /// 
        /// You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
        /// 
        /// If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository)
        public var get: Request<OctoKit.TeamRepository> {
            .get(path)
        }

        /// Add or update team repository permissions
        ///
        /// To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
        /// 
        /// For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions)
        public func put(permission: PutRequest.Permission? = nil) -> Request<Void> {
            .put(path, body: PutRequest(permission: permission))
        }

        public struct PutRequest: Encodable {
            /// The permission to grant the team on this repository. Can be one of:  
            /// \* `pull` - team members can pull, but not push to or administer this repository.  
            /// \* `push` - team members can pull and push, but not administer this repository.  
            /// \* `admin` - team members can pull, push and administer this repository.  
            /// \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  
            /// \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  
            /// \* custom repository role name - A custom repository role if the owning organization has defined any.  
            ///   
            /// If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
            public var permission: Permission?

            /// The permission to grant the team on this repository. Can be one of:  
            /// \* `pull` - team members can pull, but not push to or administer this repository.  
            /// \* `push` - team members can pull and push, but not administer this repository.  
            /// \* `admin` - team members can pull, push and administer this repository.  
            /// \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  
            /// \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  
            /// \* custom repository role name - A custom repository role if the owning organization has defined any.  
            ///   
            /// If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
            public enum Permission: String, Codable, CaseIterable {
                case pull
                case push
                case admin
                case maintain
                case triage
            }

            public init(permission: Permission? = nil) {
                self.permission = permission
            }
        }

        /// Remove a repository from a team
        ///
        /// If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var teamSync: TeamSync {
        TeamSync(path: path + "/team-sync")
    }

    public struct TeamSync {
        /// Path: `/orgs/{org}/teams/{team_slug}/team-sync`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.TeamSync {
    public var groupMappings: GroupMappings {
        GroupMappings(path: path + "/group-mappings")
    }

    public struct GroupMappings {
        /// Path: `/orgs/{org}/teams/{team_slug}/team-sync/group-mappings`
        public let path: String

        /// List IdP groups for a team
        ///
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// List IdP groups connected to a team on GitHub.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team)
        public var get: Request<OctoKit.GroupMapping> {
            .get(path)
        }

        /// Create or update IdP group connections
        ///
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections)
        public func patch(groups: [PatchRequest.Group]? = nil) -> Request<OctoKit.GroupMapping> {
            .patch(path, body: PatchRequest(groups: groups))
        }

        public struct PatchRequest: Encodable {
            /// The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
            public var groups: [Group]?

            public struct Group: Encodable {
                /// ID of the IdP group.
                public var groupID: String
                /// Name of the IdP group.
                public var groupName: String
                /// Description of the IdP group.
                public var groupDescription: String

                public init(groupID: String, groupName: String, groupDescription: String) {
                    self.groupID = groupID
                    self.groupName = groupName
                    self.groupDescription = groupDescription
                }

                private enum CodingKeys: String, CodingKey {
                    case groupID = "group_id"
                    case groupName = "group_name"
                    case groupDescription = "group_description"
                }
            }

            public init(groups: [Group]? = nil) {
                self.groups = groups
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/orgs/{org}/teams/{team_slug}/teams`
        public let path: String

        /// List child teams
        ///
        /// Lists the child teams of the team specified by `{team_slug}`.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-child-teams)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Team]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths {
    public static var projects: Projects {
        Projects(path: "/projects")
    }

    public struct Projects {
        /// Path: `/projects`
        public let path: String
    }
}

extension Paths.Projects {
    public var columns: Columns {
        Columns(path: path + "/columns")
    }

    public struct Columns {
        /// Path: `/projects/columns`
        public let path: String
    }
}

extension Paths.Projects.Columns {
    public var cards: Cards {
        Cards(path: path + "/cards")
    }

    public struct Cards {
        /// Path: `/projects/columns/cards`
        public let path: String
    }
}

extension Paths.Projects.Columns.Cards {
    public func cardID(_ cardID: Int) -> WithCardID {
        WithCardID(path: "\(path)/\(cardID)")
    }

    public struct WithCardID {
        /// Path: `/projects/columns/cards/{card_id}`
        public let path: String

        /// Get a project card
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#get-a-project-card)
        public var get: Request<OctoKit.ProjectCard> {
            .get(path)
        }

        /// Update an existing project card
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#update-a-project-card)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.ProjectCard> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The project card's note
            ///
            /// Example: "Update all gems"
            public var note: String?
            /// Whether or not the card is archived
            ///
            /// Example: false
            public var isArchived: Bool?

            public init(note: String? = nil, isArchived: Bool? = nil) {
                self.note = note
                self.isArchived = isArchived
            }

            private enum CodingKeys: String, CodingKey {
                case note
                case isArchived = "archived"
            }
        }

        /// Delete a project card
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#delete-a-project-card)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Projects.Columns.Cards.WithCardID {
    public var moves: Moves {
        Moves(path: path + "/moves")
    }

    public struct Moves {
        /// Path: `/projects/columns/cards/{card_id}/moves`
        public let path: String

        /// Move a project card
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#move-a-project-card)
        public func post(_ body: PostRequest) -> Request<Void> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
            ///
            /// Example: "bottom"
            public var position: String
            /// The unique identifier of the column the card should be moved to
            ///
            /// Example: 42
            public var columnID: Int?

            public init(position: String, columnID: Int? = nil) {
                self.position = position
                self.columnID = columnID
            }

            private enum CodingKeys: String, CodingKey {
                case position
                case columnID = "column_id"
            }
        }
    }
}

extension Paths.Projects.Columns {
    public func columnID(_ columnID: Int) -> WithColumnID {
        WithColumnID(path: "\(path)/\(columnID)")
    }

    public struct WithColumnID {
        /// Path: `/projects/columns/{column_id}`
        public let path: String

        /// Get a project column
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#get-a-project-column)
        public var get: Request<OctoKit.ProjectColumn> {
            .get(path)
        }

        /// Update an existing project column
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#update-a-project-column)
        public func patch(name: String) -> Request<OctoKit.ProjectColumn> {
            .patch(path, body: ["name": name])
        }

        /// Delete a project column
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#delete-a-project-column)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Projects.Columns.WithColumnID {
    public var cards: Cards {
        Cards(path: path + "/cards")
    }

    public struct Cards {
        /// Path: `/projects/columns/{column_id}/cards`
        public let path: String

        /// List project cards
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-project-cards)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.ProjectCard]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var archivedState: ArchivedState?
            public var perPage: Int?
            public var page: Int?

            public enum ArchivedState: String, Codable, CaseIterable {
                case all
                case archived
                case notArchived = "not_archived"
            }

            public init(archivedState: ArchivedState? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.archivedState = archivedState
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(archivedState, forKey: "archived_state")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a project card
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#create-a-project-card)
        public func post(_ body: PostRequest) -> Request<OctoKit.ProjectCard> {
            .post(path, body: body)
        }

        public enum PostRequest: Encodable {
            case a(A)
            case b(B)

            public struct A: Encodable {
                /// The project card's note
                ///
                /// Example: "Update all gems"
                public var note: String?

                public init(note: String? = nil) {
                    self.note = note
                }
            }

            public struct B: Encodable {
                /// The unique identifier of the content associated with the card
                ///
                /// Example: 42
                public var contentID: Int
                /// The piece of content associated with the card
                ///
                /// Example: "PullRequest"
                public var contentType: String

                public init(contentID: Int, contentType: String) {
                    self.contentID = contentID
                    self.contentType = contentType
                }

                private enum CodingKeys: String, CodingKey {
                    case contentID = "content_id"
                    case contentType = "content_type"
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .a(let value): try container.encode(value)
                case .b(let value): try container.encode(value)
                }
            }
        }
    }
}

extension Paths.Projects.Columns.WithColumnID {
    public var moves: Moves {
        Moves(path: path + "/moves")
    }

    public struct Moves {
        /// Path: `/projects/columns/{column_id}/moves`
        public let path: String

        /// Move a project column
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#move-a-project-column)
        public func post(position: String) -> Request<Void> {
            .post(path, body: ["position": position])
        }
    }
}

extension Paths.Projects {
    public func projectID(_ projectID: Int) -> WithProjectID {
        WithProjectID(path: "\(path)/\(projectID)")
    }

    public struct WithProjectID {
        /// Path: `/projects/{project_id}`
        public let path: String

        /// Get a project
        ///
        /// Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#get-a-project)
        public var get: Request<OctoKit.Project> {
            .get(path)
        }

        /// Update a project
        ///
        /// Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#update-a-project)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.Project> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Name of the project
            ///
            /// Example: "Week One Sprint"
            public var name: String?
            /// Body of the project
            ///
            /// Example: "This project represents the sprint of the first week in January"
            public var body: String?
            /// State of the project; either 'open' or 'closed'
            ///
            /// Example: "open"
            public var state: String?
            /// The baseline permission that all organization members have on this project
            public var organizationPermission: OrganizationPermission?
            /// Whether or not this project can be seen by everyone.
            public var isPrivate: Bool?

            /// The baseline permission that all organization members have on this project
            public enum OrganizationPermission: String, Codable, CaseIterable {
                case read
                case write
                case admin
                case `none`
            }

            public init(name: String? = nil, body: String? = nil, state: String? = nil, organizationPermission: OrganizationPermission? = nil, isPrivate: Bool? = nil) {
                self.name = name
                self.body = body
                self.state = state
                self.organizationPermission = organizationPermission
                self.isPrivate = isPrivate
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case body
                case state
                case organizationPermission = "organization_permission"
                case isPrivate = "private"
            }
        }

        /// Delete a project
        ///
        /// Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#delete-a-project)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Projects.WithProjectID {
    public var collaborators: Collaborators {
        Collaborators(path: path + "/collaborators")
    }

    public struct Collaborators {
        /// Path: `/projects/{project_id}/collaborators`
        public let path: String

        /// List project collaborators
        ///
        /// Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-project-collaborators)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var affiliation: Affiliation?
            public var perPage: Int?
            public var page: Int?

            public enum Affiliation: String, Codable, CaseIterable {
                case outside
                case direct
                case all
            }

            public init(affiliation: Affiliation? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.affiliation = affiliation
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(affiliation, forKey: "affiliation")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Projects.WithProjectID.Collaborators {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/projects/{project_id}/collaborators/{username}`
        public let path: String

        /// Add project collaborator
        ///
        /// Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#add-project-collaborator)
        public func put(permission: PutRequest.Permission? = nil) -> Request<Void> {
            .put(path, body: PutRequest(permission: permission))
        }

        public struct PutRequest: Encodable {
            /// The permission to grant the collaborator.
            ///
            /// Example: "write"
            public var permission: Permission?

            /// The permission to grant the collaborator.
            ///
            /// Example: "write"
            public enum Permission: String, Codable, CaseIterable {
                case read
                case write
                case admin
            }

            public init(permission: Permission? = nil) {
                self.permission = permission
            }
        }

        /// Remove user as a collaborator
        ///
        /// Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#remove-project-collaborator)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Projects.WithProjectID.Collaborators.WithUsername {
    public var permission: Permission {
        Permission(path: path + "/permission")
    }

    public struct Permission {
        /// Path: `/projects/{project_id}/collaborators/{username}/permission`
        public let path: String

        /// Get project permission for a user
        ///
        /// Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user)
        public var get: Request<OctoKit.ProjectCollaboratorPermission> {
            .get(path)
        }
    }
}

extension Paths.Projects.WithProjectID {
    public var columns: Columns {
        Columns(path: path + "/columns")
    }

    public struct Columns {
        /// Path: `/projects/{project_id}/columns`
        public let path: String

        /// List project columns
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-project-columns)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.ProjectColumn]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a project column
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#create-a-project-column)
        public func post(name: String) -> Request<OctoKit.ProjectColumn> {
            .post(path, body: ["name": name])
        }
    }
}

extension Paths {
    public static var rateLimit: RateLimit {
        RateLimit(path: "/rate_limit")
    }

    public struct RateLimit {
        /// Path: `/rate_limit`
        public let path: String

        /// Get rate limit status for the authenticated user
        ///
        /// **Note:** Accessing this endpoint does not count against your REST API rate limit.
        /// 
        /// **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/rate-limit#get-rate-limit-status-for-the-authenticated-user)
        public var get: Request<OctoKit.RateLimitOverview> {
            .get(path)
        }

        public enum GetResponseHeaders {
            public static let rateLimitLimit = HTTPHeader<Int>(field: "X-RateLimit-Limit")
            public static let rateLimitRemaining = HTTPHeader<Int>(field: "X-RateLimit-Remaining")
            public static let rateLimitReset = HTTPHeader<Int>(field: "X-RateLimit-Reset")
        }
    }
}

extension Paths {
    public static var reactions: Reactions {
        Reactions(path: "/reactions")
    }

    public struct Reactions {
        /// Path: `/reactions`
        public let path: String
    }
}

extension Paths.Reactions {
    public func reactionID(_ reactionID: Int) -> WithReactionID {
        WithReactionID(path: "\(path)/\(reactionID)")
    }

    public struct WithReactionID {
        /// Path: `/reactions/{reaction_id}`
        public let path: String

        /// Delete a reaction (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
        /// 
        /// OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions/#delete-a-reaction-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var repos: Repos {
        Repos(path: "/repos")
    }

    public struct Repos {
        /// Path: `/repos`
        public let path: String
    }
}

extension Paths.Repos {
    public func owner(_ owner: String) -> WithOwner {
        WithOwner(path: "\(path)/\(owner)")
    }

    public struct WithOwner {
        /// Path: `/repos/{owner}`
        public let path: String
    }
}

extension Paths.Repos.WithOwner {
    public func repo(_ repo: String) -> WithRepo {
        WithRepo(path: "\(path)/\(repo)")
    }

    public struct WithRepo {
        /// Path: `/repos/{owner}/{repo}`
        public let path: String

        /// Get a repository
        ///
        /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-repository)
        public var get: Request<OctoKit.FullRepository> {
            .get(path)
        }

        /// Update a repository
        ///
        /// **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos/#update-a-repository)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.FullRepository> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The name of the repository.
            public var name: String?
            /// A short description of the repository.
            public var description: String?
            /// A URL with more information about the repository.
            public var homepage: String?
            /// Either `true` to make the repository private or `false` to make it public. Default: `false`.  
            /// **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
            public var isPrivate: Bool
            /// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`."
            public var visibility: Visibility?
            /// Specify which security and analysis features to enable or disable. For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis": {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private repository covered by an Advanced Security license, you can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
            public var securityAndAnalysis: SecurityAndAnalysis?
            /// Either `true` to enable issues for this repository or `false` to disable them.
            public var hasIssues: Bool
            /// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
            public var hasProjects: Bool
            /// Either `true` to enable the wiki for this repository or `false` to disable it.
            public var hasWiki: Bool
            /// Either `true` to make this repo available as a template repository or `false` to prevent it.
            public var isTemplate: Bool
            /// Updates the default branch for this repository.
            public var defaultBranch: String?
            /// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
            public var allowSquashMerge: Bool
            /// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
            public var allowMergeCommit: Bool
            /// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
            public var allowRebaseMerge: Bool
            /// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
            public var allowAutoMerge: Bool
            /// Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
            public var deleteBranchOnMerge: Bool
            /// `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
            public var isArchived: Bool
            /// Either `true` to allow private forks, or `false` to prevent private forks.
            public var allowForking: Bool

            /// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`."
            public enum Visibility: String, Codable, CaseIterable {
                case `public`
                case `private`
                case `internal`
            }

            /// Specify which security and analysis features to enable or disable. For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis": {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private repository covered by an Advanced Security license, you can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
            public struct SecurityAndAnalysis: Encodable {
                /// Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
                public var advancedSecurity: AdvancedSecurity?
                /// Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
                public var secretScanning: SecretScanning?

                /// Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
                public struct AdvancedSecurity: Encodable {
                    /// Can be `enabled` or `disabled`.
                    public var status: String?

                    public init(status: String? = nil) {
                        self.status = status
                    }
                }

                /// Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
                public struct SecretScanning: Encodable {
                    /// Can be `enabled` or `disabled`.
                    public var status: String?

                    public init(status: String? = nil) {
                        self.status = status
                    }
                }

                public init(advancedSecurity: AdvancedSecurity? = nil, secretScanning: SecretScanning? = nil) {
                    self.advancedSecurity = advancedSecurity
                    self.secretScanning = secretScanning
                }

                private enum CodingKeys: String, CodingKey {
                    case advancedSecurity = "advanced_security"
                    case secretScanning = "secret_scanning"
                }
            }

            public init(name: String? = nil, description: String? = nil, homepage: String? = nil, isPrivate: Bool? = nil, visibility: Visibility? = nil, securityAndAnalysis: SecurityAndAnalysis? = nil, hasIssues: Bool? = nil, hasProjects: Bool? = nil, hasWiki: Bool? = nil, isTemplate: Bool? = nil, defaultBranch: String? = nil, allowSquashMerge: Bool? = nil, allowMergeCommit: Bool? = nil, allowRebaseMerge: Bool? = nil, allowAutoMerge: Bool? = nil, deleteBranchOnMerge: Bool? = nil, isArchived: Bool? = nil, allowForking: Bool? = nil) {
                self.name = name
                self.description = description
                self.homepage = homepage
                self.isPrivate = isPrivate ?? false
                self.visibility = visibility
                self.securityAndAnalysis = securityAndAnalysis
                self.hasIssues = hasIssues ?? true
                self.hasProjects = hasProjects ?? true
                self.hasWiki = hasWiki ?? true
                self.isTemplate = isTemplate ?? false
                self.defaultBranch = defaultBranch
                self.allowSquashMerge = allowSquashMerge ?? true
                self.allowMergeCommit = allowMergeCommit ?? true
                self.allowRebaseMerge = allowRebaseMerge ?? true
                self.allowAutoMerge = allowAutoMerge ?? false
                self.deleteBranchOnMerge = deleteBranchOnMerge ?? false
                self.isArchived = isArchived ?? false
                self.allowForking = allowForking ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case description
                case homepage
                case isPrivate = "private"
                case visibility
                case securityAndAnalysis = "security_and_analysis"
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case isTemplate = "is_template"
                case defaultBranch = "default_branch"
                case allowSquashMerge = "allow_squash_merge"
                case allowMergeCommit = "allow_merge_commit"
                case allowRebaseMerge = "allow_rebase_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case isArchived = "archived"
                case allowForking = "allow_forking"
            }
        }

        /// Delete a repository
        ///
        /// Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
        /// 
        /// If an organization owner has configured the organization to prevent members from deleting organization-owned
        /// repositories, you will get a `403 Forbidden` response.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-repository)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/repos/{owner}/{repo}/actions`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var artifacts: Artifacts {
        Artifacts(path: path + "/artifacts")
    }

    public struct Artifacts {
        /// Path: `/repos/{owner}/{repo}/actions/artifacts`
        public let path: String

        /// List artifacts for a repository
        ///
        /// Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var artifacts: [OctoKit.Artifact]

            public init(totalCount: Int, artifacts: [OctoKit.Artifact]) {
                self.totalCount = totalCount
                self.artifacts = artifacts
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case artifacts
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Artifacts {
    public func artifactID(_ artifactID: Int) -> WithArtifactID {
        WithArtifactID(path: "\(path)/\(artifactID)")
    }

    public struct WithArtifactID {
        /// Path: `/repos/{owner}/{repo}/actions/artifacts/{artifact_id}`
        public let path: String

        /// Get an artifact
        ///
        /// Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-an-artifact)
        public var get: Request<OctoKit.Artifact> {
            .get(path)
        }

        /// Delete an artifact
        ///
        /// Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-an-artifact)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Artifacts.WithArtifactID {
    public func archiveFormat(_ archiveFormat: String) -> WithArchiveFormat {
        WithArchiveFormat(path: "\(path)/\(archiveFormat)")
    }

    public struct WithArchiveFormat {
        /// Path: `/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}`
        public let path: String

        /// Download an artifact
        ///
        /// Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
        /// the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
        /// the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
        /// GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#download-an-artifact)
        public var get: Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var jobs: Jobs {
        Jobs(path: path + "/jobs")
    }

    public struct Jobs {
        /// Path: `/repos/{owner}/{repo}/actions/jobs`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Jobs {
    public func jobID(_ jobID: Int) -> WithJobID {
        WithJobID(path: "\(path)/\(jobID)")
    }

    public struct WithJobID {
        /// Path: `/repos/{owner}/{repo}/actions/jobs/{job_id}`
        public let path: String

        /// Get a job for a workflow run
        ///
        /// Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run)
        public var get: Request<OctoKit.Job> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Jobs.WithJobID {
    public var logs: Logs {
        Logs(path: path + "/logs")
    }

    public struct Logs {
        /// Path: `/repos/{owner}/{repo}/actions/jobs/{job_id}/logs`
        public let path: String

        /// Download job logs for a workflow run
        ///
        /// Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
        /// for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
        /// use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
        /// have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run)
        public var get: Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var permissions: Permissions {
        Permissions(path: path + "/permissions")
    }

    public struct Permissions {
        /// Path: `/repos/{owner}/{repo}/actions/permissions`
        public let path: String

        /// Get GitHub Actions permissions for a repository
        ///
        /// Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this
        /// endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository)
        public var get: Request<OctoKit.ActionsRepositoryPermissions> {
            .get(path)
        }

        /// Set GitHub Actions permissions for a repository
        ///
        /// Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
        /// 
        /// If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository)
        public func put(_ body: PutRequest) -> Request<Void> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// Whether GitHub Actions is enabled on the repository.
            public var isEnabled: Bool
            /// The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
            public var allowedActions: OctoKit.AllowedActions?

            public init(isEnabled: Bool, allowedActions: OctoKit.AllowedActions? = nil) {
                self.isEnabled = isEnabled
                self.allowedActions = allowedActions
            }

            private enum CodingKeys: String, CodingKey {
                case isEnabled = "enabled"
                case allowedActions = "allowed_actions"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Permissions {
    public var selectedActions: SelectedActions {
        SelectedActions(path: path + "/selected-actions")
    }

    public struct SelectedActions {
        /// Path: `/repos/{owner}/{repo}/actions/permissions/selected-actions`
        public let path: String

        /// Get allowed actions for a repository
        ///
        /// Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository)
        public var get: Request<OctoKit.SelectedActions> {
            .get(path)
        }

        /// Set allowed actions for a repository
        ///
        /// Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
        /// 
        /// If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
        /// 
        /// To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository)
        public func put(_ body: OctoKit.SelectedActions? = nil) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var runners: Runners {
        Runners(path: path + "/runners")
    }

    public struct Runners {
        /// Path: `/repos/{owner}/{repo}/actions/runners`
        public let path: String

        /// List self-hosted runners for a repository
        ///
        /// Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var runners: [OctoKit.Runner]

            public init(totalCount: Int, runners: [OctoKit.Runner]) {
                self.totalCount = totalCount
                self.runners = runners
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case runners
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runners {
    public var downloads: Downloads {
        Downloads(path: path + "/downloads")
    }

    public struct Downloads {
        /// Path: `/repos/{owner}/{repo}/actions/runners/downloads`
        public let path: String

        /// List runner applications for a repository
        ///
        /// Lists binaries for the runner application that you can download and run.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository)
        public var get: Request<[OctoKit.RunnerApplication]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runners {
    public var registrationToken: RegistrationToken {
        RegistrationToken(path: path + "/registration-token")
    }

    public struct RegistrationToken {
        /// Path: `/repos/{owner}/{repo}/actions/runners/registration-token`
        public let path: String

        /// Create a registration token for a repository
        ///
        /// Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
        /// using an access token with the `repo` scope to use this endpoint.
        /// 
        /// #### Example using registration token
        ///  
        /// Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
        /// 
        /// ```
        /// ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository)
        public var post: Request<OctoKit.AuthenticationToken> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runners {
    public var removeToken: RemoveToken {
        RemoveToken(path: path + "/remove-token")
    }

    public struct RemoveToken {
        /// Path: `/repos/{owner}/{repo}/actions/runners/remove-token`
        public let path: String

        /// Create a remove token for a repository
        ///
        /// Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
        /// You must authenticate using an access token with the `repo` scope to use this endpoint.
        /// 
        /// #### Example using remove token
        ///  
        /// To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
        /// 
        /// ```
        /// ./config.sh remove --token TOKEN
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository)
        public var post: Request<OctoKit.AuthenticationToken> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runners {
    public func runnerID(_ runnerID: Int) -> WithRunnerID {
        WithRunnerID(path: "\(path)/\(runnerID)")
    }

    public struct WithRunnerID {
        /// Path: `/repos/{owner}/{repo}/actions/runners/{runner_id}`
        public let path: String

        /// Get a self-hosted runner for a repository
        ///
        /// Gets a specific self-hosted runner configured in a repository.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this
        /// endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository)
        public var get: Request<OctoKit.Runner> {
            .get(path)
        }

        /// Delete a self-hosted runner from a repository
        ///
        /// Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        /// 
        /// You must authenticate using an access token with the `repo`
        /// scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runners.WithRunnerID {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/repos/{owner}/{repo}/actions/runners/{runner_id}/labels`
        public let path: String

        /// List labels for a self-hosted runner for a repository
        ///
        /// Lists all labels for a self-hosted runner configured in a repository.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this
        /// endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-a-repository)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }

        /// Add custom labels to a self-hosted runner for a repository
        ///
        /// Add custom labels to a self-hosted runner configured in a repository.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this
        /// endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-a-repository)
        public func post(labels: [String]) -> Request<PostResponse> {
            .post(path, body: ["labels": labels])
        }

        public struct PostResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }

        /// Set custom labels for a self-hosted runner for a repository
        ///
        /// Remove all previous custom labels and set the new custom labels for a specific
        /// self-hosted runner configured in a repository.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this
        /// endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-a-repository)
        public func put(labels: [String]) -> Request<PutResponse> {
            .put(path, body: ["labels": labels])
        }

        public struct PutResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }

        /// Remove all custom labels from a self-hosted runner for a repository
        ///
        /// Remove all custom labels from a self-hosted runner configured in a
        /// repository. Returns the remaining read-only labels from the runner.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this
        /// endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository)
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runners.WithRunnerID.Labels {
    public func name(_ name: String) -> WithName {
        WithName(path: "\(path)/\(name)")
    }

    public struct WithName {
        /// Path: `/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}`
        public let path: String

        /// Remove a custom label from a self-hosted runner for a repository
        ///
        /// Remove a custom label from a self-hosted runner configured
        /// in a repository. Returns the remaining labels from the runner.
        /// 
        /// This endpoint returns a `404 Not Found` status if the custom label is not
        /// present on the runner.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this
        /// endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository)
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            public var totalCount: Int
            public var labels: [OctoKit.RunnerLabel]

            public init(totalCount: Int, labels: [OctoKit.RunnerLabel]) {
                self.totalCount = totalCount
                self.labels = labels
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case labels
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var runs: Runs {
        Runs(path: path + "/runs")
    }

    public struct Runs {
        /// Path: `/repos/{owner}/{repo}/actions/runs`
        public let path: String

        /// List workflow runs for a repository
        ///
        /// Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var workflowRuns: [OctoKit.WorkflowRun]

            public init(totalCount: Int, workflowRuns: [OctoKit.WorkflowRun]) {
                self.totalCount = totalCount
                self.workflowRuns = workflowRuns
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case workflowRuns = "workflow_runs"
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var actor: String?
            public var branch: String?
            public var event: String?
            public var status: Status?
            public var perPage: Int?
            public var page: Int?
            public var created: Date?
            public var excludePullRequests: Bool?

            public enum Status: String, Codable, CaseIterable {
                case completed
                case actionRequired = "action_required"
                case cancelled
                case failure
                case neutral
                case skipped
                case stale
                case success
                case timedOut = "timed_out"
                case inProgress = "in_progress"
                case queued
                case requested
                case waiting
            }

            public init(actor: String? = nil, branch: String? = nil, event: String? = nil, status: Status? = nil, perPage: Int? = nil, page: Int? = nil, created: Date? = nil, excludePullRequests: Bool? = nil) {
                self.actor = actor
                self.branch = branch
                self.event = event
                self.status = status
                self.perPage = perPage
                self.page = page
                self.created = created
                self.excludePullRequests = excludePullRequests
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(actor, forKey: "actor")
                encoder.encode(branch, forKey: "branch")
                encoder.encode(event, forKey: "event")
                encoder.encode(status, forKey: "status")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(created, forKey: "created")
                encoder.encode(excludePullRequests, forKey: "exclude_pull_requests")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs {
    public func runID(_ runID: Int) -> WithRunID {
        WithRunID(path: "\(path)/\(runID)")
    }

    public struct WithRunID {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}`
        public let path: String

        /// Get a workflow run
        ///
        /// Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-workflow-run)
        public func get(excludePullRequests: Bool? = nil) -> Request<OctoKit.WorkflowRun> {
            .get(path, query: makeGetQuery(excludePullRequests))
        }

        private func makeGetQuery(_ excludePullRequests: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(excludePullRequests, forKey: "exclude_pull_requests")
            return encoder.items
        }

        /// Delete a workflow run
        ///
        /// Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
        /// private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
        /// this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-a-workflow-run)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var approvals: Approvals {
        Approvals(path: path + "/approvals")
    }

    public struct Approvals {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/approvals`
        public let path: String

        /// Get the review history for a workflow run
        ///
        /// Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run)
        public var get: Request<[OctoKit.EnvironmentApprovals]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var approve: Approve {
        Approve(path: path + "/approve")
    }

    public struct Approve {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/approve`
        public let path: String

        /// Approve a workflow run for a fork pull request
        ///
        /// Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request)
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var artifacts: Artifacts {
        Artifacts(path: path + "/artifacts")
    }

    public struct Artifacts {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts`
        public let path: String

        /// List workflow run artifacts
        ///
        /// Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var artifacts: [OctoKit.Artifact]

            public init(totalCount: Int, artifacts: [OctoKit.Artifact]) {
                self.totalCount = totalCount
                self.artifacts = artifacts
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case artifacts
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var attempts: Attempts {
        Attempts(path: path + "/attempts")
    }

    public struct Attempts {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/attempts`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID.Attempts {
    public func attemptNumber(_ attemptNumber: Int) -> WithAttemptNumber {
        WithAttemptNumber(path: "\(path)/\(attemptNumber)")
    }

    public struct WithAttemptNumber {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}`
        public let path: String

        /// Get a workflow run attempt
        ///
        /// Gets a specific workflow run attempt. Anyone with read access to the repository
        /// can use this endpoint. If the repository is private you must use an access token
        /// with the `repo` scope. GitHub Apps must have the `actions:read` permission to
        /// use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-workflow-run-attempt)
        public func get(excludePullRequests: Bool? = nil) -> Request<OctoKit.WorkflowRun> {
            .get(path, query: makeGetQuery(excludePullRequests))
        }

        private func makeGetQuery(_ excludePullRequests: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(excludePullRequests, forKey: "exclude_pull_requests")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID.Attempts.WithAttemptNumber {
    public var jobs: Jobs {
        Jobs(path: path + "/jobs")
    }

    public struct Jobs {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs`
        public let path: String

        /// List jobs for a workflow run attempt
        ///
        /// Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run-attempt)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var jobs: [OctoKit.Job]

            public init(totalCount: Int, jobs: [OctoKit.Job]) {
                self.totalCount = totalCount
                self.jobs = jobs
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case jobs
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID.Attempts.WithAttemptNumber {
    public var logs: Logs {
        Logs(path: path + "/logs")
    }

    public struct Logs {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs`
        public let path: String

        /// Download workflow run attempt logs
        ///
        /// Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
        /// 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
        /// the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
        /// GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#download-workflow-run-attempt-logs)
        public var get: Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var cancel: Cancel {
        Cancel(path: path + "/cancel")
    }

    public struct Cancel {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/cancel`
        public let path: String

        /// Cancel a workflow run
        ///
        /// Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#cancel-a-workflow-run)
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var jobs: Jobs {
        Jobs(path: path + "/jobs")
    }

    public struct Jobs {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/jobs`
        public let path: String

        /// List jobs for a workflow run
        ///
        /// Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var jobs: [OctoKit.Job]

            public init(totalCount: Int, jobs: [OctoKit.Job]) {
                self.totalCount = totalCount
                self.jobs = jobs
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case jobs
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var filter: Filter?
            public var perPage: Int?
            public var page: Int?

            public enum Filter: String, Codable, CaseIterable {
                case latest
                case all
            }

            public init(filter: Filter? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.filter = filter
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var logs: Logs {
        Logs(path: path + "/logs")
    }

    public struct Logs {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/logs`
        public let path: String

        /// Download workflow run logs
        ///
        /// Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
        /// `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
        /// this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
        /// the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#download-workflow-run-logs)
        public var get: Request<Void> {
            .get(path)
        }

        /// Delete workflow run logs
        ///
        /// Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-workflow-run-logs)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var pendingDeployments: PendingDeployments {
        PendingDeployments(path: path + "/pending_deployments")
    }

    public struct PendingDeployments {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`
        public let path: String

        /// Get pending deployments for a workflow run
        ///
        /// Get all deployment environments for a workflow run that are waiting for protection rules to pass.
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run)
        public var get: Request<[OctoKit.PendingDeployment]> {
            .get(path)
        }

        /// Review pending deployments for a workflow run
        ///
        /// Approve or reject pending deployments that are waiting on approval by a required reviewer.
        /// 
        /// Anyone with read access to the repository contents and deployments can use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run)
        public func post(_ body: PostRequest) -> Request<[OctoKit.Deployment]> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The list of environment ids to approve or reject
            ///
            /// Example: [161171787, 161171795]
            public var environmentIDs: [Int]
            /// Whether to approve or reject deployment to the specified environments. Must be one of: `approved` or `rejected`
            ///
            /// Example: "approved"
            public var state: State
            /// A comment to accompany the deployment review
            ///
            /// Example: "Ship it!"
            public var comment: String

            /// Whether to approve or reject deployment to the specified environments. Must be one of: `approved` or `rejected`
            ///
            /// Example: "approved"
            public enum State: String, Codable, CaseIterable {
                case approved
                case rejected
            }

            public init(environmentIDs: [Int], state: State, comment: String) {
                self.environmentIDs = environmentIDs
                self.state = state
                self.comment = comment
            }

            private enum CodingKeys: String, CodingKey {
                case environmentIDs = "environment_ids"
                case state
                case comment
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var rerun: Rerun {
        Rerun(path: path + "/rerun")
    }

    public struct Rerun {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/rerun`
        public let path: String

        /// Re-run a workflow
        ///
        /// Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#re-run-a-workflow)
        @available(*, deprecated, message: "Deprecated")
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var timing: Timing {
        Timing(path: path + "/timing")
    }

    public struct Timing {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/timing`
        public let path: String

        /// Get workflow run usage
        ///
        /// Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-workflow-run-usage)
        public var get: Request<OctoKit.WorkflowRunUsage> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var secrets: Secrets {
        Secrets(path: path + "/secrets")
    }

    public struct Secrets {
        /// Path: `/repos/{owner}/{repo}/actions/secrets`
        public let path: String

        /// List repository secrets
        ///
        /// Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-repository-secrets)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var secrets: [OctoKit.ActionsSecret]

            public init(totalCount: Int, secrets: [OctoKit.ActionsSecret]) {
                self.totalCount = totalCount
                self.secrets = secrets
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case secrets
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Secrets {
    public var publicKey: PublicKey {
        PublicKey(path: path + "/public-key")
    }

    public struct PublicKey {
        /// Path: `/repos/{owner}/{repo}/actions/secrets/public-key`
        public let path: String

        /// Get a repository public key
        ///
        /// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-repository-public-key)
        public var get: Request<OctoKit.ActionsPublicKey> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Secrets {
    public func secretName(_ secretName: String) -> WithSecretName {
        WithSecretName(path: "\(path)/\(secretName)")
    }

    public struct WithSecretName {
        /// Path: `/repos/{owner}/{repo}/actions/secrets/{secret_name}`
        public let path: String

        /// Get a repository secret
        ///
        /// Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-repository-secret)
        public var get: Request<OctoKit.ActionsSecret> {
            .get(path)
        }

        /// Create or update a repository secret
        ///
        /// Creates or updates a repository secret with an encrypted value. Encrypt your secret using
        /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        /// token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
        /// this endpoint.
        /// 
        /// #### Example encrypting a secret using Node.js
        /// 
        /// Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
        /// 
        /// ```
        /// const sodium = require('tweetsodium');
        /// 
        /// const key = "base64-encoded-public-key";
        /// const value = "plain-text-secret";
        /// 
        /// // Convert the message and key to Uint8Array's (Buffer implements that interface)
        /// const messageBytes = Buffer.from(value);
        /// const keyBytes = Buffer.from(key, 'base64');
        /// 
        /// // Encrypt using LibSodium.
        /// const encryptedBytes = sodium.seal(messageBytes, keyBytes);
        /// 
        /// // Base64 the encrypted secret
        /// const encrypted = Buffer.from(encryptedBytes).toString('base64');
        /// 
        /// console.log(encrypted);
        /// ```
        /// 
        /// 
        /// #### Example encrypting a secret using Python
        /// 
        /// Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
        /// 
        /// ```
        /// from base64 import b64encode
        /// from nacl import encoding, public
        /// 
        /// def encrypt(public_key: str, secret_value: str) -> str:
        ///   """Encrypt a Unicode string using the public key."""
        ///   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
        ///   sealed_box = public.SealedBox(public_key)
        ///   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
        ///   return b64encode(encrypted).decode("utf-8")
        /// ```
        /// 
        /// #### Example encrypting a secret using C#
        /// 
        /// Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        /// 
        /// ```
        /// var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
        /// var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
        /// 
        /// var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        /// 
        /// Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        /// ```
        /// 
        /// #### Example encrypting a secret using Ruby
        /// 
        /// Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        /// 
        /// ```ruby
        /// require "rbnacl"
        /// require "base64"
        /// 
        /// key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
        /// public_key = RbNaCl::PublicKey.new(key)
        /// 
        /// box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        /// encrypted_secret = box.encrypt("my_secret")
        /// 
        /// # Print the base64 encoded secret
        /// puts Base64.strict_encode64(encrypted_secret)
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret)
        public func put(_ body: PutRequest) -> Request<Void> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
            public var encryptedValue: String?
            /// ID of the key you used to encrypt the secret.
            public var keyID: String?

            public init(encryptedValue: String? = nil, keyID: String? = nil) {
                self.encryptedValue = encryptedValue
                self.keyID = keyID
            }

            private enum CodingKeys: String, CodingKey {
                case encryptedValue = "encrypted_value"
                case keyID = "key_id"
            }
        }

        /// Delete a repository secret
        ///
        /// Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-a-repository-secret)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var workflows: Workflows {
        Workflows(path: path + "/workflows")
    }

    public struct Workflows {
        /// Path: `/repos/{owner}/{repo}/actions/workflows`
        public let path: String

        /// List repository workflows
        ///
        /// Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-repository-workflows)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var workflows: [OctoKit.Workflow]

            public init(totalCount: Int, workflows: [OctoKit.Workflow]) {
                self.totalCount = totalCount
                self.workflows = workflows
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case workflows
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows {
    public func workflowID(_ workflowID: String) -> WithWorkflowID {
        WithWorkflowID(path: "\(path)/\(workflowID)")
    }

    public struct WithWorkflowID {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}`
        public let path: String

        /// Get a workflow
        ///
        /// Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-workflow)
        public var get: Request<OctoKit.Workflow> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var disable: Disable {
        Disable(path: path + "/disable")
    }

    public struct Disable {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable`
        public let path: String

        /// Disable a workflow
        ///
        /// Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#disable-a-workflow)
        public var put: Request<Void> {
            .put(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var dispatches: Dispatches {
        Dispatches(path: path + "/dispatches")
    }

    public struct Dispatches {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches`
        public let path: String

        /// Create a workflow dispatch event
        ///
        /// You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
        /// 
        /// You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event)
        public func post(_ body: PostRequest) -> Request<Void> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The git reference for the workflow. The reference can be a branch or tag name.
            public var ref: String
            /// Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
            public var inputs: [String: String]?

            public init(ref: String, inputs: [String: String]? = nil) {
                self.ref = ref
                self.inputs = inputs
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var enable: Enable {
        Enable(path: path + "/enable")
    }

    public struct Enable {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable`
        public let path: String

        /// Enable a workflow
        ///
        /// Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#enable-a-workflow)
        public var put: Request<Void> {
            .put(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var runs: Runs {
        Runs(path: path + "/runs")
    }

    public struct Runs {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs`
        public let path: String

        /// List workflow runs
        ///
        /// List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-workflow-runs)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var workflowRuns: [OctoKit.WorkflowRun]

            public init(totalCount: Int, workflowRuns: [OctoKit.WorkflowRun]) {
                self.totalCount = totalCount
                self.workflowRuns = workflowRuns
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case workflowRuns = "workflow_runs"
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var actor: String?
            public var branch: String?
            public var event: String?
            public var status: Status?
            public var perPage: Int?
            public var page: Int?
            public var created: Date?
            public var excludePullRequests: Bool?

            public enum Status: String, Codable, CaseIterable {
                case completed
                case actionRequired = "action_required"
                case cancelled
                case failure
                case neutral
                case skipped
                case stale
                case success
                case timedOut = "timed_out"
                case inProgress = "in_progress"
                case queued
                case requested
                case waiting
            }

            public init(actor: String? = nil, branch: String? = nil, event: String? = nil, status: Status? = nil, perPage: Int? = nil, page: Int? = nil, created: Date? = nil, excludePullRequests: Bool? = nil) {
                self.actor = actor
                self.branch = branch
                self.event = event
                self.status = status
                self.perPage = perPage
                self.page = page
                self.created = created
                self.excludePullRequests = excludePullRequests
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(actor, forKey: "actor")
                encoder.encode(branch, forKey: "branch")
                encoder.encode(event, forKey: "event")
                encoder.encode(status, forKey: "status")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(created, forKey: "created")
                encoder.encode(excludePullRequests, forKey: "exclude_pull_requests")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var timing: Timing {
        Timing(path: path + "/timing")
    }

    public struct Timing {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing`
        public let path: String

        /// Get workflow usage
        ///
        /// Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
        /// 
        /// You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-workflow-usage)
        public var get: Request<OctoKit.WorkflowUsage> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var assignees: Assignees {
        Assignees(path: path + "/assignees")
    }

    public struct Assignees {
        /// Path: `/repos/{owner}/{repo}/assignees`
        public let path: String

        /// List assignees
        ///
        /// Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-assignees)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Assignees {
    public func assignee(_ assignee: String) -> WithAssignee {
        WithAssignee(path: "\(path)/\(assignee)")
    }

    public struct WithAssignee {
        /// Path: `/repos/{owner}/{repo}/assignees/{assignee}`
        public let path: String

        /// Check if a user can be assigned
        ///
        /// Checks if a user has permission to be assigned to an issue in this repository.
        /// 
        /// If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
        /// 
        /// Otherwise a `404` status code is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned)
        public var get: Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var autolinks: Autolinks {
        Autolinks(path: path + "/autolinks")
    }

    public struct Autolinks {
        /// Path: `/repos/{owner}/{repo}/autolinks`
        public let path: String

        /// List all autolinks of a repository
        ///
        /// This returns a list of autolinks configured for the given repository.
        /// 
        /// Information about autolinks are only available to repository administrators.
        ///
        /// [API method documentation](https://docs.github.com/v3/repos#list-autolinks)
        public func get(page: Int? = nil) -> Request<[OctoKit.Autolink]> {
            .get(path, query: makeGetQuery(page))
        }

        private func makeGetQuery(_ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create an autolink reference for a repository
        ///
        /// Users with admin access to the repository can create an autolink.
        ///
        /// [API method documentation](https://docs.github.com/v3/repos#create-an-autolink)
        public func post(_ body: PostRequest) -> Request<OctoKit.Autolink> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.
            public var keyPrefix: String
            /// The URL must contain <num> for the reference number.
            public var urlTemplate: String

            public init(keyPrefix: String, urlTemplate: String) {
                self.keyPrefix = keyPrefix
                self.urlTemplate = urlTemplate
            }

            private enum CodingKeys: String, CodingKey {
                case keyPrefix = "key_prefix"
                case urlTemplate = "url_template"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Autolinks {
    public func autolinkID(_ autolinkID: Int) -> WithAutolinkID {
        WithAutolinkID(path: "\(path)/\(autolinkID)")
    }

    public struct WithAutolinkID {
        /// Path: `/repos/{owner}/{repo}/autolinks/{autolink_id}`
        public let path: String

        /// Get an autolink reference of a repository
        ///
        /// This returns a single autolink reference by ID that was configured for the given repository.
        /// 
        /// Information about autolinks are only available to repository administrators.
        ///
        /// [API method documentation](https://docs.github.com/v3/repos#get-autolink)
        public var get: Request<OctoKit.Autolink> {
            .get(path)
        }

        /// Delete an autolink reference from a repository
        ///
        /// This deletes a single autolink reference by ID that was configured for the given repository.
        /// 
        /// Information about autolinks are only available to repository administrators.
        ///
        /// [API method documentation](https://docs.github.com/v3/repos#delete-autolink)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var automatedSecurityFixes: AutomatedSecurityFixes {
        AutomatedSecurityFixes(path: path + "/automated-security-fixes")
    }

    public struct AutomatedSecurityFixes {
        /// Path: `/repos/{owner}/{repo}/automated-security-fixes`
        public let path: String

        /// Enable automated security fixes
        ///
        /// Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#enable-automated-security-fixes)
        public var put: Request<Void> {
            .put(path)
        }

        /// Disable automated security fixes
        ///
        /// Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#disable-automated-security-fixes)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var branches: Branches {
        Branches(path: path + "/branches")
    }

    public struct Branches {
        /// Path: `/repos/{owner}/{repo}/branches`
        public let path: String

        /// List branches
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-branches)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.ShortBranch]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var isProtected: Bool?
            public var perPage: Int?
            public var page: Int?

            public init(isProtected: Bool? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.isProtected = isProtected
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isProtected, forKey: "protected")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches {
    public func branch(_ branch: String) -> WithBranch {
        WithBranch(path: "\(path)/\(branch)")
    }

    public struct WithBranch {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}`
        public let path: String

        /// Get a branch
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-branch)
        public var get: Request<OctoKit.BranchWithProtection> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch {
    public var protection: Protection {
        Protection(path: path + "/protection")
    }

    public struct Protection {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection`
        public let path: String

        /// Get branch protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-branch-protection)
        public var get: Request<OctoKit.BranchProtection> {
            .get(path)
        }

        /// Update branch protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Protecting a branch requires admin or owner permissions to the repository.
        /// 
        /// **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
        /// 
        /// **Note**: The list of users, apps, and teams in total is limited to 100 items.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-branch-protection)
        public func put(_ body: PutRequest) -> Request<OctoKit.ProtectedBranch> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// Require status checks to pass before merging. Set to `null` to disable.
            public var requiredStatusChecks: RequiredStatusChecks?
            /// Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
            public var enforceAdmins: Bool?
            /// Require at least one approving review on a pull request, before merging. Set to `null` to disable.
            public var requiredPullRequestReviews: RequiredPullRequestReviews?
            /// Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
            public var restrictions: Restrictions?
            /// Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
            public var isRequiredLinearHistory: Bool?
            /// Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
            public var allowForcePushes: Bool?
            /// Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
            public var allowDeletions: Bool?
            /// Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
            public var isRequiredConversationResolution: Bool?

            /// Require status checks to pass before merging. Set to `null` to disable.
            public struct RequiredStatusChecks: Encodable {
                /// Require branches to be up to date before merging.
                public var isStrict: Bool
                /// **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
                ///
                /// - warning: Deprecated.
                public var contexts: [String]
                /// The list of status checks to require in order to merge into this branch.
                public var checks: [Check]?

                public struct Check: Encodable {
                    /// The name of the required check
                    public var context: String
                    /// The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
                    public var appID: Int?

                    public init(context: String, appID: Int? = nil) {
                        self.context = context
                        self.appID = appID
                    }

                    private enum CodingKeys: String, CodingKey {
                        case context
                        case appID = "app_id"
                    }
                }

                public init(isStrict: Bool, contexts: [String], checks: [Check]? = nil) {
                    self.isStrict = isStrict
                    self.contexts = contexts
                    self.checks = checks
                }

                private enum CodingKeys: String, CodingKey {
                    case isStrict = "strict"
                    case contexts
                    case checks
                }
            }

            /// Require at least one approving review on a pull request, before merging. Set to `null` to disable.
            public struct RequiredPullRequestReviews: Encodable {
                /// Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
                public var dismissalRestrictions: DismissalRestrictions?
                /// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
                public var dismissStaleReviews: Bool?
                /// Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them.
                public var requireCodeOwnerReviews: Bool?
                /// Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
                public var requiredApprovingReviewCount: Int?

                /// Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
                public struct DismissalRestrictions: Encodable {
                    /// The list of user `login`s with dismissal access
                    public var users: [String]?
                    /// The list of team `slug`s with dismissal access
                    public var teams: [String]?

                    public init(users: [String]? = nil, teams: [String]? = nil) {
                        self.users = users
                        self.teams = teams
                    }
                }

                public init(dismissalRestrictions: DismissalRestrictions? = nil, dismissStaleReviews: Bool? = nil, requireCodeOwnerReviews: Bool? = nil, requiredApprovingReviewCount: Int? = nil) {
                    self.dismissalRestrictions = dismissalRestrictions
                    self.dismissStaleReviews = dismissStaleReviews
                    self.requireCodeOwnerReviews = requireCodeOwnerReviews
                    self.requiredApprovingReviewCount = requiredApprovingReviewCount
                }

                private enum CodingKeys: String, CodingKey {
                    case dismissalRestrictions = "dismissal_restrictions"
                    case dismissStaleReviews = "dismiss_stale_reviews"
                    case requireCodeOwnerReviews = "require_code_owner_reviews"
                    case requiredApprovingReviewCount = "required_approving_review_count"
                }
            }

            /// Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
            public struct Restrictions: Encodable {
                /// The list of user `login`s with push access
                public var users: [String]
                /// The list of team `slug`s with push access
                public var teams: [String]
                /// The list of app `slug`s with push access
                public var apps: [String]?

                public init(users: [String], teams: [String], apps: [String]? = nil) {
                    self.users = users
                    self.teams = teams
                    self.apps = apps
                }
            }

            public init(requiredStatusChecks: RequiredStatusChecks? = nil, enforceAdmins: Bool? = nil, requiredPullRequestReviews: RequiredPullRequestReviews? = nil, restrictions: Restrictions? = nil, isRequiredLinearHistory: Bool? = nil, allowForcePushes: Bool? = nil, allowDeletions: Bool? = nil, isRequiredConversationResolution: Bool? = nil) {
                self.requiredStatusChecks = requiredStatusChecks
                self.enforceAdmins = enforceAdmins
                self.requiredPullRequestReviews = requiredPullRequestReviews
                self.restrictions = restrictions
                self.isRequiredLinearHistory = isRequiredLinearHistory
                self.allowForcePushes = allowForcePushes
                self.allowDeletions = allowDeletions
                self.isRequiredConversationResolution = isRequiredConversationResolution
            }

            private enum CodingKeys: String, CodingKey {
                case requiredStatusChecks = "required_status_checks"
                case enforceAdmins = "enforce_admins"
                case requiredPullRequestReviews = "required_pull_request_reviews"
                case restrictions
                case isRequiredLinearHistory = "required_linear_history"
                case allowForcePushes = "allow_force_pushes"
                case allowDeletions = "allow_deletions"
                case isRequiredConversationResolution = "required_conversation_resolution"
            }
        }

        /// Delete branch protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-branch-protection)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var enforceAdmins: EnforceAdmins {
        EnforceAdmins(path: path + "/enforce_admins")
    }

    public struct EnforceAdmins {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`
        public let path: String

        /// Get admin branch protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-admin-branch-protection)
        public var get: Request<OctoKit.ProtectedBranchAdminEnforced> {
            .get(path)
        }

        /// Set admin branch protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#set-admin-branch-protection)
        public var post: Request<OctoKit.ProtectedBranchAdminEnforced> {
            .post(path)
        }

        /// Delete admin branch protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-admin-branch-protection)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var requiredPullRequestReviews: RequiredPullRequestReviews {
        RequiredPullRequestReviews(path: path + "/required_pull_request_reviews")
    }

    public struct RequiredPullRequestReviews {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`
        public let path: String

        /// Get pull request review protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-pull-request-review-protection)
        public var get: Request<OctoKit.ProtectedBranchPullRequestReview> {
            .get(path)
        }

        /// Update pull request review protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
        /// 
        /// **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-pull-request-review-protection)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.ProtectedBranchPullRequestReview> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
            public var dismissalRestrictions: DismissalRestrictions?
            /// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
            public var dismissStaleReviews: Bool?
            /// Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.
            public var requireCodeOwnerReviews: Bool?
            /// Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
            public var requiredApprovingReviewCount: Int?

            /// Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
            public struct DismissalRestrictions: Encodable {
                /// The list of user `login`s with dismissal access
                public var users: [String]?
                /// The list of team `slug`s with dismissal access
                public var teams: [String]?

                public init(users: [String]? = nil, teams: [String]? = nil) {
                    self.users = users
                    self.teams = teams
                }
            }

            public init(dismissalRestrictions: DismissalRestrictions? = nil, dismissStaleReviews: Bool? = nil, requireCodeOwnerReviews: Bool? = nil, requiredApprovingReviewCount: Int? = nil) {
                self.dismissalRestrictions = dismissalRestrictions
                self.dismissStaleReviews = dismissStaleReviews
                self.requireCodeOwnerReviews = requireCodeOwnerReviews
                self.requiredApprovingReviewCount = requiredApprovingReviewCount
            }

            private enum CodingKeys: String, CodingKey {
                case dismissalRestrictions = "dismissal_restrictions"
                case dismissStaleReviews = "dismiss_stale_reviews"
                case requireCodeOwnerReviews = "require_code_owner_reviews"
                case requiredApprovingReviewCount = "required_approving_review_count"
            }
        }

        /// Delete pull request review protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-pull-request-review-protection)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var requiredSignatures: RequiredSignatures {
        RequiredSignatures(path: path + "/required_signatures")
    }

    public struct RequiredSignatures {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`
        public let path: String

        /// Get commit signature protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
        /// 
        /// **Note**: You must enable branch protection to require signed commits.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-commit-signature-protection)
        public var get: Request<OctoKit.ProtectedBranchAdminEnforced> {
            .get(path)
        }

        /// Create commit signature protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-commit-signature-protection)
        public var post: Request<OctoKit.ProtectedBranchAdminEnforced> {
            .post(path)
        }

        /// Delete commit signature protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-commit-signature-protection)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var requiredStatusChecks: RequiredStatusChecks {
        RequiredStatusChecks(path: path + "/required_status_checks")
    }

    public struct RequiredStatusChecks {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`
        public let path: String

        /// Get status checks protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-status-checks-protection)
        public var get: Request<OctoKit.StatusCheckPolicy> {
            .get(path)
        }

        /// Update status check protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-status-check-protection)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.StatusCheckPolicy> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Require branches to be up to date before merging.
            public var isStrict: Bool?
            /// **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
            ///
            /// - warning: Deprecated.
            public var contexts: [String]?
            /// The list of status checks to require in order to merge into this branch.
            public var checks: [Check]?

            public struct Check: Encodable {
                /// The name of the required check
                public var context: String
                /// The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
                public var appID: Int?

                public init(context: String, appID: Int? = nil) {
                    self.context = context
                    self.appID = appID
                }

                private enum CodingKeys: String, CodingKey {
                    case context
                    case appID = "app_id"
                }
            }

            public init(isStrict: Bool? = nil, contexts: [String]? = nil, checks: [Check]? = nil) {
                self.isStrict = isStrict
                self.contexts = contexts
                self.checks = checks
            }

            private enum CodingKeys: String, CodingKey {
                case isStrict = "strict"
                case contexts
                case checks
            }
        }

        /// Remove status check protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-status-check-protection)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection.RequiredStatusChecks {
    public var contexts: Contexts {
        Contexts(path: path + "/contexts")
    }

    public struct Contexts {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`
        public let path: String

        /// Get all status check contexts
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-all-status-check-contexts)
        public var get: Request<[String]> {
            .get(path)
        }

        /// Add status check contexts
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#add-status-check-contexts)
        public func post(_ body: PostRequest? = nil) -> Request<[String]> {
            .post(path, body: body)
        }

        public enum PostRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "contexts" : [
            ///     "contexts"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Contexts parameter
                public var contexts: [String]

                public init(contexts: [String]) {
                    self.contexts = contexts
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Set status check contexts
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#set-status-check-contexts)
        public func put(_ body: PutRequest? = nil) -> Request<[String]> {
            .put(path, body: body)
        }

        public enum PutRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "contexts" : [
            ///     "contexts"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Contexts parameter
                public var contexts: [String]

                public init(contexts: [String]) {
                    self.contexts = contexts
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Remove status check contexts
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-status-check-contexts)
        public func delete(_ body: DeleteRequest? = nil) -> Request<[String]> {
            .delete(path, body: body)
        }

        public enum DeleteRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "contexts" : [
            ///     "contexts"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Contexts parameter
                public var contexts: [String]

                public init(contexts: [String]) {
                    self.contexts = contexts
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var restrictions: Restrictions {
        Restrictions(path: path + "/restrictions")
    }

    public struct Restrictions {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/restrictions`
        public let path: String

        /// Get access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists who has access to this protected branch.
        /// 
        /// **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-access-restrictions)
        public var get: Request<OctoKit.BranchRestrictionPolicy> {
            .get(path)
        }

        /// Delete access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Disables the ability to restrict who can push to this branch.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-access-restrictions)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection.Restrictions {
    public var apps: Apps {
        Apps(path: path + "/apps")
    }

    public struct Apps {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`
        public let path: String

        /// Get apps with access to the protected branch
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-apps-with-access-to-the-protected-branch)
        public var get: Request<[OctoKit.Integration]> {
            .get(path)
        }

        /// Add app access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
        /// 
        /// | Type    | Description                                                                                                                                                |
        /// | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#add-app-access-restrictions)
        public func post(_ body: PostRequest? = nil) -> Request<[OctoKit.Integration]> {
            .post(path, body: body)
        }

        public enum PostRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "apps" : [
            ///     "my-app"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Apps parameter
                public var apps: [String]

                public init(apps: [String]) {
                    self.apps = apps
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Set app access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
        /// 
        /// | Type    | Description                                                                                                                                                |
        /// | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#set-app-access-restrictions)
        public func put(_ body: PutRequest? = nil) -> Request<[OctoKit.Integration]> {
            .put(path, body: body)
        }

        public enum PutRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "apps" : [
            ///     "my-app"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Apps parameter
                public var apps: [String]

                public init(apps: [String]) {
                    self.apps = apps
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Remove app access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
        /// 
        /// | Type    | Description                                                                                                                                                |
        /// | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-app-access-restrictions)
        public func delete(_ body: DeleteRequest? = nil) -> Request<[OctoKit.Integration]> {
            .delete(path, body: body)
        }

        public enum DeleteRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "apps" : [
            ///     "my-app"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Apps parameter
                public var apps: [String]

                public init(apps: [String]) {
                    self.apps = apps
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection.Restrictions {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`
        public let path: String

        /// Get teams with access to the protected branch
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists the teams who have push access to this branch. The list includes child teams.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-teams-with-access-to-the-protected-branch)
        public var get: Request<[OctoKit.Team]> {
            .get(path)
        }

        /// Add team access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Grants the specified teams push access for this branch. You can also give push access to child teams.
        /// 
        /// | Type    | Description                                                                                                                                |
        /// | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
        /// | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#add-team-access-restrictions)
        public func post(_ body: PostRequest? = nil) -> Request<[OctoKit.Team]> {
            .post(path, body: body)
        }

        public enum PostRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "teams" : [
            ///     "my-team"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Teams parameter
                public var teams: [String]

                public init(teams: [String]) {
                    self.teams = teams
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Set team access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
        /// 
        /// | Type    | Description                                                                                                                                |
        /// | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
        /// | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#set-team-access-restrictions)
        public func put(_ body: PutRequest? = nil) -> Request<[OctoKit.Team]> {
            .put(path, body: body)
        }

        public enum PutRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "teams" : [
            ///     "my-team"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Teams parameter
                public var teams: [String]

                public init(teams: [String]) {
                    self.teams = teams
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Remove team access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Removes the ability of a team to push to this branch. You can also remove push access for child teams.
        /// 
        /// | Type    | Description                                                                                                                                         |
        /// | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-team-access-restrictions)
        public func delete(_ body: DeleteRequest? = nil) -> Request<[OctoKit.Team]> {
            .delete(path, body: body)
        }

        public enum DeleteRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "teams" : [
            ///     "my-team"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Teams parameter
                public var teams: [String]

                public init(teams: [String]) {
                    self.teams = teams
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection.Restrictions {
    public var users: Users {
        Users(path: path + "/users")
    }

    public struct Users {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`
        public let path: String

        /// Get users with access to the protected branch
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists the people who have push access to this branch.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-users-with-access-to-the-protected-branch)
        public var get: Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        /// Add user access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Grants the specified people push access for this branch.
        /// 
        /// | Type    | Description                                                                                                                   |
        /// | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#add-user-access-restrictions)
        public func post(_ body: PostRequest? = nil) -> Request<[OctoKit.SimpleUser]> {
            .post(path, body: body)
        }

        public enum PostRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "users" : [
            ///     "mona"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Users parameter
                public var users: [String]

                public init(users: [String]) {
                    self.users = users
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Set user access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
        /// 
        /// | Type    | Description                                                                                                                   |
        /// | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#set-user-access-restrictions)
        public func put(_ body: PutRequest? = nil) -> Request<[OctoKit.SimpleUser]> {
            .put(path, body: body)
        }

        public enum PutRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "users" : [
            ///     "mona"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Users parameter
                public var users: [String]

                public init(users: [String]) {
                    self.users = users
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        /// Remove user access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Removes the ability of a user to push to this branch.
        /// 
        /// | Type    | Description                                                                                                                                   |
        /// | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-user-access-restrictions)
        public func delete(_ body: DeleteRequest? = nil) -> Request<[OctoKit.SimpleUser]> {
            .delete(path, body: body)
        }

        public enum DeleteRequest: Encodable {
            case object(Object)
            case strings([String])

            /// Example:
            ///
            /// {
            ///   "users" : [
            ///     "mona"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Users parameter
                public var users: [String]

                public init(users: [String]) {
                    self.users = users
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch {
    public var rename: Rename {
        Rename(path: path + "/rename")
    }

    public struct Rename {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/rename`
        public let path: String

        /// Rename a branch
        ///
        /// Renames a branch in a repository.
        /// 
        /// **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
        /// 
        /// The permissions required to use this endpoint depends on whether you are renaming the default branch.
        /// 
        /// To rename a non-default branch:
        /// 
        /// * Users must have push access.
        /// * GitHub Apps must have the `contents:write` repository permission.
        /// 
        /// To rename the default branch:
        /// 
        /// * Users must have admin or owner permissions.
        /// * GitHub Apps must have the `administration:write` repository permission.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#rename-a-branch)
        public func post(newName: String) -> Request<OctoKit.BranchWithProtection> {
            .post(path, body: ["new_name": newName])
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var checkRuns: CheckRuns {
        CheckRuns(path: path + "/check-runs")
    }

    public struct CheckRuns {
        /// Path: `/repos/{owner}/{repo}/check-runs`
        public let path: String

        /// Create a check run
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
        /// 
        /// Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
        /// 
        /// In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#create-a-check-run)
        public func post(_ body: PostRequest) -> Request<OctoKit.CheckRun> {
            .post(path, body: body)
        }

        public enum PostRequest: Encodable {
            case a(A)
            case b(B)

            public struct A: Encodable {
                public var status: AnyJSON
                public var conclusion: AnyJSON

                public init(status: AnyJSON, conclusion: AnyJSON) {
                    self.status = status
                    self.conclusion = conclusion
                }
            }

            public struct B: Encodable {
                public var status: AnyJSON?

                public init(status: AnyJSON? = nil) {
                    self.status = status
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .a(let value): try container.encode(value)
                case .b(let value): try container.encode(value)
                }
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckRuns {
    public func checkRunID(_ checkRunID: Int) -> WithCheckRunID {
        WithCheckRunID(path: "\(path)/\(checkRunID)")
    }

    public struct WithCheckRunID {
        /// Path: `/repos/{owner}/{repo}/check-runs/{check_run_id}`
        public let path: String

        /// Get a check run
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
        /// 
        /// Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#get-a-check-run)
        public var get: Request<OctoKit.CheckRun> {
            .get(path)
        }

        /// Update a check run
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
        /// 
        /// Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#update-a-check-run)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.CheckRun> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The name of the check. For example, "code-coverage".
            public var name: String?
            /// The URL of the integrator's site that has the full details of the check.
            public var detailsURL: String?
            /// A reference for the run on the integrator's system.
            public var externalID: String?
            /// This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
            public var startedAt: Date?
            /// The current status. Can be one of `queued`, `in_progress`, or `completed`.
            public var status: Status?
            /// **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.  
            /// **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
            public var conclusion: Conclusion?
            /// The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
            public var completedAt: Date?
            /// Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/rest/reference/checks#output-object-1) description.
            public var output: Output?
            /// Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
            public var actions: [Action]?

            /// The current status. Can be one of `queued`, `in_progress`, or `completed`.
            public enum Status: String, Codable, CaseIterable {
                case queued
                case inProgress = "in_progress"
                case completed
            }

            /// **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.  
            /// **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
            public enum Conclusion: String, Codable, CaseIterable {
                case actionRequired = "action_required"
                case cancelled
                case failure
                case neutral
                case success
                case skipped
                case stale
                case timedOut = "timed_out"
            }

            /// Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/rest/reference/checks#output-object-1) description.
            public struct Output: Encodable {
                /// **Required**.
                public var title: String?
                /// Can contain Markdown.
                public var summary: String
                /// Can contain Markdown.
                public var text: String?
                /// Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://help.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
                public var annotations: [Annotation]?
                /// Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
                public var images: [Image]?

                public struct Annotation: Encodable {
                    /// The path of the file to add an annotation to. For example, `assets/css/main.css`.
                    public var path: String
                    /// The start line of the annotation.
                    public var startLine: Int
                    /// The end line of the annotation.
                    public var endLine: Int
                    /// The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                    public var startColumn: Int?
                    /// The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
                    public var endColumn: Int?
                    /// The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                    public var annotationLevel: AnnotationLevel
                    /// A short description of the feedback for these lines of code. The maximum size is 64 KB.
                    public var message: String
                    /// The title that represents the annotation. The maximum size is 255 characters.
                    public var title: String?
                    /// Details about this annotation. The maximum size is 64 KB.
                    public var rawDetails: String?

                    /// The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                    public enum AnnotationLevel: String, Codable, CaseIterable {
                        case notice
                        case warning
                        case failure
                    }

                    public init(path: String, startLine: Int, endLine: Int, startColumn: Int? = nil, endColumn: Int? = nil, annotationLevel: AnnotationLevel, message: String, title: String? = nil, rawDetails: String? = nil) {
                        self.path = path
                        self.startLine = startLine
                        self.endLine = endLine
                        self.startColumn = startColumn
                        self.endColumn = endColumn
                        self.annotationLevel = annotationLevel
                        self.message = message
                        self.title = title
                        self.rawDetails = rawDetails
                    }

                    private enum CodingKeys: String, CodingKey {
                        case path
                        case startLine = "start_line"
                        case endLine = "end_line"
                        case startColumn = "start_column"
                        case endColumn = "end_column"
                        case annotationLevel = "annotation_level"
                        case message
                        case title
                        case rawDetails = "raw_details"
                    }
                }

                public struct Image: Encodable {
                    /// The alternative text for the image.
                    public var alt: String
                    /// The full URL of the image.
                    public var imageURL: String
                    /// A short image description.
                    public var caption: String?

                    public init(alt: String, imageURL: String, caption: String? = nil) {
                        self.alt = alt
                        self.imageURL = imageURL
                        self.caption = caption
                    }

                    private enum CodingKeys: String, CodingKey {
                        case alt
                        case imageURL = "image_url"
                        case caption
                    }
                }

                public init(title: String? = nil, summary: String, text: String? = nil, annotations: [Annotation]? = nil, images: [Image]? = nil) {
                    self.title = title
                    self.summary = summary
                    self.text = text
                    self.annotations = annotations
                    self.images = images
                }
            }

            public struct Action: Encodable {
                /// The text to be displayed on a button in the web UI. The maximum size is 20 characters.
                public var label: String
                /// A short explanation of what this action would do. The maximum size is 40 characters.
                public var description: String
                /// A reference for the action on the integrator's system. The maximum size is 20 characters.
                public var identifier: String?
                public var identifie: AnyJSON

                public init(label: String, description: String, identifier: String? = nil, identifie: AnyJSON) {
                    self.label = label
                    self.description = description
                    self.identifier = identifier
                    self.identifie = identifie
                }
            }

            public init(name: String? = nil, detailsURL: String? = nil, externalID: String? = nil, startedAt: Date? = nil, status: Status? = nil, conclusion: Conclusion? = nil, completedAt: Date? = nil, output: Output? = nil, actions: [Action]? = nil) {
                self.name = name
                self.detailsURL = detailsURL
                self.externalID = externalID
                self.startedAt = startedAt
                self.status = status
                self.conclusion = conclusion
                self.completedAt = completedAt
                self.output = output
                self.actions = actions
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case detailsURL = "details_url"
                case externalID = "external_id"
                case startedAt = "started_at"
                case status
                case conclusion
                case completedAt = "completed_at"
                case output
                case actions
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckRuns.WithCheckRunID {
    public var annotations: Annotations {
        Annotations(path: path + "/annotations")
    }

    public struct Annotations {
        /// Path: `/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations`
        public let path: String

        /// List check run annotations
        ///
        /// Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#list-check-run-annotations)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.CheckAnnotation]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckRuns.WithCheckRunID {
    public var rerequest: Rerequest {
        Rerequest(path: path + "/rerequest")
    }

    public struct Rerequest {
        /// Path: `/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest`
        public let path: String

        /// Rerequest a check run
        ///
        /// Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
        /// 
        /// To rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#rerequest-a-check-run)
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var checkSuites: CheckSuites {
        CheckSuites(path: path + "/check-suites")
    }

    public struct CheckSuites {
        /// Path: `/repos/{owner}/{repo}/check-suites`
        public let path: String

        /// Create a check suite
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
        /// 
        /// By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#create-a-check-suite)
        public func post(headSha: String) -> Request<OctoKit.CheckSuite> {
            .post(path, body: ["head_sha": headSha])
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckSuites {
    public var preferences: Preferences {
        Preferences(path: path + "/preferences")
    }

    public struct Preferences {
        /// Path: `/repos/{owner}/{repo}/check-suites/preferences`
        public let path: String

        /// Update repository preferences for check suites
        ///
        /// Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)
        public func patch(autoTriggerChecks: [PatchRequest.AutoTriggerCheck]? = nil) -> Request<OctoKit.CheckSuitePreference> {
            .patch(path, body: PatchRequest(autoTriggerChecks: autoTriggerChecks))
        }

        public struct PatchRequest: Encodable {
            /// Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details.
            public var autoTriggerChecks: [AutoTriggerCheck]?

            public struct AutoTriggerCheck: Encodable {
                /// The `id` of the GitHub App.
                public var appID: Int
                /// Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
                public var isSetting: Bool

                public init(appID: Int, isSetting: Bool) {
                    self.appID = appID
                    self.isSetting = isSetting
                }

                private enum CodingKeys: String, CodingKey {
                    case appID = "app_id"
                    case isSetting = "setting"
                }
            }

            public init(autoTriggerChecks: [AutoTriggerCheck]? = nil) {
                self.autoTriggerChecks = autoTriggerChecks
            }

            private enum CodingKeys: String, CodingKey {
                case autoTriggerChecks = "auto_trigger_checks"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckSuites {
    public func checkSuiteID(_ checkSuiteID: Int) -> WithCheckSuiteID {
        WithCheckSuiteID(path: "\(path)/\(checkSuiteID)")
    }

    public struct WithCheckSuiteID {
        /// Path: `/repos/{owner}/{repo}/check-suites/{check_suite_id}`
        public let path: String

        /// Get a check suite
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
        /// 
        /// Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#get-a-check-suite)
        public var get: Request<OctoKit.CheckSuite> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckSuites.WithCheckSuiteID {
    public var checkRuns: CheckRuns {
        CheckRuns(path: path + "/check-runs")
    }

    public struct CheckRuns {
        /// Path: `/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs`
        public let path: String

        /// List check runs in a check suite
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
        /// 
        /// Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var checkRuns: [OctoKit.CheckRun]

            public init(totalCount: Int, checkRuns: [OctoKit.CheckRun]) {
                self.totalCount = totalCount
                self.checkRuns = checkRuns
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case checkRuns = "check_runs"
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var checkName: String?
            public var status: Status?
            public var filter: Filter?
            public var perPage: Int?
            public var page: Int?

            public enum Status: String, Codable, CaseIterable {
                case queued
                case inProgress = "in_progress"
                case completed
            }

            public enum Filter: String, Codable, CaseIterable {
                case latest
                case all
            }

            public init(checkName: String? = nil, status: Status? = nil, filter: Filter? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.checkName = checkName
                self.status = status
                self.filter = filter
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(checkName, forKey: "check_name")
                encoder.encode(status, forKey: "status")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckSuites.WithCheckSuiteID {
    public var rerequest: Rerequest {
        Rerequest(path: path + "/rerequest")
    }

    public struct Rerequest {
        /// Path: `/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest`
        public let path: String

        /// Rerequest a check suite
        ///
        /// Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
        /// 
        /// To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#rerequest-a-check-suite)
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var codeScanning: CodeScanning {
        CodeScanning(path: path + "/code-scanning")
    }

    public struct CodeScanning {
        /// Path: `/repos/{owner}/{repo}/code-scanning`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning {
    public var alerts: Alerts {
        Alerts(path: path + "/alerts")
    }

    public struct Alerts {
        /// Path: `/repos/{owner}/{repo}/code-scanning/alerts`
        public let path: String

        /// List code scanning alerts for a repository
        ///
        /// Lists all open code scanning alerts for the default branch (usually `main`
        /// or `master`). You must use an access token with the `security_events` scope to use
        /// this endpoint with private repos, the `public_repo` scope also grants permission to read
        /// security events on public repos only. GitHub Apps must have the `security_events` read
        /// permission to use this endpoint.
        /// 
        /// The response includes a `most_recent_instance` object.
        /// This provides details of the most recent instance of this alert
        /// for the default branch or for the specified Git reference
        /// (if you used `ref` in the request).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.CodeScanningAlertItems]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            /// The name of the tool used to generate the code scanning analysis.
            public var toolName: String?
            /// The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
            public var toolGuid: String?
            public var page: Int?
            public var perPage: Int?
            /// The full Git reference, formatted as `refs/heads/<branch name>`,
            /// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
            public var ref: String?
            public var direction: Direction?
            public var sort: Sort?
            /// State of a code scanning alert.
            public var state: State?

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case number
            }

            /// State of a code scanning alert.
            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case dismissed
                case fixed
            }

            public init(toolName: String? = nil, toolGuid: String? = nil, page: Int? = nil, perPage: Int? = nil, ref: String? = nil, direction: Direction? = nil, sort: Sort? = nil, state: State? = nil) {
                self.toolName = toolName
                self.toolGuid = toolGuid
                self.page = page
                self.perPage = perPage
                self.ref = ref
                self.direction = direction
                self.sort = sort
                self.state = state
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(toolName, forKey: "tool_name")
                encoder.encode(toolGuid, forKey: "tool_guid")
                encoder.encode(page, forKey: "page")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(ref, forKey: "ref")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(state, forKey: "state")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning.Alerts {
    public func alertNumber(_ alertNumber: Int) -> WithAlertNumber {
        WithAlertNumber(path: "\(path)/\(alertNumber)")
    }

    public struct WithAlertNumber {
        /// Path: `/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}`
        public let path: String

        /// Get a code scanning alert
        ///
        /// Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
        /// 
        /// **Deprecation notice**:
        /// The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-alert)
        public var get: Request<OctoKit.CodeScanningAlert> {
            .get(path)
        }

        /// Update a code scanning alert
        ///
        /// Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#update-a-code-scanning-alert)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.CodeScanningAlert> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
            public var state: OctoKit.CodeScanningAlertSetState
            /// **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
            public var dismissedReason: OctoKit.CodeScanningAlertDismissedReason?

            public init(state: OctoKit.CodeScanningAlertSetState, dismissedReason: OctoKit.CodeScanningAlertDismissedReason? = nil) {
                self.state = state
                self.dismissedReason = dismissedReason
            }

            private enum CodingKeys: String, CodingKey {
                case state
                case dismissedReason = "dismissed_reason"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning.Alerts.WithAlertNumber {
    public var instances: Instances {
        Instances(path: path + "/instances")
    }

    public struct Instances {
        /// Path: `/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances`
        public let path: String

        /// List instances of a code scanning alert
        ///
        /// Lists all instances of the specified code scanning alert.
        /// You must use an access token with the `security_events` scope to use this endpoint with private repos,
        /// the `public_repo` scope also grants permission to read security events on public repos only.
        /// GitHub Apps must have the `security_events` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.CodeScanningAlertInstance]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var page: Int?
            public var perPage: Int?
            /// The full Git reference, formatted as `refs/heads/<branch name>`,
            /// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
            public var ref: String?

            public init(page: Int? = nil, perPage: Int? = nil, ref: String? = nil) {
                self.page = page
                self.perPage = perPage
                self.ref = ref
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(page, forKey: "page")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(ref, forKey: "ref")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning {
    public var analyses: Analyses {
        Analyses(path: path + "/analyses")
    }

    public struct Analyses {
        /// Path: `/repos/{owner}/{repo}/code-scanning/analyses`
        public let path: String

        /// List code scanning analyses for a repository
        ///
        /// Lists the details of all code scanning analyses for a repository,
        /// starting with the most recent.
        /// The response is paginated and you can use the `page` and `per_page` parameters
        /// to list the analyses you're interested in.
        /// By default 30 analyses are listed per page.
        /// 
        /// The `rules_count` field in the response give the number of rules
        /// that were run in the analysis.
        /// For very old analyses this data is not available,
        /// and `0` is returned in this field.
        /// 
        /// You must use an access token with the `security_events` scope to use this endpoint with private repos,
        /// the `public_repo` scope also grants permission to read security events on public repos only.
        /// GitHub Apps must have the `security_events` read permission to use this endpoint.
        /// 
        /// **Deprecation notice**:
        /// The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.CodeScanningAnalysis]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            /// The name of the tool used to generate the code scanning analysis.
            public var toolName: String?
            /// The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
            public var toolGuid: String?
            public var page: Int?
            public var perPage: Int?
            /// The full Git reference, formatted as `refs/heads/<branch name>`,
            /// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
            public var ref: String?
            /// An identifier for the upload.
            ///
            /// Example: "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53"
            public var sarifID: String?

            public init(toolName: String? = nil, toolGuid: String? = nil, page: Int? = nil, perPage: Int? = nil, ref: String? = nil, sarifID: String? = nil) {
                self.toolName = toolName
                self.toolGuid = toolGuid
                self.page = page
                self.perPage = perPage
                self.ref = ref
                self.sarifID = sarifID
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(toolName, forKey: "tool_name")
                encoder.encode(toolGuid, forKey: "tool_guid")
                encoder.encode(page, forKey: "page")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(ref, forKey: "ref")
                encoder.encode(sarifID, forKey: "sarif_id")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning.Analyses {
    public func analysisID(_ analysisID: Int) -> WithAnalysisID {
        WithAnalysisID(path: "\(path)/\(analysisID)")
    }

    public struct WithAnalysisID {
        /// Path: `/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}`
        public let path: String

        /// Get a code scanning analysis for a repository
        ///
        /// Gets a specified code scanning analysis for a repository.
        /// You must use an access token with the `security_events` scope to use this endpoint with private repos,
        /// the `public_repo` scope also grants permission to read security events on public repos only.
        /// GitHub Apps must have the `security_events` read permission to use this endpoint.
        /// 
        /// The default JSON response contains fields that describe the analysis.
        /// This includes the Git reference and commit SHA to which the analysis relates,
        /// the datetime of the analysis, the name of the code scanning tool,
        /// and the number of alerts.
        /// 
        /// The `rules_count` field in the default response give the number of rules
        /// that were run in the analysis.
        /// For very old analyses this data is not available,
        /// and `0` is returned in this field.
        /// 
        /// If you use the Accept header `application/sarif+json`,
        /// the response contains the analysis data that was uploaded.
        /// This is formatted as
        /// [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)
        public var get: Request<OctoKit.CodeScanningAnalysis> {
            .get(path)
        }

        /// Delete a code scanning analysis from a repository
        ///
        /// Deletes a specified code scanning analysis from a repository. For
        /// private repositories, you must use an access token with the `repo` scope. For public repositories,
        /// you must use an access token with `public_repo` scope.
        /// GitHub Apps must have the `security_events` write permission to use this endpoint.
        /// 
        /// You can delete one analysis at a time.
        /// To delete a series of analyses, start with the most recent analysis and work backwards.
        /// Conceptually, the process is similar to the undo function in a text editor.
        /// 
        /// When you list the analyses for a repository,
        /// one or more will be identified as deletable in the response:
        /// 
        /// ```
        /// "deletable": true
        /// ```
        /// 
        /// An analysis is deletable when it's the most recent in a set of analyses.
        /// Typically, a repository will have multiple sets of analyses
        /// for each enabled code scanning tool,
        /// where a set is determined by a unique combination of analysis values:
        /// 
        /// * `ref`
        /// * `tool`
        /// * `analysis_key`
        /// * `environment`
        /// 
        /// If you attempt to delete an analysis that is not the most recent in a set,
        /// you'll get a 400 response with the message:
        /// 
        /// ```
        /// Analysis specified is not deletable.
        /// ```
        /// 
        /// The response from a successful `DELETE` operation provides you with
        /// two alternative URLs for deleting the next analysis in the set:
        /// `next_analysis_url` and `confirm_delete_url`.
        /// Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
        /// in a set. This is a useful option if you want to preserve at least one analysis
        /// for the specified tool in your repository.
        /// Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
        /// When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
        /// in the 200 response is `null`.
        /// 
        /// As an example of the deletion process,
        /// let's imagine that you added a workflow that configured a particular code scanning tool
        /// to analyze the code in a repository. This tool has added 15 analyses:
        /// 10 on the default branch, and another 5 on a topic branch.
        /// You therefore have two separate sets of analyses for this tool.
        /// You've now decided that you want to remove all of the analyses for the tool.
        /// To do this you must make 15 separate deletion requests.
        /// To start, you must find an analysis that's identified as deletable.
        /// Each set of analyses always has one that's identified as deletable.
        /// Having found the deletable analysis for one of the two sets,
        /// delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
        /// Then repeat the process for the second set.
        /// The procedure therefore consists of a nested loop:
        /// 
        /// **Outer loop**:
        /// * List the analyses for the repository, filtered by tool.
        /// * Parse this list to find a deletable analysis. If found:
        /// 
        ///   **Inner loop**:
        ///   * Delete the identified analysis.
        ///   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
        /// 
        /// The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository)
        public func delete(confirmDelete: String? = nil) -> Request<OctoKit.CodeScanningAnalysisDeletion> {
            .delete(path, query: makeDeleteQuery(confirmDelete))
        }

        private func makeDeleteQuery(_ confirmDelete: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(confirmDelete, forKey: "confirm_delete")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning {
    public var sarifs: Sarifs {
        Sarifs(path: path + "/sarifs")
    }

    public struct Sarifs {
        /// Path: `/repos/{owner}/{repo}/code-scanning/sarifs`
        public let path: String

        /// Upload an analysis as SARIF data
        ///
        /// Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
        /// 
        /// There are two places where you can upload code scanning results.
        ///  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
        ///  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
        /// 
        /// You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
        /// 
        /// ```
        /// gzip -c analysis-data.sarif | base64 -w0
        /// ```
        /// 
        /// SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
        /// 
        /// The `202 Accepted`, response includes an `id` value.
        /// You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
        /// For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#upload-a-sarif-file)
        public func post(_ body: PostRequest) -> Request<OctoKit.CodeScanningSarifsReceipt> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The SHA of the commit to which the analysis you are uploading relates.
            public var commitSha: String
            /// The full Git reference, formatted as `refs/heads/<branch name>`,
            /// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
            public var ref: String
            /// A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
            public var sarif: String
            /// The base directory used in the analysis, as it appears in the SARIF file.
            /// This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
            ///
            /// Example: "file:///github/workspace/"
            public var checkoutUri: URL?
            /// The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
            public var startedAt: Date?
            /// The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
            public var toolName: String?

            public init(commitSha: String, ref: String, sarif: String, checkoutUri: URL? = nil, startedAt: Date? = nil, toolName: String? = nil) {
                self.commitSha = commitSha
                self.ref = ref
                self.sarif = sarif
                self.checkoutUri = checkoutUri
                self.startedAt = startedAt
                self.toolName = toolName
            }

            private enum CodingKeys: String, CodingKey {
                case commitSha = "commit_sha"
                case ref
                case sarif
                case checkoutUri = "checkout_uri"
                case startedAt = "started_at"
                case toolName = "tool_name"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning.Sarifs {
    public func sarifID(_ sarifID: String) -> WithSarifID {
        WithSarifID(path: "\(path)/\(sarifID)")
    }

    public struct WithSarifID {
        /// Path: `/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}`
        public let path: String

        /// Get information about a SARIF upload
        ///
        /// Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository)
        public var get: Request<OctoKit.CodeScanningSarifsStatus> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var codespaces: Codespaces {
        Codespaces(path: path + "/codespaces")
    }

    public struct Codespaces {
        /// Path: `/repos/{owner}/{repo}/codespaces`
        public let path: String

        /// List codespaces in a repository for the authenticated user
        ///
        /// Lists the codespaces associated to a specified repository and the authenticated user.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var codespaces: [OctoKit.Codespace]

            public init(totalCount: Int, codespaces: [OctoKit.Codespace]) {
                self.totalCount = totalCount
                self.codespaces = codespaces
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case codespaces
            }
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a codespace in a repository
        ///
        /// Creates a codespace owned by the authenticated user in the specified repository.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#create-a-codespace-in-a-repository)
        public func post(_ body: PostRequest) -> Request<OctoKit.Codespace> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// Git ref (typically a branch name) for this codespace
            public var ref: String?
            /// Location for this codespace
            public var location: String
            /// Machine type to use for this codespace
            public var machine: String?
            /// Working directory for this codespace
            public var workingDirectory: String?
            /// Time in minutes before codespace stops from inactivity
            public var idleTimeoutMinutes: Int?

            public init(ref: String? = nil, location: String, machine: String? = nil, workingDirectory: String? = nil, idleTimeoutMinutes: Int? = nil) {
                self.ref = ref
                self.location = location
                self.machine = machine
                self.workingDirectory = workingDirectory
                self.idleTimeoutMinutes = idleTimeoutMinutes
            }

            private enum CodingKeys: String, CodingKey {
                case ref
                case location
                case machine
                case workingDirectory = "working_directory"
                case idleTimeoutMinutes = "idle_timeout_minutes"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Codespaces {
    public var machines: Machines {
        Machines(path: path + "/machines")
    }

    public struct Machines {
        /// Path: `/repos/{owner}/{repo}/codespaces/machines`
        public let path: String

        /// List available machine types for a repository
        ///
        /// List the machine types available for a given repository based on its configuration.
        /// 
        /// Location is required.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-available-machine-types-for-a-repository)
        public func get(location: String) -> Request<GetResponse> {
            .get(path, query: [("location", location)])
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var machines: [OctoKit.CodespaceMachine]

            public init(totalCount: Int, machines: [OctoKit.CodespaceMachine]) {
                self.totalCount = totalCount
                self.machines = machines
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case machines
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var collaborators: Collaborators {
        Collaborators(path: path + "/collaborators")
    }

    public struct Collaborators {
        /// Path: `/repos/{owner}/{repo}/collaborators`
        public let path: String

        /// List repository collaborators
        ///
        /// For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
        /// 
        /// Team members will include the members of child teams.
        /// 
        /// You must have push access to the repository in order to list collaborators.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-collaborators)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Collaborator]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var affiliation: Affiliation?
            public var perPage: Int?
            public var page: Int?

            public enum Affiliation: String, Codable, CaseIterable {
                case outside
                case direct
                case all
            }

            public init(affiliation: Affiliation? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.affiliation = affiliation
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(affiliation, forKey: "affiliation")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Collaborators {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/repos/{owner}/{repo}/collaborators/{username}`
        public let path: String

        /// Check if a user is a repository collaborator
        ///
        /// For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
        /// 
        /// Team members will include the members of child teams.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#check-if-a-user-is-a-repository-collaborator)
        public var get: Request<Void> {
            .get(path)
        }

        /// Add a repository collaborator
        ///
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        /// 
        /// For more information on permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
        /// 
        /// ```
        /// Cannot assign {member} permission of {role name}
        /// ```
        /// 
        /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        /// 
        /// The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
        /// 
        /// **Rate limits**
        /// 
        /// You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#add-a-repository-collaborator)
        public func put(_ body: PutRequest? = nil) -> Request<OctoKit.RepositoryInvitation> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  
            /// \* `pull` - can pull, but not push to or administer this repository.  
            /// \* `push` - can pull and push, but not administer this repository.  
            /// \* `admin` - can pull, push and administer this repository.  
            /// \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  
            /// \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.  
            /// \* custom repository role name - A custom repository role, if the owning organization has defined any.
            public var permission: Permission?
            /// Example: "push"
            public var permissions: String?

            /// The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  
            /// \* `pull` - can pull, but not push to or administer this repository.  
            /// \* `push` - can pull and push, but not administer this repository.  
            /// \* `admin` - can pull, push and administer this repository.  
            /// \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  
            /// \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.  
            /// \* custom repository role name - A custom repository role, if the owning organization has defined any.
            public enum Permission: String, Codable, CaseIterable {
                case pull
                case push
                case admin
                case maintain
                case triage
            }

            public init(permission: Permission? = nil, permissions: String? = nil) {
                self.permission = permission
                self.permissions = permissions
            }
        }

        /// Remove a repository collaborator
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-a-repository-collaborator)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Collaborators.WithUsername {
    public var permission: Permission {
        Permission(path: path + "/permission")
    }

    public struct Permission {
        /// Path: `/repos/{owner}/{repo}/collaborators/{username}/permission`
        public let path: String

        /// Get repository permissions for a user
        ///
        /// Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-repository-permissions-for-a-user)
        public var get: Request<OctoKit.RepositoryCollaboratorPermission> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/comments`
        public let path: String

        /// List commit comments for a repository
        ///
        /// Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
        /// 
        /// Comments are ordered by ascending ID.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-commit-comments-for-a-repository)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.CommitComment]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Comments {
    public func commentID(_ commentID: Int) -> WithCommentID {
        WithCommentID(path: "\(path)/\(commentID)")
    }

    public struct WithCommentID {
        /// Path: `/repos/{owner}/{repo}/comments/{comment_id}`
        public let path: String

        /// Get a commit comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-commit-comment)
        public var get: Request<OctoKit.CommitComment> {
            .get(path)
        }

        /// Update a commit comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-a-commit-comment)
        public func patch(body: String) -> Request<OctoKit.CommitComment> {
            .patch(path, body: ["body": body])
        }

        /// Delete a commit comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-commit-comment)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Comments.WithCommentID {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/repos/{owner}/{repo}/comments/{comment_id}/reactions`
        public let path: String

        /// List reactions for a commit comment
        ///
        /// List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-commit-comment)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Reaction]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var content: Content?
            public var perPage: Int?
            public var page: Int?

            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.content = content
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(content, forKey: "content")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create reaction for a commit comment
        ///
        /// Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-commit-comment)
        public func post(content: PostRequest.Content) -> Request<OctoKit.Reaction> {
            .post(path, body: PostRequest(content: content))
        }

        public struct PostRequest: Encodable {
            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
            public var content: Content

            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content) {
                self.content = content
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Comments.WithCommentID.Reactions {
    public func reactionID(_ reactionID: Int) -> WithReactionID {
        WithReactionID(path: "\(path)/\(reactionID)")
    }

    public struct WithReactionID {
        /// Path: `/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}`
        public let path: String

        /// Delete a commit comment reaction
        ///
        /// **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
        /// 
        /// Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-a-commit-comment-reaction)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var commits: Commits {
        Commits(path: path + "/commits")
    }

    public struct Commits {
        /// Path: `/repos/{owner}/{repo}/commits`
        public let path: String

        /// List commits
        ///
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-commits)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Commit]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var sha: String?
            public var path: String?
            public var author: String?
            public var since: Date?
            public var until: Date?
            public var perPage: Int?
            public var page: Int?

            public init(sha: String? = nil, path: String? = nil, author: String? = nil, since: Date? = nil, until: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.sha = sha
                self.path = path
                self.author = author
                self.since = since
                self.until = until
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sha, forKey: "sha")
                encoder.encode(path, forKey: "path")
                encoder.encode(author, forKey: "author")
                encoder.encode(since, forKey: "since")
                encoder.encode(until, forKey: "until")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits {
    public func commitSha(_ commitSha: String) -> WithCommitSha {
        WithCommitSha(path: "\(path)/\(commitSha)")
    }

    public struct WithCommitSha {
        /// Path: `/repos/{owner}/{repo}/commits/{commit_sha}`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithCommitSha {
    public var branchesWhereHead: BranchesWhereHead {
        BranchesWhereHead(path: path + "/branches-where-head")
    }

    public struct BranchesWhereHead {
        /// Path: `/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head`
        public let path: String

        /// List branches for HEAD commit
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-branches-for-head-commit)
        public var get: Request<[OctoKit.BranchShort]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithCommitSha {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/commits/{commit_sha}/comments`
        public let path: String

        /// List commit comments
        ///
        /// Use the `:commit_sha` to specify the commit that will have its comments listed.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-commit-comments)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.CommitComment]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a commit comment
        ///
        /// Create a comment for a commit using its `:commit_sha`.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-commit-comment)
        public func post(_ body: PostRequest) -> Request<OctoKit.CommitComment> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The contents of the comment.
            public var body: String
            /// Relative path of the file to comment on.
            public var path: String?
            /// Line index in the diff to comment on.
            public var position: Int?
            /// **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
            public var line: Int?

            public init(body: String, path: String? = nil, position: Int? = nil, line: Int? = nil) {
                self.body = body
                self.path = path
                self.position = position
                self.line = line
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithCommitSha {
    public var pulls: Pulls {
        Pulls(path: path + "/pulls")
    }

    public struct Pulls {
        /// Path: `/repos/{owner}/{repo}/commits/{commit_sha}/pulls`
        public let path: String

        /// List pull requests associated with a commit
        ///
        /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-pull-requests-associated-with-a-commit)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.PullRequestSimple]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: "\(path)/\(ref)")
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/commits/{ref}`
        public let path: String

        /// Get a commit
        ///
        /// Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
        /// 
        /// **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
        /// 
        /// You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
        /// 
        /// To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
        /// 
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-commit)
        public func get(page: Int? = nil, perPage: Int? = nil) -> Request<OctoKit.Commit> {
            .get(path, query: makeGetQuery(page, perPage))
        }

        private func makeGetQuery(_ page: Int?, _ perPage: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(page, forKey: "page")
            encoder.encode(perPage, forKey: "per_page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithRef {
    public var checkRuns: CheckRuns {
        CheckRuns(path: path + "/check-runs")
    }

    public struct CheckRuns {
        /// Path: `/repos/{owner}/{repo}/commits/{ref}/check-runs`
        public let path: String

        /// List check runs for a Git reference
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
        /// 
        /// Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#list-check-runs-for-a-git-reference)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var checkRuns: [OctoKit.CheckRun]

            public init(totalCount: Int, checkRuns: [OctoKit.CheckRun]) {
                self.totalCount = totalCount
                self.checkRuns = checkRuns
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case checkRuns = "check_runs"
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var checkName: String?
            public var status: Status?
            public var filter: Filter?
            public var perPage: Int?
            public var page: Int?
            public var appID: Int?

            public enum Status: String, Codable, CaseIterable {
                case queued
                case inProgress = "in_progress"
                case completed
            }

            public enum Filter: String, Codable, CaseIterable {
                case latest
                case all
            }

            public init(checkName: String? = nil, status: Status? = nil, filter: Filter? = nil, perPage: Int? = nil, page: Int? = nil, appID: Int? = nil) {
                self.checkName = checkName
                self.status = status
                self.filter = filter
                self.perPage = perPage
                self.page = page
                self.appID = appID
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(checkName, forKey: "check_name")
                encoder.encode(status, forKey: "status")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(appID, forKey: "app_id")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithRef {
    public var checkSuites: CheckSuites {
        CheckSuites(path: path + "/check-suites")
    }

    public struct CheckSuites {
        /// Path: `/repos/{owner}/{repo}/commits/{ref}/check-suites`
        public let path: String

        /// List check suites for a Git reference
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
        /// 
        /// Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var checkSuites: [OctoKit.CheckSuite]

            public init(totalCount: Int, checkSuites: [OctoKit.CheckSuite]) {
                self.totalCount = totalCount
                self.checkSuites = checkSuites
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case checkSuites = "check_suites"
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var appID: Int?
            public var checkName: String?
            public var perPage: Int?
            public var page: Int?

            public init(appID: Int? = nil, checkName: String? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.appID = appID
                self.checkName = checkName
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(appID, forKey: "app_id")
                encoder.encode(checkName, forKey: "check_name")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithRef {
    public var status: Status {
        Status(path: path + "/status")
    }

    public struct Status {
        /// Path: `/repos/{owner}/{repo}/commits/{ref}/status`
        public let path: String

        /// Get the combined status for a specific reference
        ///
        /// Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
        /// 
        /// 
        /// Additionally, a combined `state` is returned. The `state` is one of:
        /// 
        /// *   **failure** if any of the contexts report as `error` or `failure`
        /// *   **pending** if there are no statuses or a context is `pending`
        /// *   **success** if the latest status for all contexts is `success`
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-combined-status-for-a-specific-reference)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<OctoKit.CombinedCommitStatus> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithRef {
    public var statuses: Statuses {
        Statuses(path: path + "/statuses")
    }

    public struct Statuses {
        /// Path: `/repos/{owner}/{repo}/commits/{ref}/statuses`
        public let path: String

        /// List commit statuses for a reference
        ///
        /// Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
        /// 
        /// This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-commit-statuses-for-a-reference)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Status]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var community: Community {
        Community(path: path + "/community")
    }

    public struct Community {
        /// Path: `/repos/{owner}/{repo}/community`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Community {
    public var profile: Profile {
        Profile(path: path + "/profile")
    }

    public struct Profile {
        /// Path: `/repos/{owner}/{repo}/community/profile`
        public let path: String

        /// Get community profile metrics
        ///
        /// This endpoint will return all community profile metrics, including an
        /// overall health score, repository description, the presence of documentation, detected
        /// code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
        /// README, and CONTRIBUTING files.
        /// 
        /// The `health_percentage` score is defined as a percentage of how many of
        /// these four documents are present: README, CONTRIBUTING, LICENSE, and
        /// CODE_OF_CONDUCT. For example, if all four documents are present, then
        /// the `health_percentage` is `100`. If only one is present, then the
        /// `health_percentage` is `25`.
        /// 
        /// `content_reports_enabled` is only returned for organization-owned repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-community-profile-metrics)
        public var get: Request<OctoKit.CommunityProfile> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var compare: Compare {
        Compare(path: path + "/compare")
    }

    public struct Compare {
        /// Path: `/repos/{owner}/{repo}/compare`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Compare {
    public func basehead(_ basehead: String) -> WithBasehead {
        WithBasehead(path: "\(path)/\(basehead)")
    }

    public struct WithBasehead {
        /// Path: `/repos/{owner}/{repo}/compare/{basehead}`
        public let path: String

        /// Compare two commits
        ///
        /// The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.
        /// 
        /// The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
        /// 
        /// The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
        /// 
        /// **Working with large comparisons**
        /// 
        /// To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."
        /// 
        /// When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
        /// 
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#compare-two-commits)
        public func get(page: Int? = nil, perPage: Int? = nil) -> Request<OctoKit.CommitComparison> {
            .get(path, query: makeGetQuery(page, perPage))
        }

        private func makeGetQuery(_ page: Int?, _ perPage: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(page, forKey: "page")
            encoder.encode(perPage, forKey: "per_page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var contents: Contents {
        Contents(path: path + "/contents")
    }

    public struct Contents {
        /// Path: `/repos/{owner}/{repo}/contents`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Contents {
    public func path(_ path: String) -> WithPath {
        WithPath(path: "\(path)/\(path)")
    }

    public struct WithPath {
        /// Path: `/repos/{owner}/{repo}/contents/{path}`
        public let path: String

        /// Get repository content
        ///
        /// Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
        /// `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories. 
        /// 
        /// Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
        /// retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
        /// type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
        /// object format.
        /// 
        /// **Note**:
        /// *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
        /// *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
        /// API](https://docs.github.com/rest/reference/git#get-a-tree).
        /// *   This API supports files up to 1 megabyte in size.
        /// 
        /// #### If the content is a directory
        /// The response will be an array of objects, one object for each item in the directory.
        /// When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
        /// _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
        /// In the next major version of the API, the type will be returned as "submodule".
        /// 
        /// #### If the content is a symlink 
        /// If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
        /// API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object 
        /// describing the symlink itself.
        /// 
        /// #### If the content is a submodule
        /// The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
        /// commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
        /// the submodule at that specific commit.
        /// 
        /// If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
        /// github.com URLs (`html_url` and `_links["html"]`) will have null values.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-repository-content)
        public func get(ref: String? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(ref))
        }

        public enum GetResponse: Decodable {
            case contentDirectoryItems([ContentDirectoryItem])
            case contentFile(OctoKit.ContentFile)
            case contentSymlink(OctoKit.ContentSymlink)
            case contentSubmodule(OctoKit.ContentSubmodule)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode([ContentDirectoryItem].self) {
                    self = .contentDirectoryItems(value)
                } else if let value = try? container.decode(OctoKit.ContentFile.self) {
                    self = .contentFile(value)
                } else if let value = try? container.decode(OctoKit.ContentSymlink.self) {
                    self = .contentSymlink(value)
                } else if let value = try? container.decode(OctoKit.ContentSubmodule.self) {
                    self = .contentSubmodule(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }
        }

        private func makeGetQuery(_ ref: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(ref, forKey: "ref")
            return encoder.items
        }

        /// Create or update file contents
        ///
        /// Creates a new file or replaces an existing file in a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-or-update-file-contents)
        public func put(_ body: PutRequest) -> Request<OctoKit.FileCommit> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// The commit message.
            public var message: String
            /// The new file content, using Base64 encoding.
            public var content: String
            /// **Required if you are updating a file**. The blob SHA of the file being replaced.
            public var sha: String?
            /// The branch name. Default: the repository’s default branch (usually `master`)
            public var branch: String?
            /// The person that committed the file. Default: the authenticated user.
            public var committer: Committer?
            /// The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
            public var author: Author?

            /// The person that committed the file. Default: the authenticated user.
            public struct Committer: Encodable {
                /// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
                public var name: String
                /// The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
                public var email: String
                /// Example: "2013-01-05T13:13:22+05:00"
                public var date: String?

                public init(name: String, email: String, date: String? = nil) {
                    self.name = name
                    self.email = email
                    self.date = date
                }
            }

            /// The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
            public struct Author: Encodable {
                /// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
                public var name: String
                /// The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
                public var email: String
                /// Example: "2013-01-15T17:13:22+05:00"
                public var date: String?

                public init(name: String, email: String, date: String? = nil) {
                    self.name = name
                    self.email = email
                    self.date = date
                }
            }

            public init(message: String, content: String, sha: String? = nil, branch: String? = nil, committer: Committer? = nil, author: Author? = nil) {
                self.message = message
                self.content = content
                self.sha = sha
                self.branch = branch
                self.committer = committer
                self.author = author
            }
        }

        /// Delete a file
        ///
        /// Deletes a file in a repository.
        /// 
        /// You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
        /// 
        /// The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
        /// 
        /// You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-file)
        public func delete(_ body: DeleteRequest) -> Request<OctoKit.FileCommit> {
            .delete(path, body: body)
        }

        public struct DeleteRequest: Encodable {
            /// The commit message.
            public var message: String
            /// The blob SHA of the file being replaced.
            public var sha: String
            /// The branch name. Default: the repository’s default branch (usually `master`)
            public var branch: String?
            /// Object containing information about the committer.
            public var committer: Committer?
            /// Object containing information about the author.
            public var author: Author?

            /// Object containing information about the committer.
            public struct Committer: Encodable {
                /// The name of the author (or committer) of the commit
                public var name: String?
                /// The email of the author (or committer) of the commit
                public var email: String?

                public init(name: String? = nil, email: String? = nil) {
                    self.name = name
                    self.email = email
                }
            }

            /// Object containing information about the author.
            public struct Author: Encodable {
                /// The name of the author (or committer) of the commit
                public var name: String?
                /// The email of the author (or committer) of the commit
                public var email: String?

                public init(name: String? = nil, email: String? = nil) {
                    self.name = name
                    self.email = email
                }
            }

            public init(message: String, sha: String, branch: String? = nil, committer: Committer? = nil, author: Author? = nil) {
                self.message = message
                self.sha = sha
                self.branch = branch
                self.committer = committer
                self.author = author
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var contributors: Contributors {
        Contributors(path: path + "/contributors")
    }

    public struct Contributors {
        /// Path: `/repos/{owner}/{repo}/contributors`
        public let path: String

        /// List repository contributors
        ///
        /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
        /// 
        /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-contributors)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Contributor]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var anon: String?
            public var perPage: Int?
            public var page: Int?

            public init(anon: String? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.anon = anon
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(anon, forKey: "anon")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var deployments: Deployments {
        Deployments(path: path + "/deployments")
    }

    public struct Deployments {
        /// Path: `/repos/{owner}/{repo}/deployments`
        public let path: String

        /// List deployments
        ///
        /// Simple filtering of deployments is available via query parameters:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-deployments)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Deployment]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var sha: String?
            public var ref: String?
            public var task: String?
            public var environment: String?
            public var perPage: Int?
            public var page: Int?

            public init(sha: String? = nil, ref: String? = nil, task: String? = nil, environment: String? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.sha = sha
                self.ref = ref
                self.task = task
                self.environment = environment
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sha, forKey: "sha")
                encoder.encode(ref, forKey: "ref")
                encoder.encode(task, forKey: "task")
                encoder.encode(environment, forKey: "environment")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a deployment
        ///
        /// Deployments offer a few configurable parameters with certain defaults.
        /// 
        /// The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
        /// before we merge a pull request.
        /// 
        /// The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
        /// multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
        /// makes it easier to track which environments have requested deployments. The default environment is `production`.
        /// 
        /// The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
        /// the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
        /// the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
        /// return a failure response.
        /// 
        /// By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`
        /// state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
        /// specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
        /// not require any contexts or create any commit statuses, the deployment will always succeed.
        /// 
        /// The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
        /// field that will be passed on when a deployment event is dispatched.
        /// 
        /// The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
        /// be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
        /// application with debugging enabled.
        /// 
        /// Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
        /// 
        /// #### Merged branch response
        /// You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
        /// a deployment. This auto-merge happens when:
        /// *   Auto-merge option is enabled in the repository
        /// *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
        /// *   There are no merge conflicts
        /// 
        /// If there are no new commits in the base branch, a new request to create a deployment should give a successful
        /// response.
        /// 
        /// #### Merge conflict response
        /// This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
        /// be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
        /// 
        /// #### Failed commit status checks
        /// This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
        /// status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-deployment)
        public func post(_ body: PostRequest) -> Request<OctoKit.Deployment> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The ref to deploy. This can be a branch, tag, or SHA.
            public var ref: String
            /// Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
            public var task: String?
            /// Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
            public var isAutoMerge: Bool
            /// The [status](https://docs.github.com/rest/reference/repos#statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
            public var requiredContexts: [String]?
            public var payload: Payload?
            /// Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
            public var environment: String?
            /// Short description of the deployment.
            public var description: String?
            /// Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
            public var isTransientEnvironment: Bool
            /// Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
            public var isProductionEnvironment: Bool?

            public enum Payload: Encodable {
                case object([String: AnyJSON])
                case string(String)

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .object(let value): try container.encode(value)
                    case .string(let value): try container.encode(value)
                    }
                }
            }

            public init(ref: String, task: String? = nil, isAutoMerge: Bool? = nil, requiredContexts: [String]? = nil, payload: Payload? = nil, environment: String? = nil, description: String? = nil, isTransientEnvironment: Bool? = nil, isProductionEnvironment: Bool? = nil) {
                self.ref = ref
                self.task = task
                self.isAutoMerge = isAutoMerge ?? true
                self.requiredContexts = requiredContexts
                self.payload = payload
                self.environment = environment
                self.description = description
                self.isTransientEnvironment = isTransientEnvironment ?? false
                self.isProductionEnvironment = isProductionEnvironment
            }

            private enum CodingKeys: String, CodingKey {
                case ref
                case task
                case isAutoMerge = "auto_merge"
                case requiredContexts = "required_contexts"
                case payload
                case environment
                case description
                case isTransientEnvironment = "transient_environment"
                case isProductionEnvironment = "production_environment"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Deployments {
    public func deploymentID(_ deploymentID: Int) -> WithDeploymentID {
        WithDeploymentID(path: "\(path)/\(deploymentID)")
    }

    public struct WithDeploymentID {
        /// Path: `/repos/{owner}/{repo}/deployments/{deployment_id}`
        public let path: String

        /// Get a deployment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-deployment)
        public var get: Request<OctoKit.Deployment> {
            .get(path)
        }

        /// Delete a deployment
        ///
        /// To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
        /// 
        /// To set a deployment as inactive, you must:
        /// 
        /// *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
        /// *   Mark the active deployment as inactive by adding any non-successful deployment status.
        /// 
        /// For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-deployment)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Deployments.WithDeploymentID {
    public var statuses: Statuses {
        Statuses(path: path + "/statuses")
    }

    public struct Statuses {
        /// Path: `/repos/{owner}/{repo}/deployments/{deployment_id}/statuses`
        public let path: String

        /// List deployment statuses
        ///
        /// Users with pull access can view deployment statuses for a deployment:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-deployment-statuses)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.DeploymentStatus]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a deployment status
        ///
        /// Users with `push` access can create deployment statuses for a given deployment.
        /// 
        /// GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-deployment-status)
        public func post(_ body: PostRequest) -> Request<OctoKit.DeploymentStatus> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`, `pending`, or `success`. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
            public var state: State
            /// The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
            public var targetURL: String?
            /// The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
            public var logURL: String?
            /// A short description of the status. The maximum description length is 140 characters.
            public var description: String?
            /// Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
            public var environment: Environment?
            /// Sets the URL for accessing your environment. Default: `""`
            public var environmentURL: String?
            /// Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
            public var isAutoInactive: Bool?

            /// The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`, `pending`, or `success`. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
            public enum State: String, Codable, CaseIterable {
                case error
                case failure
                case inactive
                case inProgress = "in_progress"
                case queued
                case pending
                case success
            }

            /// Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
            public enum Environment: String, Codable, CaseIterable {
                case production
                case staging
                case qa
            }

            public init(state: State, targetURL: String? = nil, logURL: String? = nil, description: String? = nil, environment: Environment? = nil, environmentURL: String? = nil, isAutoInactive: Bool? = nil) {
                self.state = state
                self.targetURL = targetURL
                self.logURL = logURL
                self.description = description
                self.environment = environment
                self.environmentURL = environmentURL
                self.isAutoInactive = isAutoInactive
            }

            private enum CodingKeys: String, CodingKey {
                case state
                case targetURL = "target_url"
                case logURL = "log_url"
                case description
                case environment
                case environmentURL = "environment_url"
                case isAutoInactive = "auto_inactive"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Deployments.WithDeploymentID.Statuses {
    public func statusID(_ statusID: Int) -> WithStatusID {
        WithStatusID(path: "\(path)/\(statusID)")
    }

    public struct WithStatusID {
        /// Path: `/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}`
        public let path: String

        /// Get a deployment status
        ///
        /// Users with pull access can view a deployment status for a deployment:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-deployment-status)
        public var get: Request<OctoKit.DeploymentStatus> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var dispatches: Dispatches {
        Dispatches(path: path + "/dispatches")
    }

    public struct Dispatches {
        /// Path: `/repos/{owner}/{repo}/dispatches`
        public let path: String

        /// Create a repository dispatch event
        ///
        /// You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
        /// 
        /// The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
        /// 
        /// This endpoint requires write access to the repository by providing either:
        /// 
        ///   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
        ///   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
        /// 
        /// This input example shows how you can use the `client_payload` as a test to debug your workflow.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-repository-dispatch-event)
        public func post(_ body: PostRequest) -> Request<Void> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// A custom webhook event name.
            public var eventType: String
            /// JSON payload with extra information about the webhook event that your action or worklow may use.
            public var clientPayload: [String: AnyJSON]?

            public init(eventType: String, clientPayload: [String: AnyJSON]? = nil) {
                self.eventType = eventType
                self.clientPayload = clientPayload
            }

            private enum CodingKeys: String, CodingKey {
                case eventType = "event_type"
                case clientPayload = "client_payload"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var environments: Environments {
        Environments(path: path + "/environments")
    }

    public struct Environments {
        /// Path: `/repos/{owner}/{repo}/environments`
        public let path: String

        /// Get all environments
        ///
        /// Get all environments for a repository.
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-all-environments)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            /// The number of environments in this repository
            public var totalCount: Int?
            public var environments: [OctoKit.Environment]?

            public init(totalCount: Int? = nil, environments: [OctoKit.Environment]? = nil) {
                self.totalCount = totalCount
                self.environments = environments
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case environments
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Environments {
    public func environmentName(_ environmentName: String) -> WithEnvironmentName {
        WithEnvironmentName(path: "\(path)/\(environmentName)")
    }

    public struct WithEnvironmentName {
        /// Path: `/repos/{owner}/{repo}/environments/{environment_name}`
        public let path: String

        /// Get an environment
        ///
        /// Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-an-environment)
        public var get: Request<OctoKit.Environment> {
            .get(path)
        }

        /// Create or update an environment
        ///
        /// Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
        /// 
        /// **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."
        /// 
        /// **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
        /// 
        /// You must authenticate using an access token with the repo scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-or-update-an-environment)
        public func put(_ body: PutRequest? = nil) -> Request<OctoKit.Environment> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
            ///
            /// Example: 30
            public var waitTimer: Int?
            /// The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
            public var reviewers: [Reviewer]?
            /// The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
            public var deploymentBranchPolicy: OctoKit.DeploymentBranchPolicy?

            public struct Reviewer: Encodable {
                /// The type of reviewer. Must be one of: `User` or `Team`
                ///
                /// Example: "User"
                public var type: OctoKit.DeploymentReviewerType?
                /// The id of the user or team who can review the deployment
                ///
                /// Example: 4532992
                public var id: Int?

                public init(type: OctoKit.DeploymentReviewerType? = nil, id: Int? = nil) {
                    self.type = type
                    self.id = id
                }
            }

            public init(waitTimer: Int? = nil, reviewers: [Reviewer]? = nil, deploymentBranchPolicy: OctoKit.DeploymentBranchPolicy? = nil) {
                self.waitTimer = waitTimer
                self.reviewers = reviewers
                self.deploymentBranchPolicy = deploymentBranchPolicy
            }

            private enum CodingKeys: String, CodingKey {
                case waitTimer = "wait_timer"
                case reviewers
                case deploymentBranchPolicy = "deployment_branch_policy"
            }
        }

        /// Delete an environment
        ///
        /// You must authenticate using an access token with the repo scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-an-environment)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/repos/{owner}/{repo}/events`
        public let path: String

        /// List repository events
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repository-events)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Event]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var forks: Forks {
        Forks(path: path + "/forks")
    }

    public struct Forks {
        /// Path: `/repos/{owner}/{repo}/forks`
        public let path: String

        /// List forks
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-forks)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.MinimalRepository]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var sort: Sort?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case newest
                case oldest
                case stargazers
                case watchers
            }

            public init(sort: Sort? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.sort = sort
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sort, forKey: "sort")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a fork
        ///
        /// Create a fork for the authenticated user.
        /// 
        /// **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-fork)
        public func post(organization: String? = nil) -> Request<OctoKit.FullRepository> {
            .post(path, body: ["organization": organization])
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var git: Git {
        Git(path: path + "/git")
    }

    public struct Git {
        /// Path: `/repos/{owner}/{repo}/git`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var blobs: Blobs {
        Blobs(path: path + "/blobs")
    }

    public struct Blobs {
        /// Path: `/repos/{owner}/{repo}/git/blobs`
        public let path: String

        /// Create a blob
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#create-a-blob)
        public func post(_ body: PostRequest) -> Request<OctoKit.ShortBlob> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The new blob's content.
            public var content: String
            /// The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
            public var encoding: String?

            public init(content: String, encoding: String? = nil) {
                self.content = content
                self.encoding = encoding
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Blobs {
    public func fileSha(_ fileSha: String) -> WithFileSha {
        WithFileSha(path: "\(path)/\(fileSha)")
    }

    public struct WithFileSha {
        /// Path: `/repos/{owner}/{repo}/git/blobs/{file_sha}`
        public let path: String

        /// Get a blob
        ///
        /// The `content` in the response will always be Base64 encoded.
        /// 
        /// _Note_: This API supports blobs up to 100 megabytes in size.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#get-a-blob)
        public var get: Request<OctoKit.Blob> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var commits: Commits {
        Commits(path: path + "/commits")
    }

    public struct Commits {
        /// Path: `/repos/{owner}/{repo}/git/commits`
        public let path: String

        /// Create a commit
        ///
        /// Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
        /// 
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#create-a-commit)
        public func post(_ body: PostRequest) -> Request<OctoKit.GitCommit> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The commit message
            public var message: String
            /// The SHA of the tree object this commit points to
            public var tree: String
            /// The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
            public var parents: [String]?
            /// Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
            public var author: Author?
            /// Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
            public var committer: Committer?
            /// The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
            public var signature: String?

            /// Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
            public struct Author: Encodable {
                /// The name of the author (or committer) of the commit
                public var name: String
                /// The email of the author (or committer) of the commit
                public var email: String
                /// Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                public var date: Date?

                public init(name: String, email: String, date: Date? = nil) {
                    self.name = name
                    self.email = email
                    self.date = date
                }
            }

            /// Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
            public struct Committer: Encodable {
                /// The name of the author (or committer) of the commit
                public var name: String?
                /// The email of the author (or committer) of the commit
                public var email: String?
                /// Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                public var date: Date?

                public init(name: String? = nil, email: String? = nil, date: Date? = nil) {
                    self.name = name
                    self.email = email
                    self.date = date
                }
            }

            public init(message: String, tree: String, parents: [String]? = nil, author: Author? = nil, committer: Committer? = nil, signature: String? = nil) {
                self.message = message
                self.tree = tree
                self.parents = parents
                self.author = author
                self.committer = committer
                self.signature = signature
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Commits {
    public func commitSha(_ commitSha: String) -> WithCommitSha {
        WithCommitSha(path: "\(path)/\(commitSha)")
    }

    public struct WithCommitSha {
        /// Path: `/repos/{owner}/{repo}/git/commits/{commit_sha}`
        public let path: String

        /// Get a commit
        ///
        /// Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
        /// 
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#get-a-commit)
        public var get: Request<OctoKit.GitCommit> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var matchingRefs: MatchingRefs {
        MatchingRefs(path: path + "/matching-refs")
    }

    public struct MatchingRefs {
        /// Path: `/repos/{owner}/{repo}/git/matching-refs`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.MatchingRefs {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: "\(path)/\(ref)")
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/git/matching-refs/{ref}`
        public let path: String

        /// List matching references
        ///
        /// Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
        /// 
        /// When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
        /// 
        /// **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
        /// 
        /// If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#list-matching-references)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.GitRef]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var ref: Ref {
        Ref(path: path + "/ref")
    }

    public struct Ref {
        /// Path: `/repos/{owner}/{repo}/git/ref`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Ref {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: "\(path)/\(ref)")
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/git/ref/{ref}`
        public let path: String

        /// Get a reference
        ///
        /// Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
        /// 
        /// **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#get-a-reference)
        public var get: Request<OctoKit.GitRef> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var refs: Refs {
        Refs(path: path + "/refs")
    }

    public struct Refs {
        /// Path: `/repos/{owner}/{repo}/git/refs`
        public let path: String

        /// Create a reference
        ///
        /// Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#create-a-reference)
        public func post(_ body: PostRequest) -> Request<OctoKit.GitRef> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
            public var ref: String
            /// The SHA1 value for this reference.
            public var sha: String
            /// Example: "refs/heads/newbranch"
            public var key: String?

            public init(ref: String, sha: String, key: String? = nil) {
                self.ref = ref
                self.sha = sha
                self.key = key
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Refs {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: "\(path)/\(ref)")
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/git/refs/{ref}`
        public let path: String

        /// Update a reference
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#update-a-reference)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.GitRef> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The SHA1 value to set this reference to
            public var sha: String
            /// Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
            public var isForce: Bool

            public init(sha: String, isForce: Bool? = nil) {
                self.sha = sha
                self.isForce = isForce ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case sha
                case isForce = "force"
            }
        }

        /// Delete a reference
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#delete-a-reference)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var tags: Tags {
        Tags(path: path + "/tags")
    }

    public struct Tags {
        /// Path: `/repos/{owner}/{repo}/git/tags`
        public let path: String

        /// Create a tag object
        ///
        /// Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
        /// 
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#create-a-tag-object)
        public func post(_ body: PostRequest) -> Request<OctoKit.GitTag> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The tag's name. This is typically a version (e.g., "v0.0.1").
            public var tag: String
            /// The tag message.
            public var message: String
            /// The SHA of the git object this is tagging.
            public var object: String
            /// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
            public var type: `Type`
            /// An object with information about the individual creating the tag.
            public var tagger: Tagger?

            /// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
            public enum `Type`: String, Codable, CaseIterable {
                case commit
                case tree
                case blob
            }

            /// An object with information about the individual creating the tag.
            public struct Tagger: Encodable {
                /// The name of the author of the tag
                public var name: String
                /// The email of the author of the tag
                public var email: String
                /// When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                public var date: Date?

                public init(name: String, email: String, date: Date? = nil) {
                    self.name = name
                    self.email = email
                    self.date = date
                }
            }

            public init(tag: String, message: String, object: String, type: `Type`, tagger: Tagger? = nil) {
                self.tag = tag
                self.message = message
                self.object = object
                self.type = type
                self.tagger = tagger
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Tags {
    public func tagSha(_ tagSha: String) -> WithTagSha {
        WithTagSha(path: "\(path)/\(tagSha)")
    }

    public struct WithTagSha {
        /// Path: `/repos/{owner}/{repo}/git/tags/{tag_sha}`
        public let path: String

        /// Get a tag
        ///
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#get-a-tag)
        public var get: Request<OctoKit.GitTag> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var trees: Trees {
        Trees(path: path + "/trees")
    }

    public struct Trees {
        /// Path: `/repos/{owner}/{repo}/git/trees`
        public let path: String

        /// Create a tree
        ///
        /// The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
        /// 
        /// If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#create-a-tree)
        public func post(_ body: PostRequest) -> Request<OctoKit.GitTree> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
            public var tree: [TreeItem]
            /// The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
            /// If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
            public var baseTree: String?

            public struct TreeItem: Encodable {
                /// The file referenced in the tree.
                public var path: String?
                /// The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
                public var mode: Mode?
                /// Either `blob`, `tree`, or `commit`.
                public var type: `Type`?
                /// The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  
                ///   
                /// **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
                public var sha: String?
                /// The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  
                ///   
                /// **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
                public var content: String?

                /// The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
                public enum Mode: String, Codable, CaseIterable {
                    case _100644 = "100644"
                    case _100755 = "100755"
                    case _040000 = "040000"
                    case _160000 = "160000"
                    case _120000 = "120000"
                }

                /// Either `blob`, `tree`, or `commit`.
                public enum `Type`: String, Codable, CaseIterable {
                    case blob
                    case tree
                    case commit
                }

                public init(path: String? = nil, mode: Mode? = nil, type: `Type`? = nil, sha: String? = nil, content: String? = nil) {
                    self.path = path
                    self.mode = mode
                    self.type = type
                    self.sha = sha
                    self.content = content
                }
            }

            public init(tree: [TreeItem], baseTree: String? = nil) {
                self.tree = tree
                self.baseTree = baseTree
            }

            private enum CodingKeys: String, CodingKey {
                case tree
                case baseTree = "base_tree"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Trees {
    public func treeSha(_ treeSha: String) -> WithTreeSha {
        WithTreeSha(path: "\(path)/\(treeSha)")
    }

    public struct WithTreeSha {
        /// Path: `/repos/{owner}/{repo}/git/trees/{tree_sha}`
        public let path: String

        /// Get a tree
        ///
        /// Returns a single tree using the SHA1 value for that tree.
        /// 
        /// If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#get-a-tree)
        public func get(recursive: String? = nil) -> Request<OctoKit.GitTree> {
            .get(path, query: makeGetQuery(recursive))
        }

        private func makeGetQuery(_ recursive: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(recursive, forKey: "recursive")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var hooks: Hooks {
        Hooks(path: path + "/hooks")
    }

    public struct Hooks {
        /// Path: `/repos/{owner}/{repo}/hooks`
        public let path: String

        /// List repository webhooks
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-webhooks)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Hook]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a repository webhook
        ///
        /// Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
        /// share the same `config` as long as those webhooks do not have any `events` that overlap.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-repository-webhook)
        public func post(_ body: PostRequest? = nil) -> Request<OctoKit.Hook> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
            public var name: String?
            /// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
            public var config: Config?
            /// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
            public var events: [String]?
            /// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
            public var isActive: Bool

            /// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
            public struct Config: Encodable {
                /// The URL to which the payloads will be delivered.
                ///
                /// Example: "https://example.com/webhook"
                public var url: URL?
                /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
                ///
                /// Example: "json"
                public var contentType: String?
                /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
                ///
                /// Example: "********"
                public var secret: String?
                public var insecureSSL: OctoKit.WebhookConfigInsecureSSL?
                /// Example: "abc"
                public var token: String?
                /// Example: "sha256"
                public var digest: String?

                public init(url: URL? = nil, contentType: String? = nil, secret: String? = nil, insecureSSL: OctoKit.WebhookConfigInsecureSSL? = nil, token: String? = nil, digest: String? = nil) {
                    self.url = url
                    self.contentType = contentType
                    self.secret = secret
                    self.insecureSSL = insecureSSL
                    self.token = token
                    self.digest = digest
                }

                private enum CodingKeys: String, CodingKey {
                    case url
                    case contentType = "content_type"
                    case secret
                    case insecureSSL = "insecure_ssl"
                    case token
                    case digest
                }
            }

            public init(name: String? = nil, config: Config? = nil, events: [String]? = nil, isActive: Bool? = nil) {
                self.name = name
                self.config = config
                self.events = events
                self.isActive = isActive ?? true
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case config
                case events
                case isActive = "active"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks {
    public func hookID(_ hookID: Int) -> WithHookID {
        WithHookID(path: "\(path)/\(hookID)")
    }

    public struct WithHookID {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}`
        public let path: String

        /// Get a repository webhook
        ///
        /// Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-repository-webhook)
        public var get: Request<OctoKit.Hook> {
            .get(path)
        }

        /// Update a repository webhook
        ///
        /// Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-a-repository-webhook)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.Hook> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
            public var config: Config?
            /// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
            public var events: [String]?
            /// Determines a list of events to be added to the list of events that the Hook triggers for.
            public var addEvents: [String]?
            /// Determines a list of events to be removed from the list of events that the Hook triggers for.
            public var removeEvents: [String]?
            /// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
            public var isActive: Bool

            /// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
            public struct Config: Encodable {
                /// The URL to which the payloads will be delivered.
                ///
                /// Example: "https://example.com/webhook"
                public var url: URL
                /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
                ///
                /// Example: "json"
                public var contentType: String?
                /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
                ///
                /// Example: "********"
                public var secret: String?
                public var insecureSSL: OctoKit.WebhookConfigInsecureSSL?
                /// Example: "bar@example.com"
                public var address: String?
                /// Example: "The Serious Room"
                public var room: String?

                public init(url: URL, contentType: String? = nil, secret: String? = nil, insecureSSL: OctoKit.WebhookConfigInsecureSSL? = nil, address: String? = nil, room: String? = nil) {
                    self.url = url
                    self.contentType = contentType
                    self.secret = secret
                    self.insecureSSL = insecureSSL
                    self.address = address
                    self.room = room
                }

                private enum CodingKeys: String, CodingKey {
                    case url
                    case contentType = "content_type"
                    case secret
                    case insecureSSL = "insecure_ssl"
                    case address
                    case room
                }
            }

            public init(config: Config? = nil, events: [String]? = nil, addEvents: [String]? = nil, removeEvents: [String]? = nil, isActive: Bool? = nil) {
                self.config = config
                self.events = events
                self.addEvents = addEvents
                self.removeEvents = removeEvents
                self.isActive = isActive ?? true
            }

            private enum CodingKeys: String, CodingKey {
                case config
                case events
                case addEvents = "add_events"
                case removeEvents = "remove_events"
                case isActive = "active"
            }
        }

        /// Delete a repository webhook
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-repository-webhook)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID {
    public var config: Config {
        Config(path: path + "/config")
    }

    public struct Config {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/config`
        public let path: String

        /// Get a webhook configuration for a repository
        ///
        /// Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
        /// 
        /// Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-webhook-configuration-for-a-repository)
        public var get: Request<OctoKit.WebhookConfig> {
            .get(path)
        }

        /// Update a webhook configuration for a repository
        ///
        /// Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
        /// 
        /// Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-a-webhook-configuration-for-a-repository)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.WebhookConfig> {
            .patch(path, body: body)
        }

        /// Example:
        ///
        /// {
        ///   "content_type" : "json",
        ///   "insecure_ssl" : "0",
        ///   "secret" : "********",
        ///   "url" : "https:\/\/example.com\/webhook"
        /// }
        public struct PatchRequest: Encodable {
            /// The URL to which the payloads will be delivered.
            ///
            /// Example: "https://example.com/webhook"
            public var url: URL?
            /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
            ///
            /// Example: "json"
            public var contentType: String?
            /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
            ///
            /// Example: "********"
            public var secret: String?
            public var insecureSSL: OctoKit.WebhookConfigInsecureSSL?

            public init(url: URL? = nil, contentType: String? = nil, secret: String? = nil, insecureSSL: OctoKit.WebhookConfigInsecureSSL? = nil) {
                self.url = url
                self.contentType = contentType
                self.secret = secret
                self.insecureSSL = insecureSSL
            }

            private enum CodingKeys: String, CodingKey {
                case url
                case contentType = "content_type"
                case secret
                case insecureSSL = "insecure_ssl"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID {
    public var deliveries: Deliveries {
        Deliveries(path: path + "/deliveries")
    }

    public struct Deliveries {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/deliveries`
        public let path: String

        /// List deliveries for a repository webhook
        ///
        /// Returns a list of webhook deliveries for a webhook configured in a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-deliveries-for-a-repository-webhook)
        public func get(perPage: Int? = nil, cursor: String? = nil) -> Request<[OctoKit.HookDeliveryItem]> {
            .get(path, query: makeGetQuery(perPage, cursor))
        }

        private func makeGetQuery(_ perPage: Int?, _ cursor: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(cursor, forKey: "cursor")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID.Deliveries {
    public func deliveryID(_ deliveryID: Int) -> WithDeliveryID {
        WithDeliveryID(path: "\(path)/\(deliveryID)")
    }

    public struct WithDeliveryID {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}`
        public let path: String

        /// Get a delivery for a repository webhook
        ///
        /// Returns a delivery for a webhook configured in a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-delivery-for-a-repository-webhook)
        public var get: Request<OctoKit.HookDelivery> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID.Deliveries.WithDeliveryID {
    public var attempts: Attempts {
        Attempts(path: path + "/attempts")
    }

    public struct Attempts {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts`
        public let path: String

        /// Redeliver a delivery for a repository webhook
        ///
        /// Redeliver a webhook delivery for a webhook configured in a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#redeliver-a-delivery-for-a-repository-webhook)
        public var post: Request<[String: AnyJSON]> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID {
    public var pings: Pings {
        Pings(path: path + "/pings")
    }

    public struct Pings {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/pings`
        public let path: String

        /// Ping a repository webhook
        ///
        /// This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#ping-a-repository-webhook)
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID {
    public var tests: Tests {
        Tests(path: path + "/tests")
    }

    public struct Tests {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/tests`
        public let path: String

        /// Test the push repository webhook
        ///
        /// This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
        /// 
        /// **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#test-the-push-repository-webhook)
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var `import`: Import {
        Import(path: path + "/import")
    }

    public struct Import {
        /// Path: `/repos/{owner}/{repo}/import`
        public let path: String

        /// Get an import status
        ///
        /// View the progress of an import.
        /// 
        /// **Import status**
        /// 
        /// This section includes details about the possible values of the `status` field of the Import Progress response.
        /// 
        /// An import that does not have errors will progress through these steps:
        /// 
        /// *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
        /// *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
        /// *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
        /// *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
        /// *   `complete` - the import is complete, and the repository is ready on GitHub.
        /// 
        /// If there are problems, you will see one of these in the `status` field:
        /// 
        /// *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
        /// *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
        /// *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
        /// *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
        /// *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
        /// 
        /// **The project_choices field**
        /// 
        /// When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
        /// 
        /// **Git LFS related fields**
        /// 
        /// This section includes details about Git LFS related fields that may be present in the Import Progress response.
        /// 
        /// *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
        /// *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
        /// *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
        /// *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#get-an-import-status)
        public var get: Request<OctoKit.Import> {
            .get(path)
        }

        /// Start an import
        ///
        /// Start a source import to a GitHub repository using GitHub Importer.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#start-an-import)
        public func put(_ body: PutRequest) -> Request<OctoKit.Import> {
            .put(path, body: body)
        }

        public enum PutResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PutRequest: Encodable {
            /// The URL of the originating repository.
            public var vcsURL: String
            /// The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
            public var vcs: Vcs?
            /// If authentication is required, the username to provide to `vcs_url`.
            public var vcsUsername: String?
            /// If authentication is required, the password to provide to `vcs_url`.
            public var vcsPassword: String?
            /// For a tfvc import, the name of the project that is being imported.
            public var tfvcProject: String?

            /// The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
            public enum Vcs: String, Codable, CaseIterable {
                case subversion
                case git
                case mercurial
                case tfvc
            }

            public init(vcsURL: String, vcs: Vcs? = nil, vcsUsername: String? = nil, vcsPassword: String? = nil, tfvcProject: String? = nil) {
                self.vcsURL = vcsURL
                self.vcs = vcs
                self.vcsUsername = vcsUsername
                self.vcsPassword = vcsPassword
                self.tfvcProject = tfvcProject
            }

            private enum CodingKeys: String, CodingKey {
                case vcsURL = "vcs_url"
                case vcs
                case vcsUsername = "vcs_username"
                case vcsPassword = "vcs_password"
                case tfvcProject = "tfvc_project"
            }
        }

        /// Update an import
        ///
        /// An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
        /// request. If no parameters are provided, the import will be restarted.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#update-an-import)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.Import> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The username to provide to the originating repository.
            public var vcsUsername: String?
            /// The password to provide to the originating repository.
            public var vcsPassword: String?
            /// Example: "git"
            public var vcs: String?
            /// Example: "project1"
            public var tfvcProject: String?

            public init(vcsUsername: String? = nil, vcsPassword: String? = nil, vcs: String? = nil, tfvcProject: String? = nil) {
                self.vcsUsername = vcsUsername
                self.vcsPassword = vcsPassword
                self.vcs = vcs
                self.tfvcProject = tfvcProject
            }

            private enum CodingKeys: String, CodingKey {
                case vcsUsername = "vcs_username"
                case vcsPassword = "vcs_password"
                case vcs
                case tfvcProject = "tfvc_project"
            }
        }

        /// Cancel an import
        ///
        /// Stop an import for a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#cancel-an-import)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Import {
    public var authors: Authors {
        Authors(path: path + "/authors")
    }

    public struct Authors {
        /// Path: `/repos/{owner}/{repo}/import/authors`
        public let path: String

        /// Get commit authors
        ///
        /// Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
        /// 
        /// This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#get-commit-authors)
        public func get(since: Int? = nil) -> Request<[OctoKit.PorterAuthor]> {
            .get(path, query: makeGetQuery(since))
        }

        private func makeGetQuery(_ since: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(since, forKey: "since")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Import.Authors {
    public func authorID(_ authorID: Int) -> WithAuthorID {
        WithAuthorID(path: "\(path)/\(authorID)")
    }

    public struct WithAuthorID {
        /// Path: `/repos/{owner}/{repo}/import/authors/{author_id}`
        public let path: String

        /// Map a commit author
        ///
        /// Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#map-a-commit-author)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.PorterAuthor> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The new Git author email.
            public var email: String?
            /// The new Git author name.
            public var name: String?

            public init(email: String? = nil, name: String? = nil) {
                self.email = email
                self.name = name
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Import {
    public var largeFiles: LargeFiles {
        LargeFiles(path: path + "/large_files")
    }

    public struct LargeFiles {
        /// Path: `/repos/{owner}/{repo}/import/large_files`
        public let path: String

        /// Get large files
        ///
        /// List files larger than 100MB found during the import
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#get-large-files)
        public var get: Request<[OctoKit.PorterLargeFile]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Import {
    public var lfs: Lfs {
        Lfs(path: path + "/lfs")
    }

    public struct Lfs {
        /// Path: `/repos/{owner}/{repo}/import/lfs`
        public let path: String

        /// Update Git LFS preference
        ///
        /// You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#update-git-lfs-preference)
        public func patch(useLfs: PatchRequest.UseLfs) -> Request<OctoKit.Import> {
            .patch(path, body: PatchRequest(useLfs: useLfs))
        }

        public struct PatchRequest: Encodable {
            /// Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).
            public var useLfs: UseLfs

            /// Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).
            public enum UseLfs: String, Codable, CaseIterable {
                case optIn = "opt_in"
                case optOut = "opt_out"
            }

            public init(useLfs: UseLfs) {
                self.useLfs = useLfs
            }

            private enum CodingKeys: String, CodingKey {
                case useLfs = "use_lfs"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var installation: Installation {
        Installation(path: path + "/installation")
    }

    public struct Installation {
        /// Path: `/repos/{owner}/{repo}/installation`
        public let path: String

        /// Get a repository installation for the authenticated app
        ///
        /// Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app)
        public var get: Request<OctoKit.Installation> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var interactionLimits: InteractionLimits {
        InteractionLimits(path: path + "/interaction-limits")
    }

    public struct InteractionLimits {
        /// Path: `/repos/{owner}/{repo}/interaction-limits`
        public let path: String

        /// Get interaction restrictions for a repository
        ///
        /// Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            /// Interaction Limits
            ///
            /// Interaction limit settings.
            public var interactionLimitResponse: OctoKit.InteractionLimitResponse?

            public init(interactionLimitResponse: OctoKit.InteractionLimitResponse? = nil) {
                self.interactionLimitResponse = interactionLimitResponse
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.interactionLimitResponse = try? container.decode(OctoKit.InteractionLimitResponse.self)
            }
        }

        /// Set interaction restrictions for a repository
        ///
        /// Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-a-repository)
        public func put(_ body: OctoKit.InteractionLimit) -> Request<OctoKit.InteractionLimitResponse> {
            .put(path, body: body)
        }

        /// Remove interaction restrictions for a repository
        ///
        /// Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-a-repository)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var invitations: Invitations {
        Invitations(path: path + "/invitations")
    }

    public struct Invitations {
        /// Path: `/repos/{owner}/{repo}/invitations`
        public let path: String

        /// List repository invitations
        ///
        /// When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-invitations)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.RepositoryInvitation]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Invitations {
    public func invitationID(_ invitationID: Int) -> WithInvitationID {
        WithInvitationID(path: "\(path)/\(invitationID)")
    }

    public struct WithInvitationID {
        /// Path: `/repos/{owner}/{repo}/invitations/{invitation_id}`
        public let path: String

        /// Update a repository invitation
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-a-repository-invitation)
        public func patch(permissions: PatchRequest.Permissions? = nil) -> Request<OctoKit.RepositoryInvitation> {
            .patch(path, body: PatchRequest(permissions: permissions))
        }

        public struct PatchRequest: Encodable {
            /// The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
            public var permissions: Permissions?

            /// The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
            public enum Permissions: String, Codable, CaseIterable {
                case read
                case write
                case maintain
                case triage
                case admin
            }

            public init(permissions: Permissions? = nil) {
                self.permissions = permissions
            }
        }

        /// Delete a repository invitation
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-repository-invitation)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var issues: Issues {
        Issues(path: path + "/issues")
    }

    public struct Issues {
        /// Path: `/repos/{owner}/{repo}/issues`
        public let path: String

        /// List repository issues
        ///
        /// List issues in a repository.
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-repository-issues)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Issue]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var milestone: String?
            public var state: State?
            public var assignee: String?
            public var creator: String?
            public var mentioned: String?
            public var labels: String?
            public var sort: Sort?
            public var direction: Direction?
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case all
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case comments
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(milestone: String? = nil, state: State? = nil, assignee: String? = nil, creator: String? = nil, mentioned: String? = nil, labels: String? = nil, sort: Sort? = nil, direction: Direction? = nil, since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.milestone = milestone
                self.state = state
                self.assignee = assignee
                self.creator = creator
                self.mentioned = mentioned
                self.labels = labels
                self.sort = sort
                self.direction = direction
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(milestone, forKey: "milestone")
                encoder.encode(state, forKey: "state")
                encoder.encode(assignee, forKey: "assignee")
                encoder.encode(creator, forKey: "creator")
                encoder.encode(mentioned, forKey: "mentioned")
                encoder.encode(labels, forKey: "labels")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create an issue
        ///
        /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#create-an-issue)
        public func post(_ body: PostRequest) -> Request<OctoKit.Issue> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The title of the issue.
            public var title: Title
            /// The contents of the issue.
            public var body: String?
            /// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
            public var assignee: String?
            public var milestone: Milestone?
            /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
            public var labels: [Label]?
            /// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
            public var assignees: [String]?

            /// The title of the issue.
            public enum Title: Encodable, Hashable {
                case string(String)
                case int(Int)

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .string(let value): try container.encode(value)
                    case .int(let value): try container.encode(value)
                    }
                }
            }

            public enum Milestone: Encodable, Hashable {
                case string(String)
                case int(Int)

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .string(let value): try container.encode(value)
                    case .int(let value): try container.encode(value)
                    }
                }
            }

            public enum Label: Encodable {
                case string(String)
                case object(Object)

                public struct Object: Encodable {
                    public var id: Int?
                    public var name: String?
                    public var description: String?
                    public var color: String?

                    public init(id: Int? = nil, name: String? = nil, description: String? = nil, color: String? = nil) {
                        self.id = id
                        self.name = name
                        self.description = description
                        self.color = color
                    }
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .string(let value): try container.encode(value)
                    case .object(let value): try container.encode(value)
                    }
                }
            }

            public init(title: Title, body: String? = nil, assignee: String? = nil, milestone: Milestone? = nil, labels: [Label]? = nil, assignees: [String]? = nil) {
                self.title = title
                self.body = body
                self.assignee = assignee
                self.milestone = milestone
                self.labels = labels
                self.assignees = assignees
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/issues/comments`
        public let path: String

        /// List issue comments for a repository
        ///
        /// By default, Issue Comments are ordered by ascending ID.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-issue-comments-for-a-repository)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.IssueComment]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var sort: Sort?
            public var direction: Direction?
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(sort: Sort? = nil, direction: Direction? = nil, since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.sort = sort
                self.direction = direction
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.Comments {
    public func commentID(_ commentID: Int) -> WithCommentID {
        WithCommentID(path: "\(path)/\(commentID)")
    }

    public struct WithCommentID {
        /// Path: `/repos/{owner}/{repo}/issues/comments/{comment_id}`
        public let path: String

        /// Get an issue comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-an-issue-comment)
        public var get: Request<OctoKit.IssueComment> {
            .get(path)
        }

        /// Update an issue comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#update-an-issue-comment)
        public func patch(body: String) -> Request<OctoKit.IssueComment> {
            .patch(path, body: ["body": body])
        }

        /// Delete an issue comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#delete-an-issue-comment)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.Comments.WithCommentID {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions`
        public let path: String

        /// List reactions for an issue comment
        ///
        /// List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue-comment)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Reaction]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var content: Content?
            public var perPage: Int?
            public var page: Int?

            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.content = content
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(content, forKey: "content")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create reaction for an issue comment
        ///
        /// Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue-comment)
        public func post(content: PostRequest.Content) -> Request<OctoKit.Reaction> {
            .post(path, body: PostRequest(content: content))
        }

        public struct PostRequest: Encodable {
            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
            public var content: Content

            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content) {
                self.content = content
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.Comments.WithCommentID.Reactions {
    public func reactionID(_ reactionID: Int) -> WithReactionID {
        WithReactionID(path: "\(path)/\(reactionID)")
    }

    public struct WithReactionID {
        /// Path: `/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}`
        public let path: String

        /// Delete an issue comment reaction
        ///
        /// **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
        /// 
        /// Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-an-issue-comment-reaction)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/repos/{owner}/{repo}/issues/events`
        public let path: String

        /// List issue events for a repository
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-issue-events-for-a-repository)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.IssueEvent]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.Events {
    public func eventID(_ eventID: Int) -> WithEventID {
        WithEventID(path: "\(path)/\(eventID)")
    }

    public struct WithEventID {
        /// Path: `/repos/{owner}/{repo}/issues/events/{event_id}`
        public let path: String

        /// Get an issue event
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-an-issue-event)
        public var get: Request<OctoKit.IssueEvent> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues {
    public func issueNumber(_ issueNumber: Int) -> WithIssueNumber {
        WithIssueNumber(path: "\(path)/\(issueNumber)")
    }

    public struct WithIssueNumber {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}`
        public let path: String

        /// Get an issue
        ///
        /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
        /// [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
        /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
        /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
        /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
        /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-an-issue)
        public var get: Request<OctoKit.Issue> {
            .get(path)
        }

        /// Update an issue
        ///
        /// Issue owners and users with push access can edit an issue.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues/#update-an-issue)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.Issue> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The title of the issue.
            public var title: Title?
            /// The contents of the issue.
            public var body: String?
            /// Login for the user that this issue should be assigned to. **This field is deprecated.**
            public var assignee: String?
            /// State of the issue. Either `open` or `closed`.
            public var state: State?
            public var milestone: Milestone?
            /// Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
            public var labels: [Label]?
            /// Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
            public var assignees: [String]?

            /// The title of the issue.
            public enum Title: Encodable, Hashable {
                case string(String)
                case int(Int)

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .string(let value): try container.encode(value)
                    case .int(let value): try container.encode(value)
                    }
                }
            }

            /// State of the issue. Either `open` or `closed`.
            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
            }

            public enum Milestone: Encodable, Hashable {
                case string(String)
                case int(Int)

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .string(let value): try container.encode(value)
                    case .int(let value): try container.encode(value)
                    }
                }
            }

            public enum Label: Encodable {
                case string(String)
                case object(Object)

                public struct Object: Encodable {
                    public var id: Int?
                    public var name: String?
                    public var description: String?
                    public var color: String?

                    public init(id: Int? = nil, name: String? = nil, description: String? = nil, color: String? = nil) {
                        self.id = id
                        self.name = name
                        self.description = description
                        self.color = color
                    }
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .string(let value): try container.encode(value)
                    case .object(let value): try container.encode(value)
                    }
                }
            }

            public init(title: Title? = nil, body: String? = nil, assignee: String? = nil, state: State? = nil, milestone: Milestone? = nil, labels: [Label]? = nil, assignees: [String]? = nil) {
                self.title = title
                self.body = body
                self.assignee = assignee
                self.state = state
                self.milestone = milestone
                self.labels = labels
                self.assignees = assignees
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var assignees: Assignees {
        Assignees(path: path + "/assignees")
    }

    public struct Assignees {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/assignees`
        public let path: String

        /// Add assignees to an issue
        ///
        /// Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#add-assignees-to-an-issue)
        public func post(assignees: [String]? = nil) -> Request<OctoKit.Issue> {
            .post(path, body: ["assignees": assignees])
        }

        /// Remove assignees from an issue
        ///
        /// Removes one or more assignees from an issue.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue)
        public func delete(assignees: [String]? = nil) -> Request<OctoKit.Issue> {
            .delete(path, body: ["assignees": assignees])
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/comments`
        public let path: String

        /// List issue comments
        ///
        /// Issue Comments are ordered by ascending ID.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-issue-comments)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.IssueComment]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public init(since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create an issue comment
        ///
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#create-an-issue-comment)
        public func post(body: String) -> Request<OctoKit.IssueComment> {
            .post(path, body: ["body": body])
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/events`
        public let path: String

        /// List issue events
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-issue-events)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.IssueEventForIssue]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/labels`
        public let path: String

        /// List labels for an issue
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-labels-for-an-issue)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Label]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Add labels to an issue
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue)
        public func post(_ body: PostRequest? = nil) -> Request<[OctoKit.Label]> {
            .post(path, body: body)
        }

        public enum PostRequest: Encodable {
            case object1(Object1)
            case strings([String])
            case object2(Object2)
            case placeholderItems([PlaceholderItem])
            case string(String)

            public struct Object1: Encodable {
                /// The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
                public var labels: [String]?

                public init(labels: [String]? = nil) {
                    self.labels = labels
                }
            }

            public struct Object2: Encodable {
                public var labels: [Label]?

                public struct Label: Encodable {
                    public var name: String

                    public init(name: String) {
                        self.name = name
                    }
                }

                public init(labels: [Label]? = nil) {
                    self.labels = labels
                }
            }

            public struct PlaceholderItem: Encodable {
                public var name: String

                public init(name: String) {
                    self.name = name
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object1(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                case .object2(let value): try container.encode(value)
                case .placeholderItems(let value): try container.encode(value)
                case .string(let value): try container.encode(value)
                }
            }
        }

        /// Set labels for an issue
        ///
        /// Removes any previous labels and sets the new labels for an issue.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue)
        public func put(_ body: PutRequest? = nil) -> Request<[OctoKit.Label]> {
            .put(path, body: body)
        }

        public enum PutRequest: Encodable {
            case object1(Object1)
            case strings([String])
            case object2(Object2)
            case placeholderItems([PlaceholderItem])
            case string(String)

            public struct Object1: Encodable {
                /// The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
                public var labels: [String]?

                public init(labels: [String]? = nil) {
                    self.labels = labels
                }
            }

            public struct Object2: Encodable {
                public var labels: [Label]?

                public struct Label: Encodable {
                    public var name: String

                    public init(name: String) {
                        self.name = name
                    }
                }

                public init(labels: [Label]? = nil) {
                    self.labels = labels
                }
            }

            public struct PlaceholderItem: Encodable {
                public var name: String

                public init(name: String) {
                    self.name = name
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object1(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                case .object2(let value): try container.encode(value)
                case .placeholderItems(let value): try container.encode(value)
                case .string(let value): try container.encode(value)
                }
            }
        }

        /// Remove all labels from an issue
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#remove-all-labels-from-an-issue)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber.Labels {
    public func name(_ name: String) -> WithName {
        WithName(path: "\(path)/\(name)")
    }

    public struct WithName {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}`
        public let path: String

        /// Remove a label from an issue
        ///
        /// Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#remove-a-label-from-an-issue)
        public var delete: Request<[OctoKit.Label]> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var lock: Lock {
        Lock(path: path + "/lock")
    }

    public struct Lock {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/lock`
        public let path: String

        /// Lock an issue
        ///
        /// Users with push access can lock an issue or pull request's conversation.
        /// 
        /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#lock-an-issue)
        public func put(lockReason: PutRequest.LockReason? = nil) -> Request<Void> {
            .put(path, body: PutRequest(lockReason: lockReason))
        }

        public struct PutRequest: Encodable {
            /// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
            /// \* `off-topic`  
            /// \* `too heated`  
            /// \* `resolved`  
            /// \* `spam`
            public var lockReason: LockReason?

            /// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
            /// \* `off-topic`  
            /// \* `too heated`  
            /// \* `resolved`  
            /// \* `spam`
            public enum LockReason: String, Codable, CaseIterable {
                case offTopic = "off-topic"
                case tooHeated = "too heated"
                case resolved
                case spam
            }

            public init(lockReason: LockReason? = nil) {
                self.lockReason = lockReason
            }

            private enum CodingKeys: String, CodingKey {
                case lockReason = "lock_reason"
            }
        }

        /// Unlock an issue
        ///
        /// Users with push access can unlock an issue's conversation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#unlock-an-issue)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/reactions`
        public let path: String

        /// List reactions for an issue
        ///
        /// List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Reaction]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var content: Content?
            public var perPage: Int?
            public var page: Int?

            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.content = content
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(content, forKey: "content")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create reaction for an issue
        ///
        /// Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue)
        public func post(content: PostRequest.Content) -> Request<OctoKit.Reaction> {
            .post(path, body: PostRequest(content: content))
        }

        public struct PostRequest: Encodable {
            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
            public var content: Content

            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content) {
                self.content = content
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber.Reactions {
    public func reactionID(_ reactionID: Int) -> WithReactionID {
        WithReactionID(path: "\(path)/\(reactionID)")
    }

    public struct WithReactionID {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}`
        public let path: String

        /// Delete an issue reaction
        ///
        /// **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
        /// 
        /// Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-an-issue-reaction)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var timeline: Timeline {
        Timeline(path: path + "/timeline")
    }

    public struct Timeline {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/timeline`
        public let path: String

        /// List timeline events for an issue
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-timeline-events-for-an-issue)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.TimelineIssueEvents]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var keys: Keys {
        Keys(path: path + "/keys")
    }

    public struct Keys {
        /// Path: `/repos/{owner}/{repo}/keys`
        public let path: String

        /// List deploy keys
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-deploy-keys)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.DeployKey]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a deploy key
        ///
        /// You can create a read-only deploy key.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-deploy-key)
        public func post(_ body: PostRequest) -> Request<OctoKit.DeployKey> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// A name for the key.
            public var title: String?
            /// The contents of the key.
            public var key: String
            /// If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
            ///   
            /// Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/)."
            public var isReadOnly: Bool?

            public init(title: String? = nil, key: String, isReadOnly: Bool? = nil) {
                self.title = title
                self.key = key
                self.isReadOnly = isReadOnly
            }

            private enum CodingKeys: String, CodingKey {
                case title
                case key
                case isReadOnly = "read_only"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Keys {
    public func keyID(_ keyID: Int) -> WithKeyID {
        WithKeyID(path: "\(path)/\(keyID)")
    }

    public struct WithKeyID {
        /// Path: `/repos/{owner}/{repo}/keys/{key_id}`
        public let path: String

        /// Get a deploy key
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-deploy-key)
        public var get: Request<OctoKit.DeployKey> {
            .get(path)
        }

        /// Delete a deploy key
        ///
        /// Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-deploy-key)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/repos/{owner}/{repo}/labels`
        public let path: String

        /// List labels for a repository
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-labels-for-a-repository)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Label]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a label
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#create-a-label)
        public func post(_ body: PostRequest) -> Request<OctoKit.Label> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
            public var name: String
            /// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
            public var color: String?
            /// A short description of the label. Must be 100 characters or fewer.
            public var description: String?

            public init(name: String, color: String? = nil, description: String? = nil) {
                self.name = name
                self.color = color
                self.description = description
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Labels {
    public func name(_ name: String) -> WithName {
        WithName(path: "\(path)/\(name)")
    }

    public struct WithName {
        /// Path: `/repos/{owner}/{repo}/labels/{name}`
        public let path: String

        /// Get a label
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-a-label)
        public var get: Request<OctoKit.Label> {
            .get(path)
        }

        /// Update a label
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#update-a-label)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.Label> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
            public var newName: String?
            /// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
            public var color: String?
            /// A short description of the label. Must be 100 characters or fewer.
            public var description: String?

            public init(newName: String? = nil, color: String? = nil, description: String? = nil) {
                self.newName = newName
                self.color = color
                self.description = description
            }

            private enum CodingKeys: String, CodingKey {
                case newName = "new_name"
                case color
                case description
            }
        }

        /// Delete a label
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#delete-a-label)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var languages: Languages {
        Languages(path: path + "/languages")
    }

    public struct Languages {
        /// Path: `/repos/{owner}/{repo}/languages`
        public let path: String

        /// List repository languages
        ///
        /// Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-languages)
        public var get: Request<[String: Int]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var lfs: Lfs {
        Lfs(path: path + "/lfs")
    }

    public struct Lfs {
        /// Path: `/repos/{owner}/{repo}/lfs`
        public let path: String

        /// Enable Git LFS for a repository
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#enable-git-lfs-for-a-repository)
        public var put: Request<[String: AnyJSON]> {
            .put(path)
        }

        /// Disable Git LFS for a repository
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#disable-git-lfs-for-a-repository)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var license: License {
        License(path: path + "/license")
    }

    public struct License {
        /// Path: `/repos/{owner}/{repo}/license`
        public let path: String

        /// Get the license for a repository
        ///
        /// This method returns the contents of the repository's license file, if one is detected.
        /// 
        /// Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/licenses/#get-the-license-for-a-repository)
        public var get: Request<OctoKit.LicenseContent> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var mergeUpstream: MergeUpstream {
        MergeUpstream(path: path + "/merge-upstream")
    }

    public struct MergeUpstream {
        /// Path: `/repos/{owner}/{repo}/merge-upstream`
        public let path: String

        /// Sync a fork branch with the upstream repository
        ///
        /// Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#sync-a-fork-branch-with-the-upstream-repository)
        public func post(branch: String) -> Request<OctoKit.MergedUpstream> {
            .post(path, body: ["branch": branch])
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var merges: Merges {
        Merges(path: path + "/merges")
    }

    public struct Merges {
        /// Path: `/repos/{owner}/{repo}/merges`
        public let path: String

        /// Merge a branch
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#merge-a-branch)
        public func post(_ body: PostRequest) -> Request<OctoKit.Commit> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The name of the base branch that the head will be merged into.
            public var base: String
            /// The head to merge. This can be a branch name or a commit SHA1.
            public var head: String
            /// Commit message to use for the merge commit. If omitted, a default message will be used.
            public var commitMessage: String?

            public init(base: String, head: String, commitMessage: String? = nil) {
                self.base = base
                self.head = head
                self.commitMessage = commitMessage
            }

            private enum CodingKeys: String, CodingKey {
                case base
                case head
                case commitMessage = "commit_message"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var milestones: Milestones {
        Milestones(path: path + "/milestones")
    }

    public struct Milestones {
        /// Path: `/repos/{owner}/{repo}/milestones`
        public let path: String

        /// List milestones
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-milestones)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Milestone]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var state: State?
            public var sort: Sort?
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case all
            }

            public enum Sort: String, Codable, CaseIterable {
                case dueOn = "due_on"
                case completeness
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(state: State? = nil, sort: Sort? = nil, direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.state = state
                self.sort = sort
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(state, forKey: "state")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a milestone
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#create-a-milestone)
        public func post(_ body: PostRequest) -> Request<OctoKit.Milestone> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The title of the milestone.
            public var title: String
            /// The state of the milestone. Either `open` or `closed`.
            public var state: State?
            /// A description of the milestone.
            public var description: String?
            /// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
            public var dueOn: Date?

            /// The state of the milestone. Either `open` or `closed`.
            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
            }

            public init(title: String, state: State? = nil, description: String? = nil, dueOn: Date? = nil) {
                self.title = title
                self.state = state
                self.description = description
                self.dueOn = dueOn
            }

            private enum CodingKeys: String, CodingKey {
                case title
                case state
                case description
                case dueOn = "due_on"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Milestones {
    public func milestoneNumber(_ milestoneNumber: Int) -> WithMilestoneNumber {
        WithMilestoneNumber(path: "\(path)/\(milestoneNumber)")
    }

    public struct WithMilestoneNumber {
        /// Path: `/repos/{owner}/{repo}/milestones/{milestone_number}`
        public let path: String

        /// Get a milestone
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-a-milestone)
        public var get: Request<OctoKit.Milestone> {
            .get(path)
        }

        /// Update a milestone
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#update-a-milestone)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.Milestone> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The title of the milestone.
            public var title: String?
            /// The state of the milestone. Either `open` or `closed`.
            public var state: State?
            /// A description of the milestone.
            public var description: String?
            /// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
            public var dueOn: Date?

            /// The state of the milestone. Either `open` or `closed`.
            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
            }

            public init(title: String? = nil, state: State? = nil, description: String? = nil, dueOn: Date? = nil) {
                self.title = title
                self.state = state
                self.description = description
                self.dueOn = dueOn
            }

            private enum CodingKeys: String, CodingKey {
                case title
                case state
                case description
                case dueOn = "due_on"
            }
        }

        /// Delete a milestone
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#delete-a-milestone)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Milestones.WithMilestoneNumber {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/repos/{owner}/{repo}/milestones/{milestone_number}/labels`
        public let path: String

        /// List labels for issues in a milestone
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Label]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var notifications: Notifications {
        Notifications(path: path + "/notifications")
    }

    public struct Notifications {
        /// Path: `/repos/{owner}/{repo}/notifications`
        public let path: String

        /// List repository notifications for the authenticated user
        ///
        /// List all notifications for the current user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Thread]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var isAll: Bool?
            public var isParticipating: Bool?
            public var since: Date?
            public var before: Date?
            public var perPage: Int?
            public var page: Int?

            public init(isAll: Bool? = nil, isParticipating: Bool? = nil, since: Date? = nil, before: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.isAll = isAll
                self.isParticipating = isParticipating
                self.since = since
                self.before = before
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isAll, forKey: "all")
                encoder.encode(isParticipating, forKey: "participating")
                encoder.encode(since, forKey: "since")
                encoder.encode(before, forKey: "before")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Mark repository notifications as read
        ///
        /// Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read)
        public func put(lastReadAt: Date? = nil) -> Request<PutResponse> {
            .put(path, body: ["last_read_at": lastReadAt])
        }

        public struct PutResponse: Decodable {
            public var message: String?
            public var url: String?

            public init(message: String? = nil, url: String? = nil) {
                self.message = message
                self.url = url
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var pages: Pages {
        Pages(path: path + "/pages")
    }

    public struct Pages {
        /// Path: `/repos/{owner}/{repo}/pages`
        public let path: String

        /// Get a GitHub Pages site
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-github-pages-site)
        public var get: Request<OctoKit.Page> {
            .get(path)
        }

        /// Create a GitHub Pages site
        ///
        /// Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-github-pages-site)
        public func post(source: PostRequest.Source) -> Request<OctoKit.Page> {
            .post(path, body: PostRequest(source: source))
        }

        /// The source branch and directory used to publish your Pages site.
        public struct PostRequest: Encodable {
            /// The source branch and directory used to publish your Pages site.
            public var source: Source

            /// The source branch and directory used to publish your Pages site.
            public struct Source: Encodable {
                /// The repository branch used to publish your site's source files.
                public var branch: String
                /// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
                public var path: Path?

                /// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
                public enum Path: String, Codable, CaseIterable {
                    case slash = "/"
                    case docs = "/docs"
                }

                public init(branch: String, path: Path? = nil) {
                    self.branch = branch
                    self.path = path
                }
            }

            public init(source: Source) {
                self.source = source
            }
        }

        /// Update information about a GitHub Pages site
        ///
        /// Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-information-about-a-github-pages-site)
        public func put(_ body: PutRequest) -> Request<Void> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)."
            public var cname: String?
            /// Specify whether HTTPS should be enforced for the repository.
            public var isHTTPSEnforced: Bool?
            /// Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
            public var isPublic: Bool?
            public var source: Source?

            public struct Source: Encodable {
                /// Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
                public var a: A?
                /// Update the source for the repository. Must include the branch name and path.
                public var b: B?

                /// Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
                public enum A: String, Codable, CaseIterable {
                    case ghPages = "gh-pages"
                    case master
                    case masterDocs = "master /docs"
                }

                /// Update the source for the repository. Must include the branch name and path.
                public struct B: Encodable {
                    /// The repository branch used to publish your site's source files.
                    public var branch: String
                    /// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
                    public var path: Path

                    /// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
                    public enum Path: String, Codable, CaseIterable {
                        case slash = "/"
                        case docs = "/docs"
                    }

                    public init(branch: String, path: Path) {
                        self.branch = branch
                        self.path = path
                    }
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = a { try container.encode(value) }
                    if let value = b { try container.encode(value) }
                }
            }

            public init(cname: String? = nil, isHTTPSEnforced: Bool? = nil, isPublic: Bool? = nil, source: Source? = nil) {
                self.cname = cname
                self.isHTTPSEnforced = isHTTPSEnforced
                self.isPublic = isPublic
                self.source = source
            }

            private enum CodingKeys: String, CodingKey {
                case cname
                case isHTTPSEnforced = "https_enforced"
                case isPublic = "public"
                case source
            }
        }

        /// Delete a GitHub Pages site
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-github-pages-site)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pages {
    public var builds: Builds {
        Builds(path: path + "/builds")
    }

    public struct Builds {
        /// Path: `/repos/{owner}/{repo}/pages/builds`
        public let path: String

        /// List GitHub Pages builds
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-github-pages-builds)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.PageBuild]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Request a GitHub Pages build
        ///
        /// You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
        /// 
        /// Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#request-a-github-pages-build)
        public var post: Request<OctoKit.PageBuildStatus> {
            .post(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pages.Builds {
    public var latest: Latest {
        Latest(path: path + "/latest")
    }

    public struct Latest {
        /// Path: `/repos/{owner}/{repo}/pages/builds/latest`
        public let path: String

        /// Get latest Pages build
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-latest-pages-build)
        public var get: Request<OctoKit.PageBuild> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pages.Builds {
    public func buildID(_ buildID: Int) -> WithBuildID {
        WithBuildID(path: "\(path)/\(buildID)")
    }

    public struct WithBuildID {
        /// Path: `/repos/{owner}/{repo}/pages/builds/{build_id}`
        public let path: String

        /// Get GitHub Pages build
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-github-pages-build)
        public var get: Request<OctoKit.PageBuild> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pages {
    public var health: Health {
        Health(path: path + "/health")
    }

    public struct Health {
        /// Path: `/repos/{owner}/{repo}/pages/health`
        public let path: String

        /// Get a DNS health check for GitHub Pages
        ///
        /// Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
        /// 
        /// The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
        /// 
        /// Users must have admin or owner permissions. GitHub Apps must have the `pages:write` and `administration:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-dns-health-check-for-github-pages)
        public var get: Request<OctoKit.PagesHealthCheck> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/repos/{owner}/{repo}/projects`
        public let path: String

        /// List repository projects
        ///
        /// Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-repository-projects)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Project]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var state: State?
            public var perPage: Int?
            public var page: Int?

            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case all
            }

            public init(state: State? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.state = state
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(state, forKey: "state")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a repository project
        ///
        /// Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#create-a-repository-project)
        public func post(_ body: PostRequest) -> Request<OctoKit.Project> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The name of the project.
            public var name: String
            /// The description of the project.
            public var body: String?

            public init(name: String, body: String? = nil) {
                self.name = name
                self.body = body
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var pulls: Pulls {
        Pulls(path: path + "/pulls")
    }

    public struct Pulls {
        /// Path: `/repos/{owner}/{repo}/pulls`
        public let path: String

        /// List pull requests
        ///
        /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-pull-requests)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.PullRequestSimple]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var state: State?
            public var head: String?
            public var base: String?
            public var sort: Sort?
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case all
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case popularity
                case longRunning = "long-running"
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(state: State? = nil, head: String? = nil, base: String? = nil, sort: Sort? = nil, direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.state = state
                self.head = head
                self.base = base
                self.sort = sort
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(state, forKey: "state")
                encoder.encode(head, forKey: "head")
                encoder.encode(base, forKey: "base")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a pull request
        ///
        /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
        /// 
        /// You can create a new pull request.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#create-a-pull-request)
        public func post(_ body: PostRequest) -> Request<OctoKit.PullRequest> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The title of the new pull request.
            public var title: String?
            /// The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
            public var head: String
            /// The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
            public var base: String
            /// The contents of the pull request.
            public var body: String?
            /// Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
            public var maintainerCanModify: Bool?
            /// Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
            public var isDraft: Bool?
            public var issue: Int?

            public init(title: String? = nil, head: String, base: String, body: String? = nil, maintainerCanModify: Bool? = nil, isDraft: Bool? = nil, issue: Int? = nil) {
                self.title = title
                self.head = head
                self.base = base
                self.body = body
                self.maintainerCanModify = maintainerCanModify
                self.isDraft = isDraft
                self.issue = issue
            }

            private enum CodingKeys: String, CodingKey {
                case title
                case head
                case base
                case body
                case maintainerCanModify = "maintainer_can_modify"
                case isDraft = "draft"
                case issue
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/pulls/comments`
        public let path: String

        /// List review comments in a repository
        ///
        /// Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.PullRequestReviewComment]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var sort: Sort?
            public var direction: Direction?
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case createdAt = "created_at"
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(sort: Sort? = nil, direction: Direction? = nil, since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.sort = sort
                self.direction = direction
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.Comments {
    public func commentID(_ commentID: Int) -> WithCommentID {
        WithCommentID(path: "\(path)/\(commentID)")
    }

    public struct WithCommentID {
        /// Path: `/repos/{owner}/{repo}/pulls/comments/{comment_id}`
        public let path: String

        /// Get a review comment for a pull request
        ///
        /// Provides details for a review comment.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#get-a-review-comment-for-a-pull-request)
        public var get: Request<OctoKit.PullRequestReviewComment> {
            .get(path)
        }

        /// Update a review comment for a pull request
        ///
        /// Enables you to edit a review comment.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#update-a-review-comment-for-a-pull-request)
        public func patch(body: String) -> Request<OctoKit.PullRequestReviewComment> {
            .patch(path, body: ["body": body])
        }

        /// Delete a review comment for a pull request
        ///
        /// Deletes a review comment.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#delete-a-review-comment-for-a-pull-request)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.Comments.WithCommentID {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions`
        public let path: String

        /// List reactions for a pull request review comment
        ///
        /// List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Reaction]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var content: Content?
            public var perPage: Int?
            public var page: Int?

            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.content = content
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(content, forKey: "content")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create reaction for a pull request review comment
        ///
        /// Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment)
        public func post(content: PostRequest.Content) -> Request<OctoKit.Reaction> {
            .post(path, body: PostRequest(content: content))
        }

        public struct PostRequest: Encodable {
            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
            public var content: Content

            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content) {
                self.content = content
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.Comments.WithCommentID.Reactions {
    public func reactionID(_ reactionID: Int) -> WithReactionID {
        WithReactionID(path: "\(path)/\(reactionID)")
    }

    public struct WithReactionID {
        /// Path: `/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}`
        public let path: String

        /// Delete a pull request comment reaction
        ///
        /// **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
        /// 
        /// Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-a-pull-request-comment-reaction)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls {
    public func pullNumber(_ pullNumber: Int) -> WithPullNumber {
        WithPullNumber(path: "\(path)/\(pullNumber)")
    }

    public struct WithPullNumber {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}`
        public let path: String

        /// Get a pull request
        ///
        /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists details of a pull request by providing its number.
        /// 
        /// When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
        /// 
        /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
        /// 
        /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
        /// 
        /// *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
        /// *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
        /// *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
        /// 
        /// Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#get-a-pull-request)
        public var get: Request<OctoKit.PullRequest> {
            .get(path)
        }

        /// Update a pull request
        ///
        /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls/#update-a-pull-request)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.PullRequest> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The title of the pull request.
            public var title: String?
            /// The contents of the pull request.
            public var body: String?
            /// State of this Pull Request. Either `open` or `closed`.
            public var state: State?
            /// The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
            public var base: String?
            /// Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
            public var maintainerCanModify: Bool?

            /// State of this Pull Request. Either `open` or `closed`.
            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
            }

            public init(title: String? = nil, body: String? = nil, state: State? = nil, base: String? = nil, maintainerCanModify: Bool? = nil) {
                self.title = title
                self.body = body
                self.state = state
                self.base = base
                self.maintainerCanModify = maintainerCanModify
            }

            private enum CodingKeys: String, CodingKey {
                case title
                case body
                case state
                case base
                case maintainerCanModify = "maintainer_can_modify"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var codespaces: Codespaces {
        Codespaces(path: path + "/codespaces")
    }

    public struct Codespaces {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/codespaces`
        public let path: String

        /// Create a codespace from a pull request
        ///
        /// Creates a codespace owned by the authenticated user for the specified pull request.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#create-a-codespace-from-a-pull-request)
        public func post(_ body: PostRequest) -> Request<OctoKit.Codespace> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// Location for this codespace
            public var location: String
            /// Machine type to use for this codespace
            public var machine: String?
            /// Working directory for this codespace
            public var workingDirectory: String?
            /// Time in minutes before codespace stops from inactivity
            public var idleTimeoutMinutes: Int?

            public init(location: String, machine: String? = nil, workingDirectory: String? = nil, idleTimeoutMinutes: Int? = nil) {
                self.location = location
                self.machine = machine
                self.workingDirectory = workingDirectory
                self.idleTimeoutMinutes = idleTimeoutMinutes
            }

            private enum CodingKeys: String, CodingKey {
                case location
                case machine
                case workingDirectory = "working_directory"
                case idleTimeoutMinutes = "idle_timeout_minutes"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/comments`
        public let path: String

        /// List review comments on a pull request
        ///
        /// Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.PullRequestReviewComment]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var sort: Sort?
            public var direction: Direction?
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(sort: Sort? = nil, direction: Direction? = nil, since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.sort = sort
                self.direction = direction
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a review comment for a pull request
        ///
        /// Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
        /// 
        /// You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
        /// 
        /// **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request)
        public func post(_ body: PostRequest) -> Request<OctoKit.PullRequestReviewComment> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The text of the review comment.
            public var body: String
            /// The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
            public var commitID: String?
            /// The relative path to the file that necessitates a comment.
            public var path: String?
            /// **Required without `comfort-fade` preview unless using `in_reply_to`**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
            public var position: Int?
            /// **Required with `comfort-fade` preview unless using `in_reply_to`**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
            public var side: Side?
            /// **Required with `comfort-fade` preview unless using `in_reply_to`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
            public var line: Int?
            /// **Required when using multi-line comments unless using `in_reply_to`**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
            public var startLine: Int?
            /// **Required when using multi-line comments unless using `in_reply_to`**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
            public var startSide: StartSide?
            /// The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
            public var inReplyTo: Int?

            /// **Required with `comfort-fade` preview unless using `in_reply_to`**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
            public enum Side: String, Codable, CaseIterable {
                case left = "LEFT"
                case right = "RIGHT"
            }

            /// **Required when using multi-line comments unless using `in_reply_to`**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
            public enum StartSide: String, Codable, CaseIterable {
                case left = "LEFT"
                case right = "RIGHT"
                case side
            }

            public init(body: String, commitID: String? = nil, path: String? = nil, position: Int? = nil, side: Side? = nil, line: Int? = nil, startLine: Int? = nil, startSide: StartSide? = nil, inReplyTo: Int? = nil) {
                self.body = body
                self.commitID = commitID
                self.path = path
                self.position = position
                self.side = side
                self.line = line
                self.startLine = startLine
                self.startSide = startSide
                self.inReplyTo = inReplyTo
            }

            private enum CodingKeys: String, CodingKey {
                case body
                case commitID = "commit_id"
                case path
                case position
                case side
                case line
                case startLine = "start_line"
                case startSide = "start_side"
                case inReplyTo = "in_reply_to"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Comments {
    public func commentID(_ commentID: Int) -> WithCommentID {
        WithCommentID(path: "\(path)/\(commentID)")
    }

    public struct WithCommentID {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Comments.WithCommentID {
    public var replies: Replies {
        Replies(path: path + "/replies")
    }

    public struct Replies {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies`
        public let path: String

        /// Create a reply for a review comment
        ///
        /// Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#create-a-reply-for-a-review-comment)
        public func post(body: String) -> Request<OctoKit.PullRequestReviewComment> {
            .post(path, body: ["body": body])
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var commits: Commits {
        Commits(path: path + "/commits")
    }

    public struct Commits {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/commits`
        public let path: String

        /// List commits on a pull request
        ///
        /// Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-commits-on-a-pull-request)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Commit]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var files: Files {
        Files(path: path + "/files")
    }

    public struct Files {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/files`
        public let path: String

        /// List pull requests files
        ///
        /// **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-pull-requests-files)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.DiffEntry]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var merge: Merge {
        Merge(path: path + "/merge")
    }

    public struct Merge {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/merge`
        public let path: String

        /// Check if a pull request has been merged
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#check-if-a-pull-request-has-been-merged)
        public var get: Request<Void> {
            .get(path)
        }

        /// Merge a pull request
        ///
        /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#merge-a-pull-request)
        public func put(_ body: PutRequest? = nil) -> Request<OctoKit.PullRequestMergeResult> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// Title for the automatic commit message.
            public var commitTitle: String?
            /// Extra detail to append to automatic commit message.
            public var commitMessage: String?
            /// SHA that pull request head must match to allow merge.
            public var sha: String?
            /// Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
            public var mergeMethod: MergeMethod?

            /// Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
            public enum MergeMethod: String, Codable, CaseIterable {
                case merge
                case squash
                case rebase
            }

            public init(commitTitle: String? = nil, commitMessage: String? = nil, sha: String? = nil, mergeMethod: MergeMethod? = nil) {
                self.commitTitle = commitTitle
                self.commitMessage = commitMessage
                self.sha = sha
                self.mergeMethod = mergeMethod
            }

            private enum CodingKeys: String, CodingKey {
                case commitTitle = "commit_title"
                case commitMessage = "commit_message"
                case sha
                case mergeMethod = "merge_method"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var requestedReviewers: RequestedReviewers {
        RequestedReviewers(path: path + "/requested_reviewers")
    }

    public struct RequestedReviewers {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`
        public let path: String

        /// List requested reviewers for a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-requested-reviewers-for-a-pull-request)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<OctoKit.PullRequestReviewRequest> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Request reviewers for a pull request
        ///
        /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request)
        public func post(_ body: PostRequest? = nil) -> Request<OctoKit.PullRequestSimple> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// An array of user `login`s that will be requested.
            public var reviewers: [String]?
            /// An array of team `slug`s that will be requested.
            public var teamReviewers: [String]?

            public init(reviewers: [String]? = nil, teamReviewers: [String]? = nil) {
                self.reviewers = reviewers
                self.teamReviewers = teamReviewers
            }

            private enum CodingKeys: String, CodingKey {
                case reviewers
                case teamReviewers = "team_reviewers"
            }
        }

        /// Remove requested reviewers from a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request)
        public func delete(_ body: DeleteRequest) -> Request<OctoKit.PullRequestSimple> {
            .delete(path, body: body)
        }

        public struct DeleteRequest: Encodable {
            /// An array of user `login`s that will be removed.
            public var reviewers: [String]
            /// An array of team `slug`s that will be removed.
            public var teamReviewers: [String]?

            public init(reviewers: [String], teamReviewers: [String]? = nil) {
                self.reviewers = reviewers
                self.teamReviewers = teamReviewers
            }

            private enum CodingKeys: String, CodingKey {
                case reviewers
                case teamReviewers = "team_reviewers"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var reviews: Reviews {
        Reviews(path: path + "/reviews")
    }

    public struct Reviews {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews`
        public let path: String

        /// List reviews for a pull request
        ///
        /// The list of reviews returns in chronological order.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-reviews-for-a-pull-request)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.PullRequestReview]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a review for a pull request
        ///
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        /// 
        /// Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
        /// 
        /// **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
        /// 
        /// The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#create-a-review-for-a-pull-request)
        public func post(_ body: PostRequest? = nil) -> Request<OctoKit.PullRequestReview> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
            public var commitID: String?
            /// **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
            public var body: String?
            /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
            public var event: Event?
            /// Use the following table to specify the location, destination, and contents of the draft review comment.
            public var comments: [Commants]?

            /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
            public enum Event: String, Codable, CaseIterable {
                case approve = "APPROVE"
                case requestChanges = "REQUEST_CHANGES"
                case comment = "COMMENT"
            }

            public struct Commants: Encodable {
                /// The relative path to the file that necessitates a review comment.
                public var path: String
                /// The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
                public var position: Int?
                /// Text of the review comment.
                public var body: String
                /// Example: 28
                public var line: Int?
                /// Example: "RIGHT"
                public var side: String?
                /// Example: 26
                public var startLine: Int?
                /// Example: "LEFT"
                public var startSide: String?

                public init(path: String, position: Int? = nil, body: String, line: Int? = nil, side: String? = nil, startLine: Int? = nil, startSide: String? = nil) {
                    self.path = path
                    self.position = position
                    self.body = body
                    self.line = line
                    self.side = side
                    self.startLine = startLine
                    self.startSide = startSide
                }

                private enum CodingKeys: String, CodingKey {
                    case path
                    case position
                    case body
                    case line
                    case side
                    case startLine = "start_line"
                    case startSide = "start_side"
                }
            }

            public init(commitID: String? = nil, body: String? = nil, event: Event? = nil, comments: [Commants]? = nil) {
                self.commitID = commitID
                self.body = body
                self.event = event
                self.comments = comments
            }

            private enum CodingKeys: String, CodingKey {
                case commitID = "commit_id"
                case body
                case event
                case comments
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Reviews {
    public func reviewID(_ reviewID: Int) -> WithReviewID {
        WithReviewID(path: "\(path)/\(reviewID)")
    }

    public struct WithReviewID {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`
        public let path: String

        /// Get a review for a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#get-a-review-for-a-pull-request)
        public var get: Request<OctoKit.PullRequestReview> {
            .get(path)
        }

        /// Update a review for a pull request
        ///
        /// Update the review summary comment with new text.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#update-a-review-for-a-pull-request)
        public func put(body: String) -> Request<OctoKit.PullRequestReview> {
            .put(path, body: ["body": body])
        }

        /// Delete a pending review for a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request)
        public var delete: Request<OctoKit.PullRequestReview> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Reviews.WithReviewID {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments`
        public let path: String

        /// List comments for a pull request review
        ///
        /// List comments for a specific pull request review.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.ReviewComment]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Reviews.WithReviewID {
    public var dismissals: Dismissals {
        Dismissals(path: path + "/dismissals")
    }

    public struct Dismissals {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals`
        public let path: String

        /// Dismiss a review for a pull request
        ///
        /// **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#dismiss-a-review-for-a-pull-request)
        public func put(_ body: PutRequest) -> Request<OctoKit.PullRequestReview> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// The message for the pull request review dismissal
            public var message: String
            /// Example: "APPROVE"
            public var event: String?

            public init(message: String, event: String? = nil) {
                self.message = message
                self.event = event
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Reviews.WithReviewID {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events`
        public let path: String

        /// Submit a review for a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request)
        public func post(_ body: PostRequest) -> Request<OctoKit.PullRequestReview> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The body text of the pull request review
            public var body: String?
            /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
            public var event: Event

            /// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
            public enum Event: String, Codable, CaseIterable {
                case approve = "APPROVE"
                case requestChanges = "REQUEST_CHANGES"
                case comment = "COMMENT"
            }

            public init(body: String? = nil, event: Event) {
                self.body = body
                self.event = event
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var updateBranch: UpdateBranch {
        UpdateBranch(path: path + "/update-branch")
    }

    public struct UpdateBranch {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/update-branch`
        public let path: String

        /// Update a pull request branch
        ///
        /// Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#update-a-pull-request-branch)
        public func put(expectedHeadSha: String? = nil) -> Request<PutResponse> {
            .put(path, body: ["expected_head_sha": expectedHeadSha])
        }

        public struct PutResponse: Decodable {
            public var message: String?
            public var url: String?

            public init(message: String? = nil, url: String? = nil) {
                self.message = message
                self.url = url
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var readme: Readme {
        Readme(path: path + "/readme")
    }

    public struct Readme {
        /// Path: `/repos/{owner}/{repo}/readme`
        public let path: String

        /// Get a repository README
        ///
        /// Gets the preferred README for a repository.
        /// 
        /// READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-repository-readme)
        public func get(ref: String? = nil) -> Request<OctoKit.ContentFile> {
            .get(path, query: makeGetQuery(ref))
        }

        private func makeGetQuery(_ ref: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(ref, forKey: "ref")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Readme {
    public func dir(_ dir: String) -> WithDir {
        WithDir(path: "\(path)/\(dir)")
    }

    public struct WithDir {
        /// Path: `/repos/{owner}/{repo}/readme/{dir}`
        public let path: String

        /// Get a repository README for a directory
        ///
        /// Gets the README from a repository directory.
        /// 
        /// READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-repository-directory-readme)
        public func get(ref: String? = nil) -> Request<OctoKit.ContentFile> {
            .get(path, query: makeGetQuery(ref))
        }

        private func makeGetQuery(_ ref: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(ref, forKey: "ref")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var releases: Releases {
        Releases(path: path + "/releases")
    }

    public struct Releases {
        /// Path: `/repos/{owner}/{repo}/releases`
        public let path: String

        /// List releases
        ///
        /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
        /// 
        /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-releases)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Release]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a release
        ///
        /// Users with push access to the repository can create a release.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-release)
        public func post(_ body: PostRequest) -> Request<OctoKit.Release> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The name of the tag.
            public var tagName: String
            /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
            public var targetCommitish: String?
            /// The name of the release.
            public var name: String?
            /// Text describing the contents of the tag.
            public var body: String?
            /// `true` to create a draft (unpublished) release, `false` to create a published one.
            public var isDraft: Bool
            /// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
            public var isPrerelease: Bool
            /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
            public var discussionCategoryName: String?
            /// Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
            public var isGenerateReleaseNotes: Bool

            public init(tagName: String, targetCommitish: String? = nil, name: String? = nil, body: String? = nil, isDraft: Bool? = nil, isPrerelease: Bool? = nil, discussionCategoryName: String? = nil, isGenerateReleaseNotes: Bool? = nil) {
                self.tagName = tagName
                self.targetCommitish = targetCommitish
                self.name = name
                self.body = body
                self.isDraft = isDraft ?? false
                self.isPrerelease = isPrerelease ?? false
                self.discussionCategoryName = discussionCategoryName
                self.isGenerateReleaseNotes = isGenerateReleaseNotes ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case tagName = "tag_name"
                case targetCommitish = "target_commitish"
                case name
                case body
                case isDraft = "draft"
                case isPrerelease = "prerelease"
                case discussionCategoryName = "discussion_category_name"
                case isGenerateReleaseNotes = "generate_release_notes"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public var assets: Assets {
        Assets(path: path + "/assets")
    }

    public struct Assets {
        /// Path: `/repos/{owner}/{repo}/releases/assets`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases.Assets {
    public func assetID(_ assetID: Int) -> WithAssetID {
        WithAssetID(path: "\(path)/\(assetID)")
    }

    public struct WithAssetID {
        /// Path: `/repos/{owner}/{repo}/releases/assets/{asset_id}`
        public let path: String

        /// Get a release asset
        ///
        /// To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-release-asset)
        public var get: Request<OctoKit.ReleaseAsset> {
            .get(path)
        }

        /// Update a release asset
        ///
        /// Users with push access to the repository can edit a release asset.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-a-release-asset)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.ReleaseAsset> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The file name of the asset.
            public var name: String?
            /// An alternate short description of the asset. Used in place of the filename.
            public var label: String?
            /// Example: "uploaded"
            public var state: String?

            public init(name: String? = nil, label: String? = nil, state: String? = nil) {
                self.name = name
                self.label = label
                self.state = state
            }
        }

        /// Delete a release asset
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-release-asset)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public var generateNotes: GenerateNotes {
        GenerateNotes(path: path + "/generate-notes")
    }

    public struct GenerateNotes {
        /// Path: `/repos/{owner}/{repo}/releases/generate-notes`
        public let path: String

        /// Generate release notes content for a release
        ///
        /// Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#generate-release-notes)
        public func post(_ body: PostRequest) -> Request<OctoKit.ReleaseNotesContent> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The tag name for the release. This can be an existing tag or a new one.
            public var tagName: String
            /// Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
            public var targetCommitish: String?
            /// The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
            public var previousTagName: String?
            /// Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
            public var configurationFilePath: String?

            public init(tagName: String, targetCommitish: String? = nil, previousTagName: String? = nil, configurationFilePath: String? = nil) {
                self.tagName = tagName
                self.targetCommitish = targetCommitish
                self.previousTagName = previousTagName
                self.configurationFilePath = configurationFilePath
            }

            private enum CodingKeys: String, CodingKey {
                case tagName = "tag_name"
                case targetCommitish = "target_commitish"
                case previousTagName = "previous_tag_name"
                case configurationFilePath = "configuration_file_path"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public var latest: Latest {
        Latest(path: path + "/latest")
    }

    public struct Latest {
        /// Path: `/repos/{owner}/{repo}/releases/latest`
        public let path: String

        /// Get the latest release
        ///
        /// View the latest published full release for the repository.
        /// 
        /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-latest-release)
        public var get: Request<OctoKit.Release> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public var tags: Tags {
        Tags(path: path + "/tags")
    }

    public struct Tags {
        /// Path: `/repos/{owner}/{repo}/releases/tags`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases.Tags {
    public func tag(_ tag: String) -> WithTag {
        WithTag(path: "\(path)/\(tag)")
    }

    public struct WithTag {
        /// Path: `/repos/{owner}/{repo}/releases/tags/{tag}`
        public let path: String

        /// Get a release by tag name
        ///
        /// Get a published release with the specified tag.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name)
        public var get: Request<OctoKit.Release> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public func releaseID(_ releaseID: Int) -> WithReleaseID {
        WithReleaseID(path: "\(path)/\(releaseID)")
    }

    public struct WithReleaseID {
        /// Path: `/repos/{owner}/{repo}/releases/{release_id}`
        public let path: String

        /// Get a release
        ///
        /// **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-release)
        public var get: Request<OctoKit.Release> {
            .get(path)
        }

        /// Update a release
        ///
        /// Users with push access to the repository can edit a release.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-a-release)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.Release> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The name of the tag.
            public var tagName: String?
            /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
            public var targetCommitish: String?
            /// The name of the release.
            public var name: String?
            /// Text describing the contents of the tag.
            public var body: String?
            /// `true` makes the release a draft, and `false` publishes the release.
            public var isDraft: Bool?
            /// `true` to identify the release as a prerelease, `false` to identify the release as a full release.
            public var isPrerelease: Bool?
            /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
            public var discussionCategoryName: String?

            public init(tagName: String? = nil, targetCommitish: String? = nil, name: String? = nil, body: String? = nil, isDraft: Bool? = nil, isPrerelease: Bool? = nil, discussionCategoryName: String? = nil) {
                self.tagName = tagName
                self.targetCommitish = targetCommitish
                self.name = name
                self.body = body
                self.isDraft = isDraft
                self.isPrerelease = isPrerelease
                self.discussionCategoryName = discussionCategoryName
            }

            private enum CodingKeys: String, CodingKey {
                case tagName = "tag_name"
                case targetCommitish = "target_commitish"
                case name
                case body
                case isDraft = "draft"
                case isPrerelease = "prerelease"
                case discussionCategoryName = "discussion_category_name"
            }
        }

        /// Delete a release
        ///
        /// Users with push access to the repository can delete a release.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-release)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases.WithReleaseID {
    public var assets: Assets {
        Assets(path: path + "/assets")
    }

    public struct Assets {
        /// Path: `/repos/{owner}/{repo}/releases/{release_id}/assets`
        public let path: String

        /// List release assets
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-release-assets)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.ReleaseAsset]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Upload a release asset
        ///
        /// This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
        /// the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
        /// 
        /// You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
        /// 
        /// Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: 
        /// 
        /// `application/zip`
        /// 
        /// GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
        /// you'll still need to pass your authentication to be able to upload an asset.
        /// 
        /// When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
        /// 
        /// **Notes:**
        /// *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
        /// endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
        /// *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#upload-a-release-asset)
        public func post(name: String, label: String? = nil, _ body: String? = nil) -> Request<OctoKit.ReleaseAsset> {
            .post(path, query: makePostQuery(name, label), body: body)
        }

        private func makePostQuery(_ name: String, _ label: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(name, forKey: "name")
            encoder.encode(label, forKey: "label")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases.WithReleaseID {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/repos/{owner}/{repo}/releases/{release_id}/reactions`
        public let path: String

        /// Create reaction for a release
        ///
        /// Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-release)
        public func post(content: PostRequest.Content) -> Request<OctoKit.Reaction> {
            .post(path, body: PostRequest(content: content))
        }

        public struct PostRequest: Encodable {
            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.
            public var content: Content

            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.
            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case laugh
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content) {
                self.content = content
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var secretScanning: SecretScanning {
        SecretScanning(path: path + "/secret-scanning")
    }

    public struct SecretScanning {
        /// Path: `/repos/{owner}/{repo}/secret-scanning`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.SecretScanning {
    public var alerts: Alerts {
        Alerts(path: path + "/alerts")
    }

    public struct Alerts {
        /// Path: `/repos/{owner}/{repo}/secret-scanning/alerts`
        public let path: String

        /// List secret scanning alerts for a repository
        ///
        /// Lists secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.SecretScanningAlert]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var state: State?
            public var secretType: String?
            public var resolution: String?
            public var page: Int?
            public var perPage: Int?

            public enum State: String, Codable, CaseIterable {
                case `open`
                case resolved
            }

            public init(state: State? = nil, secretType: String? = nil, resolution: String? = nil, page: Int? = nil, perPage: Int? = nil) {
                self.state = state
                self.secretType = secretType
                self.resolution = resolution
                self.page = page
                self.perPage = perPage
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(state, forKey: "state")
                encoder.encode(secretType, forKey: "secret_type")
                encoder.encode(resolution, forKey: "resolution")
                encoder.encode(page, forKey: "page")
                encoder.encode(perPage, forKey: "per_page")
                return encoder.items
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.SecretScanning.Alerts {
    public func alertNumber(_ alertNumber: Int) -> WithAlertNumber {
        WithAlertNumber(path: "\(path)/\(alertNumber)")
    }

    public struct WithAlertNumber {
        /// Path: `/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}`
        public let path: String

        /// Get a secret scanning alert
        ///
        /// Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert)
        public var get: Request<OctoKit.SecretScanningAlert> {
            .get(path)
        }

        /// Update a secret scanning alert
        ///
        /// Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.SecretScanningAlert> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
            public var state: OctoKit.SecretScanningAlertState
            /// **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.
            public var resolution: OctoKit.SecretScanningAlertResolution?

            public init(state: OctoKit.SecretScanningAlertState, resolution: OctoKit.SecretScanningAlertResolution? = nil) {
                self.state = state
                self.resolution = resolution
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.SecretScanning.Alerts.WithAlertNumber {
    public var locations: Locations {
        Locations(path: path + "/locations")
    }

    public struct Locations {
        /// Path: `/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations`
        public let path: String

        /// List locations for a secret scanning alert
        ///
        /// Lists all locations for a given secret scanning alert for a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#list-locations-for-a-secret-scanning-alert)
        public func get(page: Int? = nil, perPage: Int? = nil) -> Request<[OctoKit.SecretScanningLocation]> {
            .get(path, query: makeGetQuery(page, perPage))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ page: Int?, _ perPage: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(page, forKey: "page")
            encoder.encode(perPage, forKey: "per_page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var stargazers: Stargazers {
        Stargazers(path: path + "/stargazers")
    }

    public struct Stargazers {
        /// Path: `/repos/{owner}/{repo}/stargazers`
        public let path: String

        /// List stargazers
        ///
        /// Lists the people that have starred the repository.
        /// 
        /// You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-stargazers)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var simpleUsers: [OctoKit.SimpleUser]?
            public var stargazers: [OctoKit.Stargazer]?

            public init(simpleUsers: [OctoKit.SimpleUser]? = nil, stargazers: [OctoKit.Stargazer]? = nil) {
                self.simpleUsers = simpleUsers
                self.stargazers = stargazers
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.simpleUsers = try? container.decode([OctoKit.SimpleUser].self)
                self.stargazers = try? container.decode([OctoKit.Stargazer].self)
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var stats: Stats {
        Stats(path: path + "/stats")
    }

    public struct Stats {
        /// Path: `/repos/{owner}/{repo}/stats`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Stats {
    public var codeFrequency: CodeFrequency {
        CodeFrequency(path: path + "/code_frequency")
    }

    public struct CodeFrequency {
        /// Path: `/repos/{owner}/{repo}/stats/code_frequency`
        public let path: String

        /// Get the weekly commit activity
        ///
        /// Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-weekly-commit-activity)
        public var get: Request<[[Int]]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Stats {
    public var commitActivity: CommitActivity {
        CommitActivity(path: path + "/commit_activity")
    }

    public struct CommitActivity {
        /// Path: `/repos/{owner}/{repo}/stats/commit_activity`
        public let path: String

        /// Get the last year of commit activity
        ///
        /// Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-last-year-of-commit-activity)
        public var get: Request<[OctoKit.CommitActivity]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Stats {
    public var contributors: Contributors {
        Contributors(path: path + "/contributors")
    }

    public struct Contributors {
        /// Path: `/repos/{owner}/{repo}/stats/contributors`
        public let path: String

        /// Get all contributor commit activity
        ///
        /// Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
        /// 
        /// *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
        /// *   `a` - Number of additions
        /// *   `d` - Number of deletions
        /// *   `c` - Number of commits
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-all-contributor-commit-activity)
        public var get: Request<[OctoKit.ContributorActivity]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Stats {
    public var participation: Participation {
        Participation(path: path + "/participation")
    }

    public struct Participation {
        /// Path: `/repos/{owner}/{repo}/stats/participation`
        public let path: String

        /// Get the weekly commit count
        ///
        /// Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
        /// 
        /// The array order is oldest week (index 0) to most recent week.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-weekly-commit-count)
        public var get: Request<OctoKit.ParticipationStats> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Stats {
    public var punchCard: PunchCard {
        PunchCard(path: path + "/punch_card")
    }

    public struct PunchCard {
        /// Path: `/repos/{owner}/{repo}/stats/punch_card`
        public let path: String

        /// Get the hourly commit count for each day
        ///
        /// Each array contains the day number, hour number, and number of commits:
        /// 
        /// *   `0-6`: Sunday - Saturday
        /// *   `0-23`: Hour of day
        /// *   Number of commits
        /// 
        /// For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-hourly-commit-count-for-each-day)
        public var get: Request<[[Int]]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var statuses: Statuses {
        Statuses(path: path + "/statuses")
    }

    public struct Statuses {
        /// Path: `/repos/{owner}/{repo}/statuses`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Statuses {
    public func sha(_ sha: String) -> WithSha {
        WithSha(path: "\(path)/\(sha)")
    }

    public struct WithSha {
        /// Path: `/repos/{owner}/{repo}/statuses/{sha}`
        public let path: String

        /// Create a commit status
        ///
        /// Users with push access in a repository can create commit statuses for a given SHA.
        /// 
        /// Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-commit-status)
        public func post(_ body: PostRequest) -> Request<OctoKit.Status> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
            public var state: State
            /// The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
            /// For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
            /// `http://ci.example.com/user/repo/build/sha`
            public var targetURL: String?
            /// A short description of the status.
            public var description: String?
            /// A string label to differentiate this status from the status of other systems. This field is case-insensitive.
            public var context: String?

            /// The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
            public enum State: String, Codable, CaseIterable {
                case error
                case failure
                case pending
                case success
            }

            public init(state: State, targetURL: String? = nil, description: String? = nil, context: String? = nil) {
                self.state = state
                self.targetURL = targetURL
                self.description = description
                self.context = context
            }

            private enum CodingKeys: String, CodingKey {
                case state
                case targetURL = "target_url"
                case description
                case context
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var subscribers: Subscribers {
        Subscribers(path: path + "/subscribers")
    }

    public struct Subscribers {
        /// Path: `/repos/{owner}/{repo}/subscribers`
        public let path: String

        /// List watchers
        ///
        /// Lists the people watching the specified repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-watchers)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var subscription: Subscription {
        Subscription(path: path + "/subscription")
    }

    public struct Subscription {
        /// Path: `/repos/{owner}/{repo}/subscription`
        public let path: String

        /// Get a repository subscription
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#get-a-repository-subscription)
        public var get: Request<OctoKit.RepositorySubscription> {
            .get(path)
        }

        /// Set a repository subscription
        ///
        /// If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#set-a-repository-subscription)
        public func put(_ body: PutRequest? = nil) -> Request<OctoKit.RepositorySubscription> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// Determines if notifications should be received from this repository.
            public var isSubscribed: Bool?
            /// Determines if all notifications should be blocked from this repository.
            public var isIgnored: Bool?

            public init(isSubscribed: Bool? = nil, isIgnored: Bool? = nil) {
                self.isSubscribed = isSubscribed
                self.isIgnored = isIgnored
            }

            private enum CodingKeys: String, CodingKey {
                case isSubscribed = "subscribed"
                case isIgnored = "ignored"
            }
        }

        /// Delete a repository subscription
        ///
        /// This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var tags: Tags {
        Tags(path: path + "/tags")
    }

    public struct Tags {
        /// Path: `/repos/{owner}/{repo}/tags`
        public let path: String

        /// List repository tags
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-tags)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Tag]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var tarball: Tarball {
        Tarball(path: path + "/tarball")
    }

    public struct Tarball {
        /// Path: `/repos/{owner}/{repo}/tarball`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Tarball {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: "\(path)/\(ref)")
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/tarball/{ref}`
        public let path: String

        /// Download a repository archive (tar)
        ///
        /// Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
        /// `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
        /// the `Location` header to make a second `GET` request.
        /// **Note**: For private repositories, these links are temporary and expire after five minutes.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#download-a-repository-archive)
        public var get: Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/repos/{owner}/{repo}/teams`
        public let path: String

        /// List repository teams
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-teams)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Team]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var topics: Topics {
        Topics(path: path + "/topics")
    }

    public struct Topics {
        /// Path: `/repos/{owner}/{repo}/topics`
        public let path: String

        /// Get all repository topics
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-all-repository-topics)
        public func get(page: Int? = nil, perPage: Int? = nil) -> Request<OctoKit.Topic> {
            .get(path, query: makeGetQuery(page, perPage))
        }

        private func makeGetQuery(_ page: Int?, _ perPage: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(page, forKey: "page")
            encoder.encode(perPage, forKey: "per_page")
            return encoder.items
        }

        /// Replace all repository topics
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#replace-all-repository-topics)
        public func put(names: [String]) -> Request<OctoKit.Topic> {
            .put(path, body: ["names": names])
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var traffic: Traffic {
        Traffic(path: path + "/traffic")
    }

    public struct Traffic {
        /// Path: `/repos/{owner}/{repo}/traffic`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Traffic {
    public var clones: Clones {
        Clones(path: path + "/clones")
    }

    public struct Clones {
        /// Path: `/repos/{owner}/{repo}/traffic/clones`
        public let path: String

        /// Get repository clones
        ///
        /// Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-repository-clones)
        public func get(per: Per? = nil) -> Request<OctoKit.CloneTraffic> {
            .get(path, query: makeGetQuery(per))
        }

        private func makeGetQuery(_ per: Per?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(per, forKey: "per")
            return encoder.items
        }

        public enum Per: String, Codable, CaseIterable {
            case empty = ""
            case day
            case week
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Traffic {
    public var popular: Popular {
        Popular(path: path + "/popular")
    }

    public struct Popular {
        /// Path: `/repos/{owner}/{repo}/traffic/popular`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Traffic.Popular {
    public var paths: Paths {
        Paths(path: path + "/paths")
    }

    public struct Paths {
        /// Path: `/repos/{owner}/{repo}/traffic/popular/paths`
        public let path: String

        /// Get top referral paths
        ///
        /// Get the top 10 popular contents over the last 14 days.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-top-referral-paths)
        public var get: Request<[OctoKit.ContentTraffic]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Traffic.Popular {
    public var referrers: Referrers {
        Referrers(path: path + "/referrers")
    }

    public struct Referrers {
        /// Path: `/repos/{owner}/{repo}/traffic/popular/referrers`
        public let path: String

        /// Get top referral sources
        ///
        /// Get the top 10 referrers over the last 14 days.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-top-referral-sources)
        public var get: Request<[OctoKit.ReferrerTraffic]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Traffic {
    public var views: Views {
        Views(path: path + "/views")
    }

    public struct Views {
        /// Path: `/repos/{owner}/{repo}/traffic/views`
        public let path: String

        /// Get page views
        ///
        /// Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-page-views)
        public func get(per: Per? = nil) -> Request<OctoKit.ViewTraffic> {
            .get(path, query: makeGetQuery(per))
        }

        private func makeGetQuery(_ per: Per?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(per, forKey: "per")
            return encoder.items
        }

        public enum Per: String, Codable, CaseIterable {
            case empty = ""
            case day
            case week
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var transfer: Transfer {
        Transfer(path: path + "/transfer")
    }

    public struct Transfer {
        /// Path: `/repos/{owner}/{repo}/transfer`
        public let path: String

        /// Transfer a repository
        ///
        /// A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#transfer-a-repository)
        public func post(_ body: PostRequest) -> Request<OctoKit.MinimalRepository> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The username or organization name the repository will be transferred to.
            public var newOwner: String
            /// ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
            public var teamIDs: [Int]?

            public init(newOwner: String, teamIDs: [Int]? = nil) {
                self.newOwner = newOwner
                self.teamIDs = teamIDs
            }

            private enum CodingKeys: String, CodingKey {
                case newOwner = "new_owner"
                case teamIDs = "team_ids"
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var vulnerabilityAlerts: VulnerabilityAlerts {
        VulnerabilityAlerts(path: path + "/vulnerability-alerts")
    }

    public struct VulnerabilityAlerts {
        /// Path: `/repos/{owner}/{repo}/vulnerability-alerts`
        public let path: String

        /// Check if vulnerability alerts are enabled for a repository
        ///
        /// Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository)
        public var get: Request<Void> {
            .get(path)
        }

        /// Enable vulnerability alerts
        ///
        /// Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#enable-vulnerability-alerts)
        public var put: Request<Void> {
            .put(path)
        }

        /// Disable vulnerability alerts
        ///
        /// Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#disable-vulnerability-alerts)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var zipball: Zipball {
        Zipball(path: path + "/zipball")
    }

    public struct Zipball {
        /// Path: `/repos/{owner}/{repo}/zipball`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Zipball {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: "\(path)/\(ref)")
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/zipball/{ref}`
        public let path: String

        /// Download a repository archive (zip)
        ///
        /// Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
        /// `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
        /// the `Location` header to make a second `GET` request.
        /// **Note**: For private repositories, these links are temporary and expire after five minutes.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#download-a-repository-archive)
        public var get: Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos {
    public func templateOwner(_ templateOwner: String) -> WithTemplateOwner {
        WithTemplateOwner(path: "\(path)/\(templateOwner)")
    }

    public struct WithTemplateOwner {
        /// Path: `/repos/{template_owner}`
        public let path: String
    }
}

extension Paths.Repos.WithTemplateOwner {
    public func templateRepo(_ templateRepo: String) -> WithTemplateRepo {
        WithTemplateRepo(path: "\(path)/\(templateRepo)")
    }

    public struct WithTemplateRepo {
        /// Path: `/repos/{template_owner}/{template_repo}`
        public let path: String
    }
}

extension Paths.Repos.WithTemplateOwner.WithTemplateRepo {
    public var generate: Generate {
        Generate(path: path + "/generate")
    }

    public struct Generate {
        /// Path: `/repos/{template_owner}/{template_repo}/generate`
        public let path: String

        /// Create a repository using a template
        ///
        /// Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
        /// 
        /// **OAuth scope requirements**
        /// 
        /// When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
        /// 
        /// *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
        /// *   `repo` scope to create a private repository
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template)
        public func post(_ body: PostRequest) -> Request<OctoKit.Repository> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
            public var owner: String?
            /// The name of the new repository.
            public var name: String
            /// A short description of the new repository.
            public var description: String?
            /// Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
            public var isIncludeAllBranches: Bool
            /// Either `true` to create a new private repository or `false` to create a new public one.
            public var isPrivate: Bool

            public init(owner: String? = nil, name: String, description: String? = nil, isIncludeAllBranches: Bool? = nil, isPrivate: Bool? = nil) {
                self.owner = owner
                self.name = name
                self.description = description
                self.isIncludeAllBranches = isIncludeAllBranches ?? false
                self.isPrivate = isPrivate ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case owner
                case name
                case description
                case isIncludeAllBranches = "include_all_branches"
                case isPrivate = "private"
            }
        }
    }
}

extension Paths {
    public static var repositories: Repositories {
        Repositories(path: "/repositories")
    }

    public struct Repositories {
        /// Path: `/repositories`
        public let path: String

        /// List public repositories
        ///
        /// Lists all public repositories in the order that they were created.
        /// 
        /// Note:
        /// - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
        /// - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-public-repositories)
        public func get(since: Int? = nil) -> Request<[OctoKit.MinimalRepository]> {
            .get(path, query: makeGetQuery(since))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ since: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(since, forKey: "since")
            return encoder.items
        }
    }
}

extension Paths.Repositories {
    public func repositoryID(_ repositoryID: Int) -> WithRepositoryID {
        WithRepositoryID(path: "\(path)/\(repositoryID)")
    }

    public struct WithRepositoryID {
        /// Path: `/repositories/{repository_id}`
        public let path: String
    }
}

extension Paths.Repositories.WithRepositoryID {
    public var environments: Environments {
        Environments(path: path + "/environments")
    }

    public struct Environments {
        /// Path: `/repositories/{repository_id}/environments`
        public let path: String
    }
}

extension Paths.Repositories.WithRepositoryID.Environments {
    public func environmentName(_ environmentName: String) -> WithEnvironmentName {
        WithEnvironmentName(path: "\(path)/\(environmentName)")
    }

    public struct WithEnvironmentName {
        /// Path: `/repositories/{repository_id}/environments/{environment_name}`
        public let path: String
    }
}

extension Paths.Repositories.WithRepositoryID.Environments.WithEnvironmentName {
    public var secrets: Secrets {
        Secrets(path: path + "/secrets")
    }

    public struct Secrets {
        /// Path: `/repositories/{repository_id}/environments/{environment_name}/secrets`
        public let path: String

        /// List environment secrets
        ///
        /// Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-environment-secrets)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var secrets: [OctoKit.ActionsSecret]

            public init(totalCount: Int, secrets: [OctoKit.ActionsSecret]) {
                self.totalCount = totalCount
                self.secrets = secrets
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case secrets
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Repositories.WithRepositoryID.Environments.WithEnvironmentName.Secrets {
    public var publicKey: PublicKey {
        PublicKey(path: path + "/public-key")
    }

    public struct PublicKey {
        /// Path: `/repositories/{repository_id}/environments/{environment_name}/secrets/public-key`
        public let path: String

        /// Get an environment public key
        ///
        /// Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-an-environment-public-key)
        public var get: Request<OctoKit.ActionsPublicKey> {
            .get(path)
        }
    }
}

extension Paths.Repositories.WithRepositoryID.Environments.WithEnvironmentName.Secrets {
    public func secretName(_ secretName: String) -> WithSecretName {
        WithSecretName(path: "\(path)/\(secretName)")
    }

    public struct WithSecretName {
        /// Path: `/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}`
        public let path: String

        /// Get an environment secret
        ///
        /// Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-an-environment-secret)
        public var get: Request<OctoKit.ActionsSecret> {
            .get(path)
        }

        /// Create or update an environment secret
        ///
        /// Creates or updates an environment secret with an encrypted value. Encrypt your secret using
        /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        /// token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
        /// this endpoint.
        /// 
        /// #### Example encrypting a secret using Node.js
        /// 
        /// Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
        /// 
        /// ```
        /// const sodium = require('tweetsodium');
        /// 
        /// const key = "base64-encoded-public-key";
        /// const value = "plain-text-secret";
        /// 
        /// // Convert the message and key to Uint8Array's (Buffer implements that interface)
        /// const messageBytes = Buffer.from(value);
        /// const keyBytes = Buffer.from(key, 'base64');
        /// 
        /// // Encrypt using LibSodium.
        /// const encryptedBytes = sodium.seal(messageBytes, keyBytes);
        /// 
        /// // Base64 the encrypted secret
        /// const encrypted = Buffer.from(encryptedBytes).toString('base64');
        /// 
        /// console.log(encrypted);
        /// ```
        /// 
        /// 
        /// #### Example encrypting a secret using Python
        /// 
        /// Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
        /// 
        /// ```
        /// from base64 import b64encode
        /// from nacl import encoding, public
        /// 
        /// def encrypt(public_key: str, secret_value: str) -> str:
        ///   """Encrypt a Unicode string using the public key."""
        ///   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
        ///   sealed_box = public.SealedBox(public_key)
        ///   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
        ///   return b64encode(encrypted).decode("utf-8")
        /// ```
        /// 
        /// #### Example encrypting a secret using C#
        /// 
        /// Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        /// 
        /// ```
        /// var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
        /// var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
        /// 
        /// var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        /// 
        /// Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        /// ```
        /// 
        /// #### Example encrypting a secret using Ruby
        /// 
        /// Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        /// 
        /// ```ruby
        /// require "rbnacl"
        /// require "base64"
        /// 
        /// key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
        /// public_key = RbNaCl::PublicKey.new(key)
        /// 
        /// box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        /// encrypted_secret = box.encrypt("my_secret")
        /// 
        /// # Print the base64 encoded secret
        /// puts Base64.strict_encode64(encrypted_secret)
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret)
        public func put(_ body: PutRequest) -> Request<Void> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
            public var encryptedValue: String
            /// ID of the key you used to encrypt the secret.
            public var keyID: String

            public init(encryptedValue: String, keyID: String) {
                self.encryptedValue = encryptedValue
                self.keyID = keyID
            }

            private enum CodingKeys: String, CodingKey {
                case encryptedValue = "encrypted_value"
                case keyID = "key_id"
            }
        }

        /// Delete an environment secret
        ///
        /// Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-an-environment-secret)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var scim: Scim {
        Scim(path: "/scim")
    }

    public struct Scim {
        /// Path: `/scim`
        public let path: String
    }
}

extension Paths.Scim {
    public var v2: V2 {
        V2(path: path + "/v2")
    }

    public struct V2 {
        /// Path: `/scim/v2`
        public let path: String
    }
}

extension Paths.Scim.V2 {
    public var enterprises: Enterprises {
        Enterprises(path: path + "/enterprises")
    }

    public struct Enterprises {
        /// Path: `/scim/v2/enterprises`
        public let path: String
    }
}

extension Paths.Scim.V2.Enterprises {
    public func enterprise(_ enterprise: String) -> WithEnterprise {
        WithEnterprise(path: "\(path)/\(enterprise)")
    }

    public struct WithEnterprise {
        /// Path: `/scim/v2/enterprises/{enterprise}`
        public let path: String
    }
}

extension Paths.Scim.V2.Enterprises.WithEnterprise {
    public var groups: Groups {
        Groups(path: path + "/Groups")
    }

    public struct Groups {
        /// Path: `/scim/v2/enterprises/{enterprise}/Groups`
        public let path: String

        /// List provisioned SCIM groups for an enterprise
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-provisioned-scim-groups-for-an-enterprise)
        public func get(parameters: GetParameters? = nil) -> Request<OctoKit.ScimGroupListEnterprise> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var startIndex: Int?
            public var count: Int?
            public var filter: String?
            public var excludedAttributes: String?

            public init(startIndex: Int? = nil, count: Int? = nil, filter: String? = nil, excludedAttributes: String? = nil) {
                self.startIndex = startIndex
                self.count = count
                self.filter = filter
                self.excludedAttributes = excludedAttributes
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startIndex, forKey: "startIndex")
                encoder.encode(count, forKey: "count")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(excludedAttributes, forKey: "excludedAttributes")
                return encoder.items
            }
        }

        /// Provision a SCIM enterprise group and invite users
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        /// 
        /// Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#provision-a-scim-enterprise-group-and-invite-users)
        public func post(_ body: PostRequest) -> Request<OctoKit.ScimEnterpriseGroup> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The SCIM schema URIs.
            public var schemas: [String]
            /// The name of the SCIM group. This must match the GitHub organization that the group maps to.
            public var displayName: String
            public var members: [Member]?

            public struct Member: Encodable {
                /// The SCIM user ID for a user.
                public var value: String

                public init(value: String) {
                    self.value = value
                }
            }

            public init(schemas: [String], displayName: String, members: [Member]? = nil) {
                self.schemas = schemas
                self.displayName = displayName
                self.members = members
            }
        }
    }
}

extension Paths.Scim.V2.Enterprises.WithEnterprise.Groups {
    public func scimGroupID(_ scimGroupID: String) -> WithScimGroupID {
        WithScimGroupID(path: "\(path)/\(scimGroupID)")
    }

    public struct WithScimGroupID {
        /// Path: `/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}`
        public let path: String

        /// Get SCIM provisioning information for an enterprise group
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group)
        public func get(excludedAttributes: String? = nil) -> Request<OctoKit.ScimEnterpriseGroup> {
            .get(path, query: makeGetQuery(excludedAttributes))
        }

        private func makeGetQuery(_ excludedAttributes: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(excludedAttributes, forKey: "excludedAttributes")
            return encoder.items
        }

        /// Set SCIM information for a provisioned enterprise group
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        /// 
        /// Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-group)
        public func put(_ body: PutRequest) -> Request<OctoKit.ScimEnterpriseGroup> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// The SCIM schema URIs.
            public var schemas: [String]
            /// The name of the SCIM group. This must match the GitHub organization that the group maps to.
            public var displayName: String
            public var members: [Member]?

            public struct Member: Encodable {
                /// The SCIM user ID for a user.
                public var value: String

                public init(value: String) {
                    self.value = value
                }
            }

            public init(schemas: [String], displayName: String, members: [Member]? = nil) {
                self.schemas = schemas
                self.displayName = displayName
                self.members = members
            }
        }

        /// Update an attribute for a SCIM enterprise group
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        /// 
        /// Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-group)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.ScimEnterpriseGroup> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The SCIM schema URIs.
            public var schemas: [String]
            /// Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
            public var operations: [Operation]

            public struct Operation: Encodable {
                public var op: Op
                public var path: String?
                /// Can be any value - string, number, array or object.
                public var value: AnyJSON?

                public enum Op: String, Codable, CaseIterable {
                    case add
                    case add2 = "Add"
                    case remove
                    case remove2 = "Remove"
                    case replace
                    case replace2 = "Replace"
                }

                public init(op: Op, path: String? = nil, value: AnyJSON? = nil) {
                    self.op = op
                    self.path = path
                    self.value = value
                }
            }

            public init(schemas: [String], operations: [Operation]) {
                self.schemas = schemas
                self.operations = operations
            }

            private enum CodingKeys: String, CodingKey {
                case schemas
                case operations = "Operations"
            }
        }

        /// Delete a SCIM group from an enterprise
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-group-from-an-enterprise)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Scim.V2.Enterprises.WithEnterprise {
    public var users: Users {
        Users(path: path + "/Users")
    }

    public struct Users {
        /// Path: `/scim/v2/enterprises/{enterprise}/Users`
        public let path: String

        /// List SCIM provisioned identities for an enterprise
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        /// 
        /// Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
        /// 
        /// When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
        ///   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
        ///   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
        ///   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
        /// 
        /// The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
        /// 
        /// 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
        /// 
        /// 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
        /// 
        /// 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
        ///    - If the user signs in, their GitHub account is linked to this entry.
        ///    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise)
        public func get(parameters: GetParameters? = nil) -> Request<OctoKit.ScimUserListEnterprise> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var startIndex: Int?
            public var count: Int?
            public var filter: String?

            public init(startIndex: Int? = nil, count: Int? = nil, filter: String? = nil) {
                self.startIndex = startIndex
                self.count = count
                self.filter = filter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startIndex, forKey: "startIndex")
                encoder.encode(count, forKey: "count")
                encoder.encode(filter, forKey: "filter")
                return encoder.items
            }
        }

        /// Provision and invite a SCIM enterprise user
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        /// 
        /// Provision enterprise membership for a user, and send organization invitation emails to the email address.
        /// 
        /// You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#provision-and-invite-a-scim-enterprise-user)
        public func post(_ body: PostRequest) -> Request<OctoKit.ScimEnterpriseUser> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The SCIM schema URIs.
            public var schemas: [String]
            /// The username for the user.
            public var userName: String
            public var name: Name
            /// List of user emails.
            public var emails: [Email]
            /// List of SCIM group IDs the user is a member of.
            public var groups: [Group]?

            public struct Name: Encodable {
                /// The first name of the user.
                public var givenName: String
                /// The last name of the user.
                public var familyName: String

                public init(givenName: String, familyName: String) {
                    self.givenName = givenName
                    self.familyName = familyName
                }
            }

            public struct Email: Encodable {
                /// The email address.
                public var value: String
                /// The type of email address.
                public var type: String
                /// Whether this email address is the primary address.
                public var isPrimary: Bool

                public init(value: String, type: String, isPrimary: Bool) {
                    self.value = value
                    self.type = type
                    self.isPrimary = isPrimary
                }

                private enum CodingKeys: String, CodingKey {
                    case value
                    case type
                    case isPrimary = "primary"
                }
            }

            public struct Group: Encodable {
                public var value: String?

                public init(value: String? = nil) {
                    self.value = value
                }
            }

            public init(schemas: [String], userName: String, name: Name, emails: [Email], groups: [Group]? = nil) {
                self.schemas = schemas
                self.userName = userName
                self.name = name
                self.emails = emails
                self.groups = groups
            }
        }
    }
}

extension Paths.Scim.V2.Enterprises.WithEnterprise.Users {
    public func scimUserID(_ scimUserID: String) -> WithScimUserID {
        WithScimUserID(path: "\(path)/\(scimUserID)")
    }

    public struct WithScimUserID {
        /// Path: `/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}`
        public let path: String

        /// Get SCIM provisioning information for an enterprise user
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user)
        public var get: Request<OctoKit.ScimEnterpriseUser> {
            .get(path)
        }

        /// Set SCIM information for a provisioned enterprise user
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        /// 
        /// Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
        /// 
        /// You must at least provide the required values for the user: `userName`, `name`, and `emails`.
        /// 
        /// **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-user)
        public func put(_ body: PutRequest) -> Request<OctoKit.ScimEnterpriseUser> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// The SCIM schema URIs.
            public var schemas: [String]
            /// The username for the user.
            public var userName: String
            public var name: Name
            /// List of user emails.
            public var emails: [Email]
            /// List of SCIM group IDs the user is a member of.
            public var groups: [Group]?

            public struct Name: Encodable {
                /// The first name of the user.
                public var givenName: String
                /// The last name of the user.
                public var familyName: String

                public init(givenName: String, familyName: String) {
                    self.givenName = givenName
                    self.familyName = familyName
                }
            }

            public struct Email: Encodable {
                /// The email address.
                public var value: String
                /// The type of email address.
                public var type: String
                /// Whether this email address is the primary address.
                public var isPrimary: Bool

                public init(value: String, type: String, isPrimary: Bool) {
                    self.value = value
                    self.type = type
                    self.isPrimary = isPrimary
                }

                private enum CodingKeys: String, CodingKey {
                    case value
                    case type
                    case isPrimary = "primary"
                }
            }

            public struct Group: Encodable {
                public var value: String?

                public init(value: String? = nil) {
                    self.value = value
                }
            }

            public init(schemas: [String], userName: String, name: Name, emails: [Email], groups: [Group]? = nil) {
                self.schemas = schemas
                self.userName = userName
                self.name = name
                self.emails = emails
                self.groups = groups
            }
        }

        /// Update an attribute for a SCIM enterprise user
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        /// 
        /// Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
        /// 
        /// **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
        /// 
        /// **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
        /// 
        /// ```
        /// {
        ///   "Operations":[{
        ///     "op":"replace",
        ///     "value":{
        ///       "active":false
        ///     }
        ///   }]
        /// }
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-user)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.ScimEnterpriseUser> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The SCIM schema URIs.
            public var schemas: [String]
            /// Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
            public var operations: [[String: AnyJSON]]

            public init(schemas: [String], operations: [[String: AnyJSON]]) {
                self.schemas = schemas
                self.operations = operations
            }

            private enum CodingKeys: String, CodingKey {
                case schemas
                case operations = "Operations"
            }
        }

        /// Delete a SCIM user from an enterprise
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-user-from-an-enterprise)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Scim.V2 {
    public var organizations: Organizations {
        Organizations(path: path + "/organizations")
    }

    public struct Organizations {
        /// Path: `/scim/v2/organizations`
        public let path: String
    }
}

extension Paths.Scim.V2.Organizations {
    public func org(_ org: String) -> WithOrg {
        WithOrg(path: "\(path)/\(org)")
    }

    public struct WithOrg {
        /// Path: `/scim/v2/organizations/{org}`
        public let path: String
    }
}

extension Paths.Scim.V2.Organizations.WithOrg {
    public var users: Users {
        Users(path: path + "/Users")
    }

    public struct Users {
        /// Path: `/scim/v2/organizations/{org}/Users`
        public let path: String

        /// List SCIM provisioned identities
        ///
        /// Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
        /// 
        /// When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
        ///   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
        ///   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
        ///   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
        /// 
        /// The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
        /// 
        /// 1. The user is granted access by the IdP and is not a member of the GitHub organization.
        /// 
        /// 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
        /// 
        /// 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
        ///    - If the user signs in, their GitHub account is linked to this entry.
        ///    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/scim#list-scim-provisioned-identities)
        public func get(parameters: GetParameters? = nil) -> Request<OctoKit.ScimUserList> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var startIndex: Int?
            public var count: Int?
            public var filter: String?

            public init(startIndex: Int? = nil, count: Int? = nil, filter: String? = nil) {
                self.startIndex = startIndex
                self.count = count
                self.filter = filter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startIndex, forKey: "startIndex")
                encoder.encode(count, forKey: "count")
                encoder.encode(filter, forKey: "filter")
                return encoder.items
            }
        }

        /// Provision and invite a SCIM user
        ///
        /// Provision organization membership for a user, and send an activation email to the email address.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/scim#provision-and-invite-a-scim-user)
        public func post(_ body: PostRequest) -> Request<OctoKit.ScimUser> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// Configured by the admin. Could be an email, login, or username
            ///
            /// Example: "someone@example.com"
            public var userName: String
            /// The name of the user, suitable for display to end-users
            ///
            /// Example: "Jon Doe"
            public var displayName: String?
            /// Example:
            ///
            /// {
            ///   "familyName" : "User",
            ///   "givenName" : "Jane"
            /// }
            public var name: Name
            /// User emails
            ///
            /// Example:
            ///
            /// [
            ///   {
            ///     "primary" : true,
            ///     "value" : "someone@example.com"
            ///   },
            ///   {
            ///     "primary" : false,
            ///     "value" : "another@example.com"
            ///   }
            /// ]
            public var emails: [Email]
            public var schemas: [String]?
            public var externalID: String?
            public var groups: [String]?
            public var isActive: Bool?

            /// Example:
            ///
            /// {
            ///   "familyName" : "User",
            ///   "givenName" : "Jane"
            /// }
            public struct Name: Encodable {
                public var givenName: String
                public var familyName: String
                public var formatted: String?

                public init(givenName: String, familyName: String, formatted: String? = nil) {
                    self.givenName = givenName
                    self.familyName = familyName
                    self.formatted = formatted
                }
            }

            public struct Email: Encodable {
                public var value: String
                public var isPrimary: Bool?
                public var type: String?

                public init(value: String, isPrimary: Bool? = nil, type: String? = nil) {
                    self.value = value
                    self.isPrimary = isPrimary
                    self.type = type
                }

                private enum CodingKeys: String, CodingKey {
                    case value
                    case isPrimary = "primary"
                    case type
                }
            }

            public init(userName: String, displayName: String? = nil, name: Name, emails: [Email], schemas: [String]? = nil, externalID: String? = nil, groups: [String]? = nil, isActive: Bool? = nil) {
                self.userName = userName
                self.displayName = displayName
                self.name = name
                self.emails = emails
                self.schemas = schemas
                self.externalID = externalID
                self.groups = groups
                self.isActive = isActive
            }

            private enum CodingKeys: String, CodingKey {
                case userName
                case displayName
                case name
                case emails
                case schemas
                case externalID = "externalId"
                case groups
                case isActive = "active"
            }
        }
    }
}

extension Paths.Scim.V2.Organizations.WithOrg.Users {
    public func scimUserID(_ scimUserID: String) -> WithScimUserID {
        WithScimUserID(path: "\(path)/\(scimUserID)")
    }

    public struct WithScimUserID {
        /// Path: `/scim/v2/organizations/{org}/Users/{scim_user_id}`
        public let path: String

        /// Get SCIM provisioning information for a user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/scim#get-scim-provisioning-information-for-a-user)
        public var get: Request<OctoKit.ScimUser> {
            .get(path)
        }

        /// Update a provisioned organization membership
        ///
        /// Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
        /// 
        /// You must at least provide the required values for the user: `userName`, `name`, and `emails`.
        /// 
        /// **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/scim#set-scim-information-for-a-provisioned-user)
        public func put(_ body: PutRequest) -> Request<OctoKit.ScimUser> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            public var schemas: [String]?
            /// The name of the user, suitable for display to end-users
            ///
            /// Example: "Jon Doe"
            public var displayName: String?
            public var externalID: String?
            public var groups: [String]?
            public var isActive: Bool?
            /// Configured by the admin. Could be an email, login, or username
            ///
            /// Example: "someone@example.com"
            public var userName: String
            /// Example:
            ///
            /// {
            ///   "familyName" : "User",
            ///   "givenName" : "Jane"
            /// }
            public var name: Name
            /// User emails
            ///
            /// Example:
            ///
            /// [
            ///   {
            ///     "primary" : true,
            ///     "value" : "someone@example.com"
            ///   },
            ///   {
            ///     "primary" : false,
            ///     "value" : "another@example.com"
            ///   }
            /// ]
            public var emails: [Email]

            /// Example:
            ///
            /// {
            ///   "familyName" : "User",
            ///   "givenName" : "Jane"
            /// }
            public struct Name: Encodable {
                public var givenName: String
                public var familyName: String
                public var formatted: String?

                public init(givenName: String, familyName: String, formatted: String? = nil) {
                    self.givenName = givenName
                    self.familyName = familyName
                    self.formatted = formatted
                }
            }

            public struct Email: Encodable {
                public var type: String?
                public var value: String
                public var isPrimary: Bool?

                public init(type: String? = nil, value: String, isPrimary: Bool? = nil) {
                    self.type = type
                    self.value = value
                    self.isPrimary = isPrimary
                }

                private enum CodingKeys: String, CodingKey {
                    case type
                    case value
                    case isPrimary = "primary"
                }
            }

            public init(schemas: [String]? = nil, displayName: String? = nil, externalID: String? = nil, groups: [String]? = nil, isActive: Bool? = nil, userName: String, name: Name, emails: [Email]) {
                self.schemas = schemas
                self.displayName = displayName
                self.externalID = externalID
                self.groups = groups
                self.isActive = isActive
                self.userName = userName
                self.name = name
                self.emails = emails
            }

            private enum CodingKeys: String, CodingKey {
                case schemas
                case displayName
                case externalID = "externalId"
                case groups
                case isActive = "active"
                case userName
                case name
                case emails
            }
        }

        /// Update an attribute for a SCIM user
        ///
        /// Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
        /// 
        /// **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
        /// 
        /// **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
        /// 
        /// ```
        /// {
        ///   "Operations":[{
        ///     "op":"replace",
        ///     "value":{
        ///       "active":false
        ///     }
        ///   }]
        /// }
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.ScimUser> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            public var schemas: [String]?
            /// Set of operations to be performed
            ///
            /// Example:
            ///
            /// [
            ///   {
            ///     "op" : "replace",
            ///     "value" : {
            ///       "active" : false
            ///     }
            ///   }
            /// ]
            public var operations: [Operation]

            public struct Operation: Encodable {
                public var op: Op
                public var path: String?
                public var value: Value?

                public enum Op: String, Codable, CaseIterable {
                    case add
                    case remove
                    case replace
                }

                public enum Value: Encodable {
                    case object(Object)
                    case placeholderItems([PlaceholderItem])
                    case string(String)

                    public struct Object: Encodable {
                        public var isActive: Bool?
                        public var userName: String?
                        public var externalID: String?
                        public var givenName: String?
                        public var familyName: String?

                        public init(isActive: Bool? = nil, userName: String? = nil, externalID: String? = nil, givenName: String? = nil, familyName: String? = nil) {
                            self.isActive = isActive
                            self.userName = userName
                            self.externalID = externalID
                            self.givenName = givenName
                            self.familyName = familyName
                        }

                        private enum CodingKeys: String, CodingKey {
                            case isActive = "active"
                            case userName
                            case externalID = "externalId"
                            case givenName
                            case familyName
                        }
                    }

                    public struct PlaceholderItem: Encodable {
                        public var value: String?
                        public var isPrimary: Bool?

                        public init(value: String? = nil, isPrimary: Bool? = nil) {
                            self.value = value
                            self.isPrimary = isPrimary
                        }

                        private enum CodingKeys: String, CodingKey {
                            case value
                            case isPrimary = "primary"
                        }
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.singleValueContainer()
                        switch self {
                        case .object(let value): try container.encode(value)
                        case .placeholderItems(let value): try container.encode(value)
                        case .string(let value): try container.encode(value)
                        }
                    }
                }

                public init(op: Op, path: String? = nil, value: Value? = nil) {
                    self.op = op
                    self.path = path
                    self.value = value
                }
            }

            public init(schemas: [String]? = nil, operations: [Operation]) {
                self.schemas = schemas
                self.operations = operations
            }

            private enum CodingKeys: String, CodingKey {
                case schemas
                case operations = "Operations"
            }
        }

        /// Delete a SCIM user from an organization
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/scim#delete-a-scim-user-from-an-organization)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var search: Search {
        Search(path: "/search")
    }

    public struct Search {
        /// Path: `/search`
        public let path: String
    }
}

extension Paths.Search {
    public var code: Code {
        Code(path: path + "/code")
    }

    public struct Code {
        /// Path: `/search/code`
        public let path: String

        /// Search code
        ///
        /// Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
        /// 
        /// `q=addClass+in:file+language:js+repo:jquery/jquery`
        /// 
        /// This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
        /// 
        /// #### Considerations for code search
        /// 
        /// Due to the complexity of searching code, there are a few restrictions on how searches are performed:
        /// 
        /// *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
        /// *   Only files smaller than 384 KB are searchable.
        /// *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
        /// language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-code)
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var isIncompleteResults: Bool
            public var items: [OctoKit.CodeSearchResultItem]

            public init(totalCount: Int, isIncompleteResults: Bool, items: [OctoKit.CodeSearchResultItem]) {
                self.totalCount = totalCount
                self.isIncompleteResults = isIncompleteResults
                self.items = items
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case isIncompleteResults = "incomplete_results"
                case items
            }
        }

        public struct GetParameters {
            public var q: String
            public var sort: Sort?
            public var order: Order?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case indexed
            }

            public enum Order: String, Codable, CaseIterable {
                case desc
                case asc
            }

            public init(q: String, sort: Sort? = nil, order: Order? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.q = q
                self.sort = sort
                self.order = order
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(q, forKey: "q")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(order, forKey: "order")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Search {
    public var commits: Commits {
        Commits(path: path + "/commits")
    }

    public struct Commits {
        /// Path: `/search/commits`
        public let path: String

        /// Search commits
        ///
        /// Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
        /// metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
        /// 
        /// `q=repo:octocat/Spoon-Knife+css`
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-commits)
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var isIncompleteResults: Bool
            public var items: [OctoKit.CommitSearchResultItem]

            public init(totalCount: Int, isIncompleteResults: Bool, items: [OctoKit.CommitSearchResultItem]) {
                self.totalCount = totalCount
                self.isIncompleteResults = isIncompleteResults
                self.items = items
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case isIncompleteResults = "incomplete_results"
                case items
            }
        }

        public struct GetParameters {
            public var q: String
            public var sort: Sort?
            public var order: Order?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case authorDate = "author-date"
                case committerDate = "committer-date"
            }

            public enum Order: String, Codable, CaseIterable {
                case desc
                case asc
            }

            public init(q: String, sort: Sort? = nil, order: Order? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.q = q
                self.sort = sort
                self.order = order
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(q, forKey: "q")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(order, forKey: "order")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Search {
    public var issues: Issues {
        Issues(path: path + "/issues")
    }

    public struct Issues {
        /// Path: `/search/issues`
        public let path: String

        /// Search issues and pull requests
        ///
        /// Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
        /// search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
        /// 
        /// `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
        /// 
        /// This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
        /// 
        /// **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-issues-and-pull-requests)
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var isIncompleteResults: Bool
            public var items: [OctoKit.IssueSearchResultItem]

            public init(totalCount: Int, isIncompleteResults: Bool, items: [OctoKit.IssueSearchResultItem]) {
                self.totalCount = totalCount
                self.isIncompleteResults = isIncompleteResults
                self.items = items
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case isIncompleteResults = "incomplete_results"
                case items
            }
        }

        public struct GetParameters {
            public var q: String
            public var sort: Sort?
            public var order: Order?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case comments
                case reactions
                case reactionsPlusOne = "reactions-+1"
                case reactionsMinusOne = "reactions--1"
                case reactionsSmile = "reactions-smile"
                case reactionsThinkingFace = "reactions-thinking_face"
                case reactionsHeart = "reactions-heart"
                case reactionsTada = "reactions-tada"
                case interactions
                case created
                case updated
            }

            public enum Order: String, Codable, CaseIterable {
                case desc
                case asc
            }

            public init(q: String, sort: Sort? = nil, order: Order? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.q = q
                self.sort = sort
                self.order = order
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(q, forKey: "q")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(order, forKey: "order")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Search {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/search/labels`
        public let path: String

        /// Search labels
        ///
        /// Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
        /// 
        /// `q=bug+defect+enhancement&repository_id=64778136`
        /// 
        /// The labels that best match the query appear first in the search results.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-labels)
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var isIncompleteResults: Bool
            public var items: [OctoKit.LabelSearchResultItem]

            public init(totalCount: Int, isIncompleteResults: Bool, items: [OctoKit.LabelSearchResultItem]) {
                self.totalCount = totalCount
                self.isIncompleteResults = isIncompleteResults
                self.items = items
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case isIncompleteResults = "incomplete_results"
                case items
            }
        }

        public struct GetParameters {
            public var repositoryID: Int
            public var q: String
            public var sort: Sort?
            public var order: Order?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
            }

            public enum Order: String, Codable, CaseIterable {
                case desc
                case asc
            }

            public init(repositoryID: Int, q: String, sort: Sort? = nil, order: Order? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.repositoryID = repositoryID
                self.q = q
                self.sort = sort
                self.order = order
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(repositoryID, forKey: "repository_id")
                encoder.encode(q, forKey: "q")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(order, forKey: "order")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Search {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/search/repositories`
        public let path: String

        /// Search repositories
        ///
        /// Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
        /// 
        /// `q=tetris+language:assembly&sort=stars&order=desc`
        /// 
        /// This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-repositories)
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var isIncompleteResults: Bool
            public var items: [OctoKit.RepoSearchResultItem]

            public init(totalCount: Int, isIncompleteResults: Bool, items: [OctoKit.RepoSearchResultItem]) {
                self.totalCount = totalCount
                self.isIncompleteResults = isIncompleteResults
                self.items = items
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case isIncompleteResults = "incomplete_results"
                case items
            }
        }

        public struct GetParameters {
            public var q: String
            public var sort: Sort?
            public var order: Order?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case stars
                case forks
                case helpWantedIssues = "help-wanted-issues"
                case updated
            }

            public enum Order: String, Codable, CaseIterable {
                case desc
                case asc
            }

            public init(q: String, sort: Sort? = nil, order: Order? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.q = q
                self.sort = sort
                self.order = order
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(q, forKey: "q")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(order, forKey: "order")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Search {
    public var topics: Topics {
        Topics(path: path + "/topics")
    }

    public struct Topics {
        /// Path: `/search/topics`
        public let path: String

        /// Search topics
        ///
        /// Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
        /// 
        /// When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
        /// 
        /// `q=ruby+is:featured`
        /// 
        /// This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-topics)
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var isIncompleteResults: Bool
            public var items: [OctoKit.TopicSearchResultItem]

            public init(totalCount: Int, isIncompleteResults: Bool, items: [OctoKit.TopicSearchResultItem]) {
                self.totalCount = totalCount
                self.isIncompleteResults = isIncompleteResults
                self.items = items
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case isIncompleteResults = "incomplete_results"
                case items
            }
        }

        public struct GetParameters {
            public var q: String
            public var perPage: Int?
            public var page: Int?

            public init(q: String, perPage: Int? = nil, page: Int? = nil) {
                self.q = q
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(q, forKey: "q")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Search {
    public var users: Users {
        Users(path: path + "/users")
    }

    public struct Users {
        /// Path: `/search/users`
        public let path: String

        /// Search users
        ///
        /// Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you're looking for a list of popular users, you might try this query:
        /// 
        /// `q=tom+repos:%3E42+followers:%3E1000`
        /// 
        /// This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-users)
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var isIncompleteResults: Bool
            public var items: [OctoKit.UserSearchResultItem]

            public init(totalCount: Int, isIncompleteResults: Bool, items: [OctoKit.UserSearchResultItem]) {
                self.totalCount = totalCount
                self.isIncompleteResults = isIncompleteResults
                self.items = items
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case isIncompleteResults = "incomplete_results"
                case items
            }
        }

        public struct GetParameters {
            public var q: String
            public var sort: Sort?
            public var order: Order?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case followers
                case repositories
                case joined
            }

            public enum Order: String, Codable, CaseIterable {
                case desc
                case asc
            }

            public init(q: String, sort: Sort? = nil, order: Order? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.q = q
                self.sort = sort
                self.order = order
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(q, forKey: "q")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(order, forKey: "order")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var teams: Teams {
        Teams(path: "/teams")
    }

    public struct Teams {
        /// Path: `/teams`
        public let path: String
    }
}

extension Paths.Teams {
    public func teamID(_ teamID: Int) -> WithTeamID {
        WithTeamID(path: "\(path)/\(teamID)")
    }

    public struct WithTeamID {
        /// Path: `/teams/{team_id}`
        public let path: String

        /// Get a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#get-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var get: Request<OctoKit.TeamFull> {
            .get(path)
        }

        /// Update a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
        /// 
        /// To edit a team, the authenticated user must either be an organization owner or a team maintainer.
        /// 
        /// **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#update-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func patch(_ body: PatchRequest) -> Request<OctoKit.TeamFull> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The name of the team.
            public var name: String
            /// The description of the team.
            public var description: String?
            /// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
            /// **For a non-nested team:**  
            /// \* `secret` - only visible to organization owners and members of this team.  
            /// \* `closed` - visible to all members of this organization.  
            /// **For a parent or child team:**  
            /// \* `closed` - visible to all members of this organization.
            public var privacy: Privacy?
            /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
            /// \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
            /// \* `push` - team members can pull and push, but not administer newly-added repositories.  
            /// \* `admin` - team members can pull, push and administer newly-added repositories.
            public var permission: Permission?
            /// The ID of a team to set as the parent team.
            public var parentTeamID: Int?

            /// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
            /// **For a non-nested team:**  
            /// \* `secret` - only visible to organization owners and members of this team.  
            /// \* `closed` - visible to all members of this organization.  
            /// **For a parent or child team:**  
            /// \* `closed` - visible to all members of this organization.
            public enum Privacy: String, Codable, CaseIterable {
                case secret
                case closed
            }

            /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
            /// \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
            /// \* `push` - team members can pull and push, but not administer newly-added repositories.  
            /// \* `admin` - team members can pull, push and administer newly-added repositories.
            public enum Permission: String, Codable, CaseIterable {
                case pull
                case push
                case admin
            }

            public init(name: String, description: String? = nil, privacy: Privacy? = nil, permission: Permission? = nil, parentTeamID: Int? = nil) {
                self.name = name
                self.description = description
                self.privacy = privacy
                self.permission = permission
                self.parentTeamID = parentTeamID
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case description
                case privacy
                case permission
                case parentTeamID = "parent_team_id"
            }
        }

        /// Delete a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
        /// 
        /// To delete a team, the authenticated user must be an organization owner or team maintainer.
        /// 
        /// If you are an organization owner, deleting a parent team will delete all of its child teams as well.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#delete-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var discussions: Discussions {
        Discussions(path: path + "/discussions")
    }

    public struct Discussions {
        /// Path: `/teams/{team_id}/discussions`
        public let path: String

        /// List discussions (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
        /// 
        /// List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-discussions-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.TeamDiscussion]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a discussion (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
        /// 
        /// Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#create-a-discussion-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func post(_ body: PostRequest) -> Request<OctoKit.TeamDiscussion> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The discussion post's title.
            public var title: String
            /// The discussion post's body text.
            public var body: String
            /// Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
            public var isPrivate: Bool

            public init(title: String, body: String, isPrivate: Bool? = nil) {
                self.title = title
                self.body = body
                self.isPrivate = isPrivate ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case title
                case body
                case isPrivate = "private"
            }
        }
    }
}

extension Paths.Teams.WithTeamID.Discussions {
    public func discussionNumber(_ discussionNumber: Int) -> WithDiscussionNumber {
        WithDiscussionNumber(path: "\(path)/\(discussionNumber)")
    }

    public struct WithDiscussionNumber {
        /// Path: `/teams/{team_id}/discussions/{discussion_number}`
        public let path: String

        /// Get a discussion (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
        /// 
        /// Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-a-discussion-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var get: Request<OctoKit.TeamDiscussion> {
            .get(path)
        }

        /// Update a discussion (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
        /// 
        /// Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#update-a-discussion-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.TeamDiscussion> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The discussion post's title.
            public var title: String?
            /// The discussion post's body text.
            public var body: String?

            public init(title: String? = nil, body: String? = nil) {
                self.title = title
                self.body = body
            }
        }

        /// Delete a discussion (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
        /// 
        /// Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#delete-a-discussion-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID.Discussions.WithDiscussionNumber {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/teams/{team_id}/discussions/{discussion_number}/comments`
        public let path: String

        /// List discussion comments (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
        /// 
        /// List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-discussion-comments-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.TeamDiscussionComment]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create a discussion comment (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
        /// 
        /// Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#create-a-discussion-comment-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func post(body: String) -> Request<OctoKit.TeamDiscussionComment> {
            .post(path, body: ["body": body])
        }
    }
}

extension Paths.Teams.WithTeamID.Discussions.WithDiscussionNumber.Comments {
    public func commentNumber(_ commentNumber: Int) -> WithCommentNumber {
        WithCommentNumber(path: "\(path)/\(commentNumber)")
    }

    public struct WithCommentNumber {
        /// Path: `/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`
        public let path: String

        /// Get a discussion comment (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
        /// 
        /// Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-a-discussion-comment-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var get: Request<OctoKit.TeamDiscussionComment> {
            .get(path)
        }

        /// Update a discussion comment (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
        /// 
        /// Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#update-a-discussion-comment-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func patch(body: String) -> Request<OctoKit.TeamDiscussionComment> {
            .patch(path, body: ["body": body])
        }

        /// Delete a discussion comment (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
        /// 
        /// Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID.Discussions.WithDiscussionNumber.Comments.WithCommentNumber {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions`
        public let path: String

        /// List reactions for a team discussion comment (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
        /// 
        /// List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Reaction]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var content: Content?
            public var perPage: Int?
            public var page: Int?

            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.content = content
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(content, forKey: "content")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create reaction for a team discussion comment (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
        /// 
        /// Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func post(content: PostRequest.Content) -> Request<OctoKit.Reaction> {
            .post(path, body: PostRequest(content: content))
        }

        public struct PostRequest: Encodable {
            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
            public var content: Content

            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content) {
                self.content = content
            }
        }
    }
}

extension Paths.Teams.WithTeamID.Discussions.WithDiscussionNumber {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/teams/{team_id}/discussions/{discussion_number}/reactions`
        public let path: String

        /// List reactions for a team discussion (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
        /// 
        /// List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Reaction]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var content: Content?
            public var perPage: Int?
            public var page: Int?

            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.content = content
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(content, forKey: "content")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }

        /// Create reaction for a team discussion (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
        /// 
        /// Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func post(content: PostRequest.Content) -> Request<OctoKit.Reaction> {
            .post(path, body: PostRequest(content: content))
        }

        public struct PostRequest: Encodable {
            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
            public var content: Content

            /// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
            public enum Content: String, Codable, CaseIterable {
                case plus1 = "+1"
                case minus1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case rocket
                case eyes
            }

            public init(content: Content) {
                self.content = content
            }
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var invitations: Invitations {
        Invitations(path: path + "/invitations")
    }

    public struct Invitations {
        /// Path: `/teams/{team_id}/invitations`
        public let path: String

        /// List pending team invitations (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
        /// 
        /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.OrganizationInvitation]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/teams/{team_id}/members`
        public let path: String

        /// List team members (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
        /// 
        /// Team members will include the members of child teams.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-team-members-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var role: Role?
            public var perPage: Int?
            public var page: Int?

            public enum Role: String, Codable, CaseIterable {
                case member
                case maintainer
                case all
            }

            public init(role: Role? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.role = role
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(role, forKey: "role")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Teams.WithTeamID.Members {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/teams/{team_id}/members/{username}`
        public let path: String

        /// Get team member (Legacy)
        ///
        /// The "Get team member" endpoint (described below) is deprecated.
        /// 
        /// We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
        /// 
        /// To list members in a team, the team must be visible to the authenticated user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-team-member-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var get: Request<Void> {
            .get(path)
        }

        /// Add team member (Legacy)
        ///
        /// The "Add team member" endpoint (described below) is deprecated.
        /// 
        /// We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
        /// 
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
        /// 
        /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        /// 
        /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#add-team-member-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var put: Request<Void> {
            .put(path)
        }

        /// Remove team member (Legacy)
        ///
        /// The "Remove team member" endpoint (described below) is deprecated.
        /// 
        /// We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
        /// 
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
        /// 
        /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#remove-team-member-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var memberships: Memberships {
        Memberships(path: path + "/memberships")
    }

    public struct Memberships {
        /// Path: `/teams/{team_id}/memberships`
        public let path: String
    }
}

extension Paths.Teams.WithTeamID.Memberships {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/teams/{team_id}/memberships/{username}`
        public let path: String

        /// Get team membership for a user (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
        /// 
        /// Team members will include the members of child teams.
        /// 
        /// To get a user's membership with a team, the team must be visible to the authenticated user.
        /// 
        /// **Note:**
        /// The response contains the `state` of the membership and the member's `role`.
        /// 
        /// The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var get: Request<OctoKit.TeamMembership> {
            .get(path)
        }

        /// Add or update team membership for a user (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
        /// 
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
        /// 
        /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        /// 
        /// If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
        /// 
        /// If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func put(role: PutRequest.Role? = nil) -> Request<OctoKit.TeamMembership> {
            .put(path, body: PutRequest(role: role))
        }

        public struct PutRequest: Encodable {
            /// The role that this user should have in the team. Can be one of:  
            /// \* `member` - a normal member of the team.  
            /// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
            public var role: Role?

            /// The role that this user should have in the team. Can be one of:  
            /// \* `member` - a normal member of the team.  
            /// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
            public enum Role: String, Codable, CaseIterable {
                case member
                case maintainer
            }

            public init(role: Role? = nil) {
                self.role = role
            }
        }

        /// Remove team membership for a user (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
        /// 
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
        /// 
        /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/teams/{team_id}/projects`
        public let path: String

        /// List team projects (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
        /// 
        /// Lists the organization projects for a team.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#list-team-projects-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.TeamProject]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Teams.WithTeamID.Projects {
    public func projectID(_ projectID: Int) -> WithProjectID {
        WithProjectID(path: "\(path)/\(projectID)")
    }

    public struct WithProjectID {
        /// Path: `/teams/{team_id}/projects/{project_id}`
        public let path: String

        /// Check team permissions for a project (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
        /// 
        /// Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-project-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var get: Request<OctoKit.TeamProject> {
            .get(path)
        }

        /// Add or update team project permissions (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
        /// 
        /// Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#add-or-update-team-project-permissions-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func put(permission: PutRequest.Permission? = nil) -> Request<Void> {
            .put(path, body: PutRequest(permission: permission))
        }

        public struct PutRequest: Encodable {
            /// The permission to grant to the team for this project. Can be one of:  
            /// \* `read` - team members can read, but not write to or administer this project.  
            /// \* `write` - team members can read and write, but not administer this project.  
            /// \* `admin` - team members can read, write and administer this project.  
            /// Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
            public var permission: Permission?

            /// The permission to grant to the team for this project. Can be one of:  
            /// \* `read` - team members can read, but not write to or administer this project.  
            /// \* `write` - team members can read and write, but not administer this project.  
            /// \* `admin` - team members can read, write and administer this project.  
            /// Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
            public enum Permission: String, Codable, CaseIterable {
                case read
                case write
                case admin
            }

            public init(permission: Permission? = nil) {
                self.permission = permission
            }
        }

        /// Remove a project from a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
        /// 
        /// Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/teams/{team_id}/repos`
        public let path: String

        /// List team repositories (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#list-team-repositories-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.MinimalRepository]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Teams.WithTeamID.Repos {
    public func owner(_ owner: String) -> WithOwner {
        WithOwner(path: "\(path)/\(owner)")
    }

    public struct WithOwner {
        /// Path: `/teams/{team_id}/repos/{owner}`
        public let path: String
    }
}

extension Paths.Teams.WithTeamID.Repos.WithOwner {
    public func repo(_ repo: String) -> WithRepo {
        WithRepo(path: "\(path)/\(repo)")
    }

    public struct WithRepo {
        /// Path: `/teams/{team_id}/repos/{owner}/{repo}`
        public let path: String

        /// Check team permissions for a repository (Legacy)
        ///
        /// **Note**: Repositories inherited through a parent team will also be checked.
        /// 
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
        /// 
        /// You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var get: Request<OctoKit.TeamRepository> {
            .get(path)
        }

        /// Add or update team repository permissions (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
        /// 
        /// To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
        /// 
        /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func put(permission: PutRequest.Permission? = nil) -> Request<Void> {
            .put(path, body: PutRequest(permission: permission))
        }

        public struct PutRequest: Encodable {
            /// The permission to grant the team on this repository. Can be one of:  
            /// \* `pull` - team members can pull, but not push to or administer this repository.  
            /// \* `push` - team members can pull and push, but not administer this repository.  
            /// \* `admin` - team members can pull, push and administer this repository.  
            ///   
            /// If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
            public var permission: Permission?

            /// The permission to grant the team on this repository. Can be one of:  
            /// \* `pull` - team members can pull, but not push to or administer this repository.  
            /// \* `push` - team members can pull and push, but not administer this repository.  
            /// \* `admin` - team members can pull, push and administer this repository.  
            ///   
            /// If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
            public enum Permission: String, Codable, CaseIterable {
                case pull
                case push
                case admin
            }

            public init(permission: Permission? = nil) {
                self.permission = permission
            }
        }

        /// Remove a repository from a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
        /// 
        /// If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var teamSync: TeamSync {
        TeamSync(path: path + "/team-sync")
    }

    public struct TeamSync {
        /// Path: `/teams/{team_id}/team-sync`
        public let path: String
    }
}

extension Paths.Teams.WithTeamID.TeamSync {
    public var groupMappings: GroupMappings {
        GroupMappings(path: path + "/group-mappings")
    }

    public struct GroupMappings {
        /// Path: `/teams/{team_id}/team-sync/group-mappings`
        public let path: String

        /// List IdP groups for a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
        /// 
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// List IdP groups connected to a team on GitHub.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public var get: Request<OctoKit.GroupMapping> {
            .get(path)
        }

        /// Create or update IdP group connections (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
        /// 
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func patch(_ body: PatchRequest) -> Request<OctoKit.GroupMapping> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
            public var groups: [Group]
            /// Example: "I am not a timestamp"
            public var syncedAt: String?

            public struct Group: Encodable {
                /// ID of the IdP group.
                public var groupID: String
                /// Name of the IdP group.
                public var groupName: String
                /// Description of the IdP group.
                public var groupDescription: String
                /// Example: "caceab43fc9ffa20081c"
                public var id: String?
                /// Example: "external-team-6c13e7288ef7"
                public var name: String?
                /// Example: "moar cheese pleese"
                public var description: String?

                public init(groupID: String, groupName: String, groupDescription: String, id: String? = nil, name: String? = nil, description: String? = nil) {
                    self.groupID = groupID
                    self.groupName = groupName
                    self.groupDescription = groupDescription
                    self.id = id
                    self.name = name
                    self.description = description
                }

                private enum CodingKeys: String, CodingKey {
                    case groupID = "group_id"
                    case groupName = "group_name"
                    case groupDescription = "group_description"
                    case id
                    case name
                    case description
                }
            }

            public init(groups: [Group], syncedAt: String? = nil) {
                self.groups = groups
                self.syncedAt = syncedAt
            }

            private enum CodingKeys: String, CodingKey {
                case groups
                case syncedAt = "synced_at"
            }
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/teams/{team_id}/teams`
        public let path: String

        /// List child teams (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#list-child-teams-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Team]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths {
    public static var user: User {
        User(path: "/user")
    }

    public struct User {
        /// Path: `/user`
        public let path: String

        /// Get the authenticated user
        ///
        /// If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
        /// 
        /// If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-the-authenticated-user)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public enum GetResponse: Decodable {
            case privateUser(OctoKit.PrivateUser)
            case publicUser(OctoKit.PublicUser)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(OctoKit.PrivateUser.self) {
                    self = .privateUser(value)
                } else if let value = try? container.decode(OctoKit.PublicUser.self) {
                    self = .publicUser(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }
        }

        /// Update the authenticated user
        ///
        /// **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users/#update-the-authenticated-user)
        public func patch(_ body: PatchRequest? = nil) -> Request<OctoKit.PrivateUser> {
            .patch(path, body: body)
        }

        public struct PatchRequest: Encodable {
            /// The new name of the user.
            ///
            /// Example: "Omar Jahandar"
            public var name: String?
            /// The publicly visible email address of the user.
            ///
            /// Example: "omar@example.com"
            public var email: String?
            /// The new blog URL of the user.
            ///
            /// Example: "blog.example.com"
            public var blog: String?
            /// The new Twitter username of the user.
            ///
            /// Example: "therealomarj"
            public var twitterUsername: String?
            /// The new company of the user.
            ///
            /// Example: "Acme corporation"
            public var company: String?
            /// The new location of the user.
            ///
            /// Example: "Berlin, Germany"
            public var location: String?
            /// The new hiring availability of the user.
            public var isHireable: Bool?
            /// The new short biography of the user.
            public var bio: String?

            public init(name: String? = nil, email: String? = nil, blog: String? = nil, twitterUsername: String? = nil, company: String? = nil, location: String? = nil, isHireable: Bool? = nil, bio: String? = nil) {
                self.name = name
                self.email = email
                self.blog = blog
                self.twitterUsername = twitterUsername
                self.company = company
                self.location = location
                self.isHireable = isHireable
                self.bio = bio
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case email
                case blog
                case twitterUsername = "twitter_username"
                case company
                case location
                case isHireable = "hireable"
                case bio
            }
        }
    }
}

extension Paths.User {
    public var blocks: Blocks {
        Blocks(path: path + "/blocks")
    }

    public struct Blocks {
        /// Path: `/user/blocks`
        public let path: String

        /// List users blocked by the authenticated user
        ///
        /// List the users you've blocked on your personal account.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user)
        public var get: Request<[OctoKit.SimpleUser]> {
            .get(path)
        }
    }
}

extension Paths.User.Blocks {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/user/blocks/{username}`
        public let path: String

        /// Check if a user is blocked by the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user)
        public var get: Request<Void> {
            .get(path)
        }

        /// Block a user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#block-a-user)
        public var put: Request<Void> {
            .put(path)
        }

        /// Unblock a user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#unblock-a-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var codespaces: Codespaces {
        Codespaces(path: path + "/codespaces")
    }

    public struct Codespaces {
        /// Path: `/user/codespaces`
        public let path: String

        /// List codespaces for the authenticated user
        ///
        /// Lists the authenticated user's codespaces.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-codespaces-for-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var codespaces: [OctoKit.Codespace]

            public init(totalCount: Int, codespaces: [OctoKit.Codespace]) {
                self.totalCount = totalCount
                self.codespaces = codespaces
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case codespaces
            }
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            public var repositoryID: Int?

            public init(perPage: Int? = nil, page: Int? = nil, repositoryID: Int? = nil) {
                self.perPage = perPage
                self.page = page
                self.repositoryID = repositoryID
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(repositoryID, forKey: "repository_id")
                return encoder.items
            }
        }

        /// Create a codespace for the authenticated user
        ///
        /// Creates a new codespace, owned by the authenticated user.
        /// 
        /// This endpoint requires either a `repository_id` OR a `pull_request` but not both.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#create-a-codespace-for-the-authenticated-user)
        public func post(_ body: PostRequest) -> Request<OctoKit.Codespace> {
            .post(path, body: body)
        }

        public enum PostRequest: Encodable {
            case a(A)
            case b(B)

            public struct A: Encodable {
                /// Repository id for this codespace
                public var repositoryID: Int
                /// Git ref (typically a branch name) for this codespace
                public var ref: String?
                /// Location for this codespace
                public var location: String
                /// Machine type to use for this codespace
                public var machine: String?
                /// Working directory for this codespace
                public var workingDirectory: String?
                /// Time in minutes before codespace stops from inactivity
                public var idleTimeoutMinutes: Int?

                public init(repositoryID: Int, ref: String? = nil, location: String, machine: String? = nil, workingDirectory: String? = nil, idleTimeoutMinutes: Int? = nil) {
                    self.repositoryID = repositoryID
                    self.ref = ref
                    self.location = location
                    self.machine = machine
                    self.workingDirectory = workingDirectory
                    self.idleTimeoutMinutes = idleTimeoutMinutes
                }

                private enum CodingKeys: String, CodingKey {
                    case repositoryID = "repository_id"
                    case ref
                    case location
                    case machine
                    case workingDirectory = "working_directory"
                    case idleTimeoutMinutes = "idle_timeout_minutes"
                }
            }

            public struct B: Encodable {
                /// Pull request number for this codespace
                public var pullRequest: PullRequest
                /// Location for this codespace
                public var location: String
                /// Machine type to use for this codespace
                public var machine: String?
                /// Working directory for this codespace
                public var workingDirectory: String?
                /// Time in minutes before codespace stops from inactivity
                public var idleTimeoutMinutes: Int?

                /// Pull request number for this codespace
                public struct PullRequest: Encodable {
                    /// Pull request number
                    public var pullRequestNumber: Int
                    /// Repository id for this codespace
                    public var repositoryID: Int

                    public init(pullRequestNumber: Int, repositoryID: Int) {
                        self.pullRequestNumber = pullRequestNumber
                        self.repositoryID = repositoryID
                    }

                    private enum CodingKeys: String, CodingKey {
                        case pullRequestNumber = "pull_request_number"
                        case repositoryID = "repository_id"
                    }
                }

                public init(pullRequest: PullRequest, location: String, machine: String? = nil, workingDirectory: String? = nil, idleTimeoutMinutes: Int? = nil) {
                    self.pullRequest = pullRequest
                    self.location = location
                    self.machine = machine
                    self.workingDirectory = workingDirectory
                    self.idleTimeoutMinutes = idleTimeoutMinutes
                }

                private enum CodingKeys: String, CodingKey {
                    case pullRequest = "pull_request"
                    case location
                    case machine
                    case workingDirectory = "working_directory"
                    case idleTimeoutMinutes = "idle_timeout_minutes"
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .a(let value): try container.encode(value)
                case .b(let value): try container.encode(value)
                }
            }
        }
    }
}

extension Paths.User.Codespaces {
    public var secrets: Secrets {
        Secrets(path: path + "/secrets")
    }

    public struct Secrets {
        /// Path: `/user/codespaces/secrets`
        public let path: String

        /// List secrets for the authenticated user
        ///
        /// Lists all secrets available for a user's Codespaces without revealing their
        /// encrypted values.
        /// You must authenticate using an access token with the `user` or `read:user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-secrets-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var secrets: [OctoKit.CodespacesSecret]

            public init(totalCount: Int, secrets: [OctoKit.CodespacesSecret]) {
                self.totalCount = totalCount
                self.secrets = secrets
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case secrets
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User.Codespaces.Secrets {
    public var publicKey: PublicKey {
        PublicKey(path: path + "/public-key")
    }

    public struct PublicKey {
        /// Path: `/user/codespaces/secrets/public-key`
        public let path: String

        /// Get public key for the authenticated user
        ///
        /// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with one of the 'read:user' or 'user' scopes in their personal access token. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#get-public-key-for-the-authenticated-user)
        public var get: Request<OctoKit.CodespacesUserPublicKey> {
            .get(path)
        }
    }
}

extension Paths.User.Codespaces.Secrets {
    public func secretName(_ secretName: String) -> WithSecretName {
        WithSecretName(path: "\(path)/\(secretName)")
    }

    public struct WithSecretName {
        /// Path: `/user/codespaces/secrets/{secret_name}`
        public let path: String

        /// Get a secret for the authenticated user
        ///
        /// Gets a secret available to a user's codespaces without revealing its encrypted value.
        /// You must authenticate using an access token with the `user` or `read:user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#get-a-secret-for-the-authenticated-user)
        public var get: Request<OctoKit.CodespacesSecret> {
            .get(path)
        }

        /// Create or update a secret for the authenticated user
        ///
        /// Creates or updates a secret for a user's codespace with an encrypted value. Encrypt your secret using
        /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `user` scope to use this endpoint. User must also have Codespaces access to use this endpoint.
        /// 
        /// #### Example encrypting a secret using Node.js
        /// 
        /// Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
        /// 
        /// ```
        /// const sodium = require('tweetsodium');
        /// 
        /// const key = "base64-encoded-public-key";
        /// const value = "plain-text-secret";
        /// 
        /// // Convert the message and key to Uint8Array's (Buffer implements that interface)
        /// const messageBytes = Buffer.from(value);
        /// const keyBytes = Buffer.from(key, 'base64');
        /// 
        /// // Encrypt using LibSodium.
        /// const encryptedBytes = sodium.seal(messageBytes, keyBytes);
        /// 
        /// // Base64 the encrypted secret
        /// const encrypted = Buffer.from(encryptedBytes).toString('base64');
        /// 
        /// console.log(encrypted);
        /// ```
        /// 
        /// 
        /// #### Example encrypting a secret using Python
        /// 
        /// Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
        /// 
        /// ```
        /// from base64 import b64encode
        /// from nacl import encoding, public
        /// 
        /// def encrypt(public_key: str, secret_value: str) -> str:
        ///   """Encrypt a Unicode string using the public key."""
        ///   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
        ///   sealed_box = public.SealedBox(public_key)
        ///   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
        ///   return b64encode(encrypted).decode("utf-8")
        /// ```
        /// 
        /// #### Example encrypting a secret using C#
        /// 
        /// Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        /// 
        /// ```
        /// var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
        /// var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
        /// 
        /// var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        /// 
        /// Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        /// ```
        /// 
        /// #### Example encrypting a secret using Ruby
        /// 
        /// Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        /// 
        /// ```ruby
        /// require "rbnacl"
        /// require "base64"
        /// 
        /// key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
        /// public_key = RbNaCl::PublicKey.new(key)
        /// 
        /// box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        /// encrypted_secret = box.encrypt("my_secret")
        /// 
        /// # Print the base64 encoded secret
        /// puts Base64.strict_encode64(encrypted_secret)
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#create-or-update-a-secret-for-the-authenticated-user)
        public func put(_ body: PutRequest) -> Request<Void> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.
            public var encryptedValue: String
            /// ID of the key you used to encrypt the secret.
            public var keyID: String
            /// An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
            public var selectedRepositoryIDs: [String]?

            public init(encryptedValue: String, keyID: String, selectedRepositoryIDs: [String]? = nil) {
                self.encryptedValue = encryptedValue
                self.keyID = keyID
                self.selectedRepositoryIDs = selectedRepositoryIDs
            }

            private enum CodingKeys: String, CodingKey {
                case encryptedValue = "encrypted_value"
                case keyID = "key_id"
                case selectedRepositoryIDs = "selected_repository_ids"
            }
        }

        /// Delete a secret for the authenticated user
        ///
        /// Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret. You must authenticate using an access token with the `user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#delete-a-secret-for-the-authenticated-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Codespaces.Secrets.WithSecretName {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/user/codespaces/secrets/{secret_name}/repositories`
        public let path: String

        /// List selected repositories for a user secret
        ///
        /// List the repositories that have been granted the ability to use a user's codespace secret.
        /// You must authenticate using an access token with the `user` or `read:user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var repositories: [OctoKit.MinimalRepository]

            public init(totalCount: Int, repositories: [OctoKit.MinimalRepository]) {
                self.totalCount = totalCount
                self.repositories = repositories
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case repositories
            }
        }

        /// Set selected repositories for a user secret
        ///
        /// Select the repositories that will use a user's codespace secret.
        /// You must authenticate using an access token with the `user` or `read:user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret)
        public func put(selectedRepositoryIDs: [Int]) -> Request<Void> {
            .put(path, body: ["selected_repository_ids": selectedRepositoryIDs])
        }
    }
}

extension Paths.User.Codespaces.Secrets.WithSecretName.Repositories {
    public func repositoryID(_ repositoryID: Int) -> WithRepositoryID {
        WithRepositoryID(path: "\(path)/\(repositoryID)")
    }

    public struct WithRepositoryID {
        /// Path: `/user/codespaces/secrets/{secret_name}/repositories/{repository_id}`
        public let path: String

        /// Add a selected repository to a user secret
        ///
        /// Adds a repository to the selected repositories for a user's codespace secret.
        /// You must authenticate using an access token with the `user` or `read:user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret)
        public var put: Request<Void> {
            .put(path)
        }

        /// Remove a selected repository from a user secret
        ///
        /// Removes a repository from the selected repositories for a user's codespace secret.
        /// You must authenticate using an access token with the `user` or `read:user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Codespaces {
    public func codespaceName(_ codespaceName: String) -> WithCodespaceName {
        WithCodespaceName(path: "\(path)/\(codespaceName)")
    }

    public struct WithCodespaceName {
        /// Path: `/user/codespaces/{codespace_name}`
        public let path: String

        /// Get a codespace for the authenticated user
        ///
        /// Gets information about a user's codespace.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#get-a-codespace-for-the-authenticated-user)
        public var get: Request<OctoKit.Codespace> {
            .get(path)
        }

        /// Update a codespace for the authenticated user
        ///
        /// Updates a codespace owned by the authenticated user. Currently only the codespace's machine type can be modified using this endpoint.
        /// 
        /// Once you specify a new machine type it will be applied the next time your codespace is started.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#update-a-codespace-for-the-authenticated-user)
        public func patch(machine: String? = nil) -> Request<OctoKit.Codespace> {
            .patch(path, body: ["machine": machine])
        }

        /// Delete a codespace for the authenticated user
        ///
        /// Deletes a user's codespace.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#delete-a-codespace-for-the-authenticated-user)
        public var delete: Request<[String: AnyJSON]> {
            .delete(path)
        }
    }
}

extension Paths.User.Codespaces.WithCodespaceName {
    public var machines: Machines {
        Machines(path: path + "/machines")
    }

    public struct Machines {
        /// Path: `/user/codespaces/{codespace_name}/machines`
        public let path: String

        /// List machine types for a codespace
        ///
        /// List the machine types a codespace can transition to use.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-machine-types-for-a-codespace)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var machines: [OctoKit.CodespaceMachine]

            public init(totalCount: Int, machines: [OctoKit.CodespaceMachine]) {
                self.totalCount = totalCount
                self.machines = machines
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case machines
            }
        }
    }
}

extension Paths.User.Codespaces.WithCodespaceName {
    public var start: Start {
        Start(path: path + "/start")
    }

    public struct Start {
        /// Path: `/user/codespaces/{codespace_name}/start`
        public let path: String

        /// Start a codespace for the authenticated user
        ///
        /// Starts a user's codespace.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#start-a-codespace-for-the-authenticated-user)
        public var post: Request<OctoKit.Codespace> {
            .post(path)
        }
    }
}

extension Paths.User.Codespaces.WithCodespaceName {
    public var stop: Stop {
        Stop(path: path + "/stop")
    }

    public struct Stop {
        /// Path: `/user/codespaces/{codespace_name}/stop`
        public let path: String

        /// Stop a codespace for the authenticated user
        ///
        /// Stops a user's codespace.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#stop-a-codespace-for-the-authenticated-user)
        public var post: Request<OctoKit.Codespace> {
            .post(path)
        }
    }
}

extension Paths.User {
    public var email: Email {
        Email(path: path + "/email")
    }

    public struct Email {
        /// Path: `/user/email`
        public let path: String
    }
}

extension Paths.User.Email {
    public var visibility: Visibility {
        Visibility(path: path + "/visibility")
    }

    public struct Visibility {
        /// Path: `/user/email/visibility`
        public let path: String

        /// Set primary email visibility for the authenticated user
        ///
        /// Sets the visibility for your primary email addresses.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user)
        public func patch(visibility: PatchRequest.Visibility) -> Request<[OctoKit.Email]> {
            .patch(path, body: PatchRequest(visibility: visibility))
        }

        public struct PatchRequest: Encodable {
            /// Denotes whether an email is publicly visible.
            public var visibility: Visibility

            /// Denotes whether an email is publicly visible.
            public enum Visibility: String, Codable, CaseIterable {
                case `public`
                case `private`
            }

            public init(visibility: Visibility) {
                self.visibility = visibility
            }
        }
    }
}

extension Paths.User {
    public var emails: Emails {
        Emails(path: path + "/emails")
    }

    public struct Emails {
        /// Path: `/user/emails`
        public let path: String

        /// List email addresses for the authenticated user
        ///
        /// Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Email]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Add an email address for the authenticated user
        ///
        /// This endpoint is accessible with the `user` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user)
        public func post(_ body: PostRequest? = nil) -> Request<[OctoKit.Email]> {
            .post(path, body: body)
        }

        public enum PostRequest: Encodable {
            case object(Object)
            case strings([String])
            case string(String)

            /// Example:
            ///
            /// {
            ///   "emails" : [
            ///     "octocat@github.com",
            ///     "mona@github.com"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
                ///
                /// Example: []
                public var emails: [String]

                public init(emails: [String]) {
                    self.emails = emails
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                case .string(let value): try container.encode(value)
                }
            }
        }

        /// Delete an email address for the authenticated user
        ///
        /// This endpoint is accessible with the `user` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user)
        public func delete(_ body: DeleteRequest? = nil) -> Request<Void> {
            .delete(path, body: body)
        }

        public enum DeleteRequest: Encodable {
            case object(Object)
            case strings([String])
            case string(String)

            /// Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
            ///
            /// Example:
            ///
            /// {
            ///   "emails" : [
            ///     "octocat@github.com",
            ///     "mona@github.com"
            ///   ]
            /// }
            public struct Object: Encodable {
                /// Email addresses associated with the GitHub user account.
                public var emails: [String]

                public init(emails: [String]) {
                    self.emails = emails
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                case .string(let value): try container.encode(value)
                }
            }
        }
    }
}

extension Paths.User {
    public var followers: Followers {
        Followers(path: path + "/followers")
    }

    public struct Followers {
        /// Path: `/user/followers`
        public let path: String

        /// List followers of the authenticated user
        ///
        /// Lists the people following the authenticated user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User {
    public var following: Following {
        Following(path: path + "/following")
    }

    public struct Following {
        /// Path: `/user/following`
        public let path: String

        /// List the people the authenticated user follows
        ///
        /// Lists the people who the authenticated user follows.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User.Following {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/user/following/{username}`
        public let path: String

        /// Check if a person is followed by the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user)
        public var get: Request<Void> {
            .get(path)
        }

        /// Follow a user
        ///
        /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        /// 
        /// Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#follow-a-user)
        public var put: Request<Void> {
            .put(path)
        }

        /// Unfollow a user
        ///
        /// Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#unfollow-a-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var gpgKeys: GpgKeys {
        GpgKeys(path: path + "/gpg_keys")
    }

    public struct GpgKeys {
        /// Path: `/user/gpg_keys`
        public let path: String

        /// List GPG keys for the authenticated user
        ///
        /// Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.GpgKey]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a GPG key for the authenticated user
        ///
        /// Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user)
        public func post(armoredPublicKey: String) -> Request<OctoKit.GpgKey> {
            .post(path, body: ["armored_public_key": armoredPublicKey])
        }
    }
}

extension Paths.User.GpgKeys {
    public func gpgKeyID(_ gpgKeyID: Int) -> WithGpgKeyID {
        WithGpgKeyID(path: "\(path)/\(gpgKeyID)")
    }

    public struct WithGpgKeyID {
        /// Path: `/user/gpg_keys/{gpg_key_id}`
        public let path: String

        /// Get a GPG key for the authenticated user
        ///
        /// View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user)
        public var get: Request<OctoKit.GpgKey> {
            .get(path)
        }

        /// Delete a GPG key for the authenticated user
        ///
        /// Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var installations: Installations {
        Installations(path: path + "/installations")
    }

    public struct Installations {
        /// Path: `/user/installations`
        public let path: String

        /// List app installations accessible to the user access token
        ///
        /// Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
        /// 
        /// You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
        /// 
        /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
        /// 
        /// You can find the permissions for the installation under the `permissions` key.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var installations: [OctoKit.Installation]

            public init(totalCount: Int, installations: [OctoKit.Installation]) {
                self.totalCount = totalCount
                self.installations = installations
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case installations
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User.Installations {
    public func installationID(_ installationID: Int) -> WithInstallationID {
        WithInstallationID(path: "\(path)/\(installationID)")
    }

    public struct WithInstallationID {
        /// Path: `/user/installations/{installation_id}`
        public let path: String
    }
}

extension Paths.User.Installations.WithInstallationID {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/user/installations/{installation_id}/repositories`
        public let path: String

        /// List repositories accessible to the user access token
        ///
        /// List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
        /// 
        /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
        /// 
        /// You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
        /// 
        /// The access the user has to each repository is included in the hash under the `permissions` key.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-user-access-token)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var repositorySelection: String?
            public var repositories: [OctoKit.Repository]

            public init(totalCount: Int, repositorySelection: String? = nil, repositories: [OctoKit.Repository]) {
                self.totalCount = totalCount
                self.repositorySelection = repositorySelection
                self.repositories = repositories
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case repositorySelection = "repository_selection"
                case repositories
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User.Installations.WithInstallationID.Repositories {
    public func repositoryID(_ repositoryID: Int) -> WithRepositoryID {
        WithRepositoryID(path: "\(path)/\(repositoryID)")
    }

    public struct WithRepositoryID {
        /// Path: `/user/installations/{installation_id}/repositories/{repository_id}`
        public let path: String

        /// Add a repository to an app installation
        ///
        /// Add a single repository to an installation. The authenticated user must have admin access to the repository.
        /// 
        /// You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#add-a-repository-to-an-app-installation)
        public var put: Request<Void> {
            .put(path)
        }

        /// Remove a repository from an app installation
        ///
        /// Remove a single repository from an installation. The authenticated user must have admin access to the repository.
        /// 
        /// You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#remove-a-repository-from-an-app-installation)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var interactionLimits: InteractionLimits {
        InteractionLimits(path: path + "/interaction-limits")
    }

    public struct InteractionLimits {
        /// Path: `/user/interaction-limits`
        public let path: String

        /// Get interaction restrictions for your public repositories
        ///
        /// Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-your-public-repositories)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            /// Interaction Limits
            ///
            /// Interaction limit settings.
            public var interactionLimitResponse: OctoKit.InteractionLimitResponse?

            public init(interactionLimitResponse: OctoKit.InteractionLimitResponse? = nil) {
                self.interactionLimitResponse = interactionLimitResponse
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.interactionLimitResponse = try? container.decode(OctoKit.InteractionLimitResponse.self)
            }
        }

        /// Set interaction restrictions for your public repositories
        ///
        /// Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories)
        public func put(_ body: OctoKit.InteractionLimit) -> Request<OctoKit.InteractionLimitResponse> {
            .put(path, body: body)
        }

        /// Remove interaction restrictions from your public repositories
        ///
        /// Removes any interaction restrictions from your public repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-from-your-public-repositories)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var issues: Issues {
        Issues(path: path + "/issues")
    }

    public struct Issues {
        /// Path: `/user/issues`
        public let path: String

        /// List user account issues assigned to the authenticated user
        ///
        /// List issues across owned and member repositories assigned to the authenticated user.
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Issue]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var filter: Filter?
            public var state: State?
            public var labels: String?
            public var sort: Sort?
            public var direction: Direction?
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public enum Filter: String, Codable, CaseIterable {
                case assigned
                case created
                case mentioned
                case subscribed
                case repos
                case all
            }

            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case all
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case comments
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(filter: Filter? = nil, state: State? = nil, labels: String? = nil, sort: Sort? = nil, direction: Direction? = nil, since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.filter = filter
                self.state = state
                self.labels = labels
                self.sort = sort
                self.direction = direction
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(state, forKey: "state")
                encoder.encode(labels, forKey: "labels")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.User {
    public var keys: Keys {
        Keys(path: path + "/keys")
    }

    public struct Keys {
        /// Path: `/user/keys`
        public let path: String

        /// List public SSH keys for the authenticated user
        ///
        /// Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Key]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a public SSH key for the authenticated user
        ///
        /// Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user)
        public func post(_ body: PostRequest) -> Request<OctoKit.Key> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// A descriptive name for the new key.
            ///
            /// Example: "Personal MacBook Air"
            public var title: String?
            /// The public SSH key to add to your GitHub account.
            public var key: String

            public init(title: String? = nil, key: String) {
                self.title = title
                self.key = key
            }
        }
    }
}

extension Paths.User.Keys {
    public func keyID(_ keyID: Int) -> WithKeyID {
        WithKeyID(path: "\(path)/\(keyID)")
    }

    public struct WithKeyID {
        /// Path: `/user/keys/{key_id}`
        public let path: String

        /// Get a public SSH key for the authenticated user
        ///
        /// View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user)
        public var get: Request<OctoKit.Key> {
            .get(path)
        }

        /// Delete a public SSH key for the authenticated user
        ///
        /// Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var marketplacePurchases: MarketplacePurchases {
        MarketplacePurchases(path: path + "/marketplace_purchases")
    }

    public struct MarketplacePurchases {
        /// Path: `/user/marketplace_purchases`
        public let path: String

        /// List subscriptions for the authenticated user
        ///
        /// Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.UserMarketplacePurchase]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User.MarketplacePurchases {
    public var stubbed: Stubbed {
        Stubbed(path: path + "/stubbed")
    }

    public struct Stubbed {
        /// Path: `/user/marketplace_purchases/stubbed`
        public let path: String

        /// List subscriptions for the authenticated user (stubbed)
        ///
        /// Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user-stubbed)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.UserMarketplacePurchase]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User {
    public var memberships: Memberships {
        Memberships(path: path + "/memberships")
    }

    public struct Memberships {
        /// Path: `/user/memberships`
        public let path: String
    }
}

extension Paths.User.Memberships {
    public var orgs: Orgs {
        Orgs(path: path + "/orgs")
    }

    public struct Orgs {
        /// Path: `/user/memberships/orgs`
        public let path: String

        /// List organization memberships for the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organization-memberships-for-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.OrgMembership]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var state: State?
            public var perPage: Int?
            public var page: Int?

            public enum State: String, Codable, CaseIterable {
                case active
                case pending
            }

            public init(state: State? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.state = state
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(state, forKey: "state")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.User.Memberships.Orgs {
    public func org(_ org: String) -> WithOrg {
        WithOrg(path: "\(path)/\(org)")
    }

    public struct WithOrg {
        /// Path: `/user/memberships/orgs/{org}`
        public let path: String

        /// Get an organization membership for the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user)
        public var get: Request<OctoKit.OrgMembership> {
            .get(path)
        }

        /// Update an organization membership for the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user)
        public func patch(state: PatchRequest.State) -> Request<OctoKit.OrgMembership> {
            .patch(path, body: PatchRequest(state: state))
        }

        public struct PatchRequest: Encodable {
            /// The state that the membership should be in. Only `"active"` will be accepted.
            public var state: State

            /// The state that the membership should be in. Only `"active"` will be accepted.
            public enum State: String, Codable, CaseIterable {
                case active
            }

            public init(state: State) {
                self.state = state
            }
        }
    }
}

extension Paths.User {
    public var migrations: Migrations {
        Migrations(path: path + "/migrations")
    }

    public struct Migrations {
        /// Path: `/user/migrations`
        public let path: String

        /// List user migrations
        ///
        /// Lists all migrations a user has started.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#list-user-migrations)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Migration]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Start a user migration
        ///
        /// Initiates the generation of a user migration archive.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#start-a-user-migration)
        public func post(_ body: PostRequest) -> Request<OctoKit.Migration> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// Lock the repositories being migrated at the start of the migration
            ///
            /// Example: true
            public var lockRepositories: Bool?
            /// Do not include attachments in the migration
            ///
            /// Example: true
            public var excludeAttachments: Bool?
            /// Do not include releases in the migration
            ///
            /// Example: true
            public var excludeReleases: Bool?
            /// Indicates whether projects owned by the organization or users should be excluded.
            ///
            /// Example: true
            public var excludeOwnerProjects: Bool?
            /// Exclude attributes from the API response to improve performance
            ///
            /// Example: ["repositories"]
            public var exclude: [ExcludeItem]?
            public var repositories: [String]

            /// Allowed values that can be passed to the exclude param.
            ///
            /// Example: "repositories"
            public enum ExcludeItem: String, Codable, CaseIterable {
                case repositories
            }

            public init(lockRepositories: Bool? = nil, excludeAttachments: Bool? = nil, excludeReleases: Bool? = nil, excludeOwnerProjects: Bool? = nil, exclude: [ExcludeItem]? = nil, repositories: [String]) {
                self.lockRepositories = lockRepositories
                self.excludeAttachments = excludeAttachments
                self.excludeReleases = excludeReleases
                self.excludeOwnerProjects = excludeOwnerProjects
                self.exclude = exclude
                self.repositories = repositories
            }

            private enum CodingKeys: String, CodingKey {
                case lockRepositories = "lock_repositories"
                case excludeAttachments = "exclude_attachments"
                case excludeReleases = "exclude_releases"
                case excludeOwnerProjects = "exclude_owner_projects"
                case exclude
                case repositories
            }
        }
    }
}

extension Paths.User.Migrations {
    public func migrationID(_ migrationID: Int) -> WithMigrationID {
        WithMigrationID(path: "\(path)/\(migrationID)")
    }

    public struct WithMigrationID {
        /// Path: `/user/migrations/{migration_id}`
        public let path: String

        /// Get a user migration status
        ///
        /// Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
        /// 
        /// *   `pending` - the migration hasn't started yet.
        /// *   `exporting` - the migration is in progress.
        /// *   `exported` - the migration finished successfully.
        /// *   `failed` - the migration failed.
        /// 
        /// Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status)
        public func get(exclude: [String]? = nil) -> Request<OctoKit.Migration> {
            .get(path, query: makeGetQuery(exclude))
        }

        private func makeGetQuery(_ exclude: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(exclude, forKey: "exclude")
            return encoder.items
        }
    }
}

extension Paths.User.Migrations.WithMigrationID {
    public var archive: Archive {
        Archive(path: path + "/archive")
    }

    public struct Archive {
        /// Path: `/user/migrations/{migration_id}/archive`
        public let path: String

        /// Download a user migration archive
        ///
        /// Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
        /// 
        /// *   attachments
        /// *   bases
        /// *   commit\_comments
        /// *   issue\_comments
        /// *   issue\_events
        /// *   issues
        /// *   milestones
        /// *   organizations
        /// *   projects
        /// *   protected\_branches
        /// *   pull\_request\_reviews
        /// *   pull\_requests
        /// *   releases
        /// *   repositories
        /// *   review\_comments
        /// *   schema
        /// *   users
        /// 
        /// The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive)
        public var get: Request<Void> {
            .get(path)
        }

        /// Delete a user migration archive
        ///
        /// Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#delete-a-user-migration-archive)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Migrations.WithMigrationID {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/user/migrations/{migration_id}/repos`
        public let path: String
    }
}

extension Paths.User.Migrations.WithMigrationID.Repos {
    public func repoName(_ repoName: String) -> WithRepoName {
        WithRepoName(path: "\(path)/\(repoName)")
    }

    public struct WithRepoName {
        /// Path: `/user/migrations/{migration_id}/repos/{repo_name}`
        public let path: String
    }
}

extension Paths.User.Migrations.WithMigrationID.Repos.WithRepoName {
    public var lock: Lock {
        Lock(path: path + "/lock")
    }

    public struct Lock {
        /// Path: `/user/migrations/{migration_id}/repos/{repo_name}/lock`
        public let path: String

        /// Unlock a user repository
        ///
        /// Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#unlock-a-user-repository)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Migrations.WithMigrationID {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/user/migrations/{migration_id}/repositories`
        public let path: String

        /// List repositories for a user migration
        ///
        /// Lists all the repositories for this user migration.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#list-repositories-for-a-user-migration)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.MinimalRepository]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User {
    public var orgs: Orgs {
        Orgs(path: path + "/orgs")
    }

    public struct Orgs {
        /// Path: `/user/orgs`
        public let path: String

        /// List organizations for the authenticated user
        ///
        /// List organizations for the authenticated user.
        /// 
        /// **OAuth scope requirements**
        /// 
        /// This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.OrganizationSimple]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/user/packages`
        public let path: String

        /// List packages for the authenticated user's namespace
        ///
        /// Lists packages owned by the authenticated user within the user's namespace.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#list-packages-for-the-authenticated-user)
        public func get(packageType: PackageType, visibility: Visibility? = nil) -> Request<[OctoKit.Package]> {
            .get(path, query: makeGetQuery(packageType, visibility))
        }

        private func makeGetQuery(_ packageType: PackageType, _ visibility: Visibility?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(packageType, forKey: "package_type")
            encoder.encode(visibility, forKey: "visibility")
            return encoder.items
        }

        public enum PackageType: String, Codable, CaseIterable {
            case npm
            case maven
            case rubygems
            case docker
            case nuget
            case container
        }

        public enum Visibility: String, Codable, CaseIterable {
            case `public`
            case `private`
            case `internal`
        }
    }
}

extension Paths.User.Packages {
    public func packageType(_ packageType: String) -> WithPackageType {
        WithPackageType(path: "\(path)/\(packageType)")
    }

    public struct WithPackageType {
        /// Path: `/user/packages/{package_type}`
        public let path: String
    }
}

extension Paths.User.Packages.WithPackageType {
    public func packageName(_ packageName: String) -> WithPackageName {
        WithPackageName(path: "\(path)/\(packageName)")
    }

    public struct WithPackageName {
        /// Path: `/user/packages/{package_type}/{package_name}`
        public let path: String

        /// Get a package for the authenticated user
        ///
        /// Gets a specific package for a package owned by the authenticated user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-for-the-authenticated-user)
        public var get: Request<OctoKit.Package> {
            .get(path)
        }

        /// Delete a package for the authenticated user
        ///
        /// Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-for-the-authenticated-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Packages.WithPackageType.WithPackageName {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/user/packages/{package_type}/{package_name}/restore`
        public let path: String

        /// Restore a package for the authenticated user
        ///
        /// Restores a package owned by the authenticated user.
        /// 
        /// You can restore a deleted package under the following conditions:
        ///   - The package was deleted within the last 30 days.
        ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#restore-a-package-for-the-authenticated-user)
        public func post(token: String? = nil) -> Request<Void> {
            .post(path, query: makePostQuery(token))
        }

        private func makePostQuery(_ token: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(token, forKey: "token")
            return encoder.items
        }
    }
}

extension Paths.User.Packages.WithPackageType.WithPackageName {
    public var versions: Versions {
        Versions(path: path + "/versions")
    }

    public struct Versions {
        /// Path: `/user/packages/{package_type}/{package_name}/versions`
        public let path: String

        /// Get all package versions for a package owned by the authenticated user
        ///
        /// Returns all package versions for a package owned by the authenticated user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.PackageVersion]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var page: Int?
            public var perPage: Int?
            public var state: State?

            public enum State: String, Codable, CaseIterable {
                case active
                case deleted
            }

            public init(page: Int? = nil, perPage: Int? = nil, state: State? = nil) {
                self.page = page
                self.perPage = perPage
                self.state = state
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(page, forKey: "page")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(state, forKey: "state")
                return encoder.items
            }
        }
    }
}

extension Paths.User.Packages.WithPackageType.WithPackageName.Versions {
    public func packageVersionID(_ packageVersionID: Int) -> WithPackageVersionID {
        WithPackageVersionID(path: "\(path)/\(packageVersionID)")
    }

    public struct WithPackageVersionID {
        /// Path: `/user/packages/{package_type}/{package_name}/versions/{package_version_id}`
        public let path: String

        /// Get a package version for the authenticated user
        ///
        /// Gets a specific package version for a package owned by the authenticated user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user)
        public var get: Request<OctoKit.PackageVersion> {
            .get(path)
        }

        /// Delete a package version for the authenticated user
        ///
        /// Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-version-for-the-authenticated-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Packages.WithPackageType.WithPackageName.Versions.WithPackageVersionID {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`
        public let path: String

        /// Restore a package version for the authenticated user
        ///
        /// Restores a package version owned by the authenticated user.
        /// 
        /// You can restore a deleted package version under the following conditions:
        ///   - The package was deleted within the last 30 days.
        ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#restore-a-package-version-for-the-authenticated-user)
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.User {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/user/projects`
        public let path: String

        /// Create a user project
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#create-a-user-project)
        public func post(_ body: PostRequest) -> Request<OctoKit.Project> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// Name of the project
            ///
            /// Example: "Week One Sprint"
            public var name: String
            /// Body of the project
            ///
            /// Example: "This project represents the sprint of the first week in January"
            public var body: String?

            public init(name: String, body: String? = nil) {
                self.name = name
                self.body = body
            }
        }
    }
}

extension Paths.User {
    public var publicEmails: PublicEmails {
        PublicEmails(path: path + "/public_emails")
    }

    public struct PublicEmails {
        /// Path: `/user/public_emails`
        public let path: String

        /// List public email addresses for the authenticated user
        ///
        /// Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Email]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/user/repos`
        public let path: String

        /// List repositories for the authenticated user
        ///
        /// Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
        /// 
        /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Repository]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var visibility: Visibility?
            public var affiliation: String?
            public var type: `Type`?
            public var sort: Sort?
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?
            public var since: Date?
            public var before: Date?

            public enum Visibility: String, Codable, CaseIterable {
                case all
                case `public`
                case `private`
            }

            public enum `Type`: String, Codable, CaseIterable {
                case all
                case owner
                case `public`
                case `private`
                case member
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case pushed
                case fullName = "full_name"
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(visibility: Visibility? = nil, affiliation: String? = nil, type: `Type`? = nil, sort: Sort? = nil, direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil, since: Date? = nil, before: Date? = nil) {
                self.visibility = visibility
                self.affiliation = affiliation
                self.type = type
                self.sort = sort
                self.direction = direction
                self.perPage = perPage
                self.page = page
                self.since = since
                self.before = before
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(visibility, forKey: "visibility")
                encoder.encode(affiliation, forKey: "affiliation")
                encoder.encode(type, forKey: "type")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(since, forKey: "since")
                encoder.encode(before, forKey: "before")
                return encoder.items
            }
        }

        /// Create a repository for the authenticated user
        ///
        /// Creates a new repository for the authenticated user.
        /// 
        /// **OAuth scope requirements**
        /// 
        /// When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
        /// 
        /// *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
        /// *   `repo` scope to create a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user)
        public func post(_ body: PostRequest) -> Request<OctoKit.Repository> {
            .post(path, body: body)
        }

        public enum PostResponseHeaders {
            public static let location = HTTPHeader<String>(field: "Location")
        }

        public struct PostRequest: Encodable {
            /// The name of the repository.
            ///
            /// Example: "Team Environment"
            public var name: String
            /// A short description of the repository.
            public var description: String?
            /// A URL with more information about the repository.
            public var homepage: String?
            /// Whether the repository is private.
            public var isPrivate: Bool
            /// Whether issues are enabled.
            ///
            /// Example: true
            public var hasIssues: Bool
            /// Whether projects are enabled.
            ///
            /// Example: true
            public var hasProjects: Bool
            /// Whether the wiki is enabled.
            ///
            /// Example: true
            public var hasWiki: Bool
            /// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
            public var teamID: Int?
            /// Whether the repository is initialized with a minimal README.
            public var isAutoInit: Bool
            /// The desired language or platform to apply to the .gitignore.
            ///
            /// Example: "Haskell"
            public var gitignoreTemplate: String?
            /// The license keyword of the open source license for this repository.
            ///
            /// Example: "mit"
            public var licenseTemplate: String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// Example: true
            public var allowSquashMerge: Bool
            /// Whether to allow merge commits for pull requests.
            ///
            /// Example: true
            public var allowMergeCommit: Bool
            /// Whether to allow rebase merges for pull requests.
            ///
            /// Example: true
            public var allowRebaseMerge: Bool
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// Example: false
            public var allowAutoMerge: Bool
            /// Whether to delete head branches when pull requests are merged
            ///
            /// Example: false
            public var deleteBranchOnMerge: Bool
            /// Whether downloads are enabled.
            ///
            /// Example: true
            public var hasDownloads: Bool
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// Example: true
            public var isTemplate: Bool

            public init(name: String, description: String? = nil, homepage: String? = nil, isPrivate: Bool? = nil, hasIssues: Bool? = nil, hasProjects: Bool? = nil, hasWiki: Bool? = nil, teamID: Int? = nil, isAutoInit: Bool? = nil, gitignoreTemplate: String? = nil, licenseTemplate: String? = nil, allowSquashMerge: Bool? = nil, allowMergeCommit: Bool? = nil, allowRebaseMerge: Bool? = nil, allowAutoMerge: Bool? = nil, deleteBranchOnMerge: Bool? = nil, hasDownloads: Bool? = nil, isTemplate: Bool? = nil) {
                self.name = name
                self.description = description
                self.homepage = homepage
                self.isPrivate = isPrivate ?? false
                self.hasIssues = hasIssues ?? true
                self.hasProjects = hasProjects ?? true
                self.hasWiki = hasWiki ?? true
                self.teamID = teamID
                self.isAutoInit = isAutoInit ?? false
                self.gitignoreTemplate = gitignoreTemplate
                self.licenseTemplate = licenseTemplate
                self.allowSquashMerge = allowSquashMerge ?? true
                self.allowMergeCommit = allowMergeCommit ?? true
                self.allowRebaseMerge = allowRebaseMerge ?? true
                self.allowAutoMerge = allowAutoMerge ?? false
                self.deleteBranchOnMerge = deleteBranchOnMerge ?? false
                self.hasDownloads = hasDownloads ?? true
                self.isTemplate = isTemplate ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case description
                case homepage
                case isPrivate = "private"
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case teamID = "team_id"
                case isAutoInit = "auto_init"
                case gitignoreTemplate = "gitignore_template"
                case licenseTemplate = "license_template"
                case allowSquashMerge = "allow_squash_merge"
                case allowMergeCommit = "allow_merge_commit"
                case allowRebaseMerge = "allow_rebase_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case hasDownloads = "has_downloads"
                case isTemplate = "is_template"
            }
        }
    }
}

extension Paths.User {
    public var repositoryInvitations: RepositoryInvitations {
        RepositoryInvitations(path: path + "/repository_invitations")
    }

    public struct RepositoryInvitations {
        /// Path: `/user/repository_invitations`
        public let path: String

        /// List repository invitations for the authenticated user
        ///
        /// When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-invitations-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.RepositoryInvitation]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User.RepositoryInvitations {
    public func invitationID(_ invitationID: Int) -> WithInvitationID {
        WithInvitationID(path: "\(path)/\(invitationID)")
    }

    public struct WithInvitationID {
        /// Path: `/user/repository_invitations/{invitation_id}`
        public let path: String

        /// Accept a repository invitation
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#accept-a-repository-invitation)
        public var patch: Request<Void> {
            .patch(path)
        }

        /// Decline a repository invitation
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#decline-a-repository-invitation)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var starred: Starred {
        Starred(path: path + "/starred")
    }

    public struct Starred {
        /// Path: `/user/starred`
        public let path: String

        /// List repositories starred by the authenticated user
        ///
        /// Lists repositories the authenticated user has starred.
        /// 
        /// You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repositories-starred-by-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Repository]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var sort: Sort?
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(sort: Sort? = nil, direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.sort = sort
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.User.Starred {
    public func owner(_ owner: String) -> WithOwner {
        WithOwner(path: "\(path)/\(owner)")
    }

    public struct WithOwner {
        /// Path: `/user/starred/{owner}`
        public let path: String
    }
}

extension Paths.User.Starred.WithOwner {
    public func repo(_ repo: String) -> WithRepo {
        WithRepo(path: "\(path)/\(repo)")
    }

    public struct WithRepo {
        /// Path: `/user/starred/{owner}/{repo}`
        public let path: String

        /// Check if a repository is starred by the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user)
        public var get: Request<Void> {
            .get(path)
        }

        /// Star a repository for the authenticated user
        ///
        /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#star-a-repository-for-the-authenticated-user)
        public var put: Request<Void> {
            .put(path)
        }

        /// Unstar a repository for the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#unstar-a-repository-for-the-authenticated-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var subscriptions: Subscriptions {
        Subscriptions(path: path + "/subscriptions")
    }

    public struct Subscriptions {
        /// Path: `/user/subscriptions`
        public let path: String

        /// List repositories watched by the authenticated user
        ///
        /// Lists repositories the authenticated user is watching.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repositories-watched-by-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.MinimalRepository]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.User {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/user/teams`
        public let path: String

        /// List teams for the authenticated user
        ///
        /// List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-teams-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.TeamFull]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths {
    public static var users: Users {
        Users(path: "/users")
    }

    public struct Users {
        /// Path: `/users`
        public let path: String

        /// List users
        ///
        /// Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
        /// 
        /// Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-users)
        public func get(since: Int? = nil, perPage: Int? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: makeGetQuery(since, perPage))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ since: Int?, _ perPage: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(since, forKey: "since")
            encoder.encode(perPage, forKey: "per_page")
            return encoder.items
        }
    }
}

extension Paths.Users {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: "\(path)/\(username)")
    }

    public struct WithUsername {
        /// Path: `/users/{username}`
        public let path: String

        /// Get a user
        ///
        /// Provides publicly available information about someone with a GitHub account.
        /// 
        /// GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
        /// 
        /// The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
        /// 
        /// The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-a-user)
        public var get: Request<GetResponse> {
            .get(path)
        }

        public enum GetResponse: Decodable {
            case privateUser(OctoKit.PrivateUser)
            case publicUser(OctoKit.PublicUser)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(OctoKit.PrivateUser.self) {
                    self = .privateUser(value)
                } else if let value = try? container.decode(OctoKit.PublicUser.self) {
                    self = .publicUser(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }
        }
    }
}

extension Paths.Users.WithUsername {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/users/{username}/events`
        public let path: String

        /// List events for the authenticated user
        ///
        /// If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-events-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Event]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername.Events {
    public var orgs: Orgs {
        Orgs(path: path + "/orgs")
    }

    public struct Orgs {
        /// Path: `/users/{username}/events/orgs`
        public let path: String
    }
}

extension Paths.Users.WithUsername.Events.Orgs {
    public func org(_ org: String) -> WithOrg {
        WithOrg(path: "\(path)/\(org)")
    }

    public struct WithOrg {
        /// Path: `/users/{username}/events/orgs/{org}`
        public let path: String

        /// List organization events for the authenticated user
        ///
        /// This is the user's organization dashboard. You must be authenticated as the user to view this.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Event]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername.Events {
    public var `public`: Public {
        Public(path: path + "/public")
    }

    public struct Public {
        /// Path: `/users/{username}/events/public`
        public let path: String

        /// List public events for a user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-public-events-for-a-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Event]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername {
    public var followers: Followers {
        Followers(path: path + "/followers")
    }

    public struct Followers {
        /// Path: `/users/{username}/followers`
        public let path: String

        /// List followers of a user
        ///
        /// Lists the people following the specified user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-followers-of-a-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername {
    public var following: Following {
        Following(path: path + "/following")
    }

    public struct Following {
        /// Path: `/users/{username}/following`
        public let path: String

        /// List the people a user follows
        ///
        /// Lists the people who the specified user follows.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-the-people-a-user-follows)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.SimpleUser]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername.Following {
    public func targetUser(_ targetUser: String) -> WithTargetUser {
        WithTargetUser(path: "\(path)/\(targetUser)")
    }

    public struct WithTargetUser {
        /// Path: `/users/{username}/following/{target_user}`
        public let path: String

        /// Check if a user follows another user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user)
        public var get: Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername {
    public var gists: Gists {
        Gists(path: path + "/gists")
    }

    public struct Gists {
        /// Path: `/users/{username}/gists`
        public let path: String

        /// List gists for a user
        ///
        /// Lists public gists for the specified user:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gists-for-a-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.BaseGist]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var since: Date?
            public var perPage: Int?
            public var page: Int?

            public init(since: Date? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.since = since
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(since, forKey: "since")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Users.WithUsername {
    public var gpgKeys: GpgKeys {
        GpgKeys(path: path + "/gpg_keys")
    }

    public struct GpgKeys {
        /// Path: `/users/{username}/gpg_keys`
        public let path: String

        /// List GPG keys for a user
        ///
        /// Lists the GPG keys for a user. This information is accessible by anyone.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.GpgKey]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername {
    public var hovercard: Hovercard {
        Hovercard(path: path + "/hovercard")
    }

    public struct Hovercard {
        /// Path: `/users/{username}/hovercard`
        public let path: String

        /// Get contextual information for a user
        ///
        /// Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
        /// 
        /// The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
        /// 
        /// ```shell
        ///  curl -u username:token
        ///   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user)
        public func get(subjectType: SubjectType? = nil, subjectID: String? = nil) -> Request<OctoKit.Hovercard> {
            .get(path, query: makeGetQuery(subjectType, subjectID))
        }

        private func makeGetQuery(_ subjectType: SubjectType?, _ subjectID: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(subjectType, forKey: "subject_type")
            encoder.encode(subjectID, forKey: "subject_id")
            return encoder.items
        }

        public enum SubjectType: String, Codable, CaseIterable {
            case organization
            case repository
            case issue
            case pullRequest = "pull_request"
        }
    }
}

extension Paths.Users.WithUsername {
    public var installation: Installation {
        Installation(path: path + "/installation")
    }

    public struct Installation {
        /// Path: `/users/{username}/installation`
        public let path: String

        /// Get a user installation for the authenticated app
        ///
        /// Enables an authenticated GitHub App to find the user’s installation information.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-user-installation-for-the-authenticated-app)
        public var get: Request<OctoKit.Installation> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername {
    public var keys: Keys {
        Keys(path: path + "/keys")
    }

    public struct Keys {
        /// Path: `/users/{username}/keys`
        public let path: String

        /// List public keys for a user
        ///
        /// Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-public-keys-for-a-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.KeySimple]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername {
    public var orgs: Orgs {
        Orgs(path: path + "/orgs")
    }

    public struct Orgs {
        /// Path: `/users/{username}/orgs`
        public let path: String

        /// List organizations for a user
        ///
        /// List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
        /// 
        /// This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.OrganizationSimple]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/users/{username}/packages`
        public let path: String

        /// List packages for a user
        ///
        /// Lists all packages in a user's namespace for which the requesting user has access.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#list-packages-for-user)
        public func get(packageType: PackageType, visibility: Visibility? = nil) -> Request<[OctoKit.Package]> {
            .get(path, query: makeGetQuery(packageType, visibility))
        }

        private func makeGetQuery(_ packageType: PackageType, _ visibility: Visibility?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(packageType, forKey: "package_type")
            encoder.encode(visibility, forKey: "visibility")
            return encoder.items
        }

        public enum PackageType: String, Codable, CaseIterable {
            case npm
            case maven
            case rubygems
            case docker
            case nuget
            case container
        }

        public enum Visibility: String, Codable, CaseIterable {
            case `public`
            case `private`
            case `internal`
        }
    }
}

extension Paths.Users.WithUsername.Packages {
    public func packageType(_ packageType: String) -> WithPackageType {
        WithPackageType(path: "\(path)/\(packageType)")
    }

    public struct WithPackageType {
        /// Path: `/users/{username}/packages/{package_type}`
        public let path: String
    }
}

extension Paths.Users.WithUsername.Packages.WithPackageType {
    public func packageName(_ packageName: String) -> WithPackageName {
        WithPackageName(path: "\(path)/\(packageName)")
    }

    public struct WithPackageName {
        /// Path: `/users/{username}/packages/{package_type}/{package_name}`
        public let path: String

        /// Get a package for a user
        ///
        /// Gets a specific package metadata for a public package owned by a user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-for-a-user)
        public var get: Request<OctoKit.Package> {
            .get(path)
        }

        /// Delete a package for a user
        ///
        /// Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-for-a-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Users.WithUsername.Packages.WithPackageType.WithPackageName {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/users/{username}/packages/{package_type}/{package_name}/restore`
        public let path: String

        /// Restore a package for a user
        ///
        /// Restores an entire package for a user.
        /// 
        /// You can restore a deleted package under the following conditions:
        ///   - The package was deleted within the last 30 days.
        ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#restore-a-package-for-a-user)
        public func post(token: String? = nil) -> Request<Void> {
            .post(path, query: makePostQuery(token))
        }

        private func makePostQuery(_ token: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(token, forKey: "token")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername.Packages.WithPackageType.WithPackageName {
    public var versions: Versions {
        Versions(path: path + "/versions")
    }

    public struct Versions {
        /// Path: `/users/{username}/packages/{package_type}/{package_name}/versions`
        public let path: String

        /// Get all package versions for a package owned by a user
        ///
        /// Returns all package versions for a public package owned by a specified user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-a-user)
        public var get: Request<[OctoKit.PackageVersion]> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername.Packages.WithPackageType.WithPackageName.Versions {
    public func packageVersionID(_ packageVersionID: Int) -> WithPackageVersionID {
        WithPackageVersionID(path: "\(path)/\(packageVersionID)")
    }

    public struct WithPackageVersionID {
        /// Path: `/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}`
        public let path: String

        /// Get a package version for a user
        ///
        /// Gets a specific package version for a public package owned by a specified user.
        /// 
        /// At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-version-for-a-user)
        public var get: Request<OctoKit.PackageVersion> {
            .get(path)
        }

        /// Delete package version for a user
        ///
        /// Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-version-for-a-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Users.WithUsername.Packages.WithPackageType.WithPackageName.Versions.WithPackageVersionID {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`
        public let path: String

        /// Restore package version for a user
        ///
        /// Restores a specific package version for a user.
        /// 
        /// You can restore a deleted package under the following conditions:
        ///   - The package was deleted within the last 30 days.
        ///   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#restore-a-package-version-for-a-user)
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Users.WithUsername {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/users/{username}/projects`
        public let path: String

        /// List user projects
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-user-projects)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Project]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var state: State?
            public var perPage: Int?
            public var page: Int?

            public enum State: String, Codable, CaseIterable {
                case `open`
                case closed
                case all
            }

            public init(state: State? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.state = state
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(state, forKey: "state")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Users.WithUsername {
    public var receivedEvents: ReceivedEvents {
        ReceivedEvents(path: path + "/received_events")
    }

    public struct ReceivedEvents {
        /// Path: `/users/{username}/received_events`
        public let path: String

        /// List events received by the authenticated user
        ///
        /// These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-events-received-by-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Event]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername.ReceivedEvents {
    public var `public`: Public {
        Public(path: path + "/public")
    }

    public struct Public {
        /// Path: `/users/{username}/received_events/public`
        public let path: String

        /// List public events received by a user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-public-events-received-by-a-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Event]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Users.WithUsername {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/users/{username}/repos`
        public let path: String

        /// List repositories for a user
        ///
        /// Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repositories-for-a-user)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.MinimalRepository]> {
            .get(path, query: parameters?.asQuery)
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var type: `Type`?
            public var sort: Sort?
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum `Type`: String, Codable, CaseIterable {
                case all
                case owner
                case member
            }

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
                case pushed
                case fullName = "full_name"
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(type: `Type`? = nil, sort: Sort? = nil, direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.type = type
                self.sort = sort
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(type, forKey: "type")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Users.WithUsername {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/users/{username}/settings`
        public let path: String
    }
}

extension Paths.Users.WithUsername.Settings {
    public var billing: Billing {
        Billing(path: path + "/billing")
    }

    public struct Billing {
        /// Path: `/users/{username}/settings/billing`
        public let path: String
    }
}

extension Paths.Users.WithUsername.Settings.Billing {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/users/{username}/settings/billing/actions`
        public let path: String

        /// Get GitHub Actions billing for a user
        ///
        /// Gets the summary of the free and paid GitHub Actions minutes used.
        /// 
        /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
        /// 
        /// Access tokens must have the `user` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user)
        public var get: Request<OctoKit.ActionsBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername.Settings.Billing {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/users/{username}/settings/billing/packages`
        public let path: String

        /// Get GitHub Packages billing for a user
        ///
        /// Gets the free and paid storage used for GitHub Packages in gigabytes.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// Access tokens must have the `user` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user)
        public var get: Request<OctoKit.PackagesBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername.Settings.Billing {
    public var sharedStorage: SharedStorage {
        SharedStorage(path: path + "/shared-storage")
    }

    public struct SharedStorage {
        /// Path: `/users/{username}/settings/billing/shared-storage`
        public let path: String

        /// Get shared storage billing for a user
        ///
        /// Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// Access tokens must have the `user` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user)
        public var get: Request<OctoKit.CombinedBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername {
    public var starred: Starred {
        Starred(path: path + "/starred")
    }

    public struct Starred {
        /// Path: `/users/{username}/starred`
        public let path: String

        /// List repositories starred by a user
        ///
        /// Lists repositories a user has starred.
        /// 
        /// You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var starredRepositories: [OctoKit.StarredRepository]?
            public var repositories: [OctoKit.Repository]?

            public init(starredRepositories: [OctoKit.StarredRepository]? = nil, repositories: [OctoKit.Repository]? = nil) {
                self.starredRepositories = starredRepositories
                self.repositories = repositories
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.starredRepositories = try? container.decode([OctoKit.StarredRepository].self)
                self.repositories = try? container.decode([OctoKit.Repository].self)
            }
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var sort: Sort?
            public var direction: Direction?
            public var perPage: Int?
            public var page: Int?

            public enum Sort: String, Codable, CaseIterable {
                case created
                case updated
            }

            public enum Direction: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public init(sort: Sort? = nil, direction: Direction? = nil, perPage: Int? = nil, page: Int? = nil) {
                self.sort = sort
                self.direction = direction
                self.perPage = perPage
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(sort, forKey: "sort")
                encoder.encode(direction, forKey: "direction")
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Users.WithUsername {
    public var subscriptions: Subscriptions {
        Subscriptions(path: path + "/subscriptions")
    }

    public struct Subscriptions {
        /// Path: `/users/{username}/subscriptions`
        public let path: String

        /// List repositories watched by a user
        ///
        /// Lists repositories a user is watching.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.MinimalRepository]> {
            .get(path, query: makeGetQuery(perPage, page))
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths {
    public static var zen: Zen {
        Zen(path: "/zen")
    }

    public struct Zen {
        /// Path: `/zen`
        public let path: String

        /// Get the Zen of GitHub
        ///
        /// Get a random sentence from the Zen of GitHub
        public var get: Request<String> {
            .get(path)
        }
    }
}

public enum Paths {}
