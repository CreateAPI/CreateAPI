// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var form: Form {
        Form(path: "/form")
    }

    public struct Form {
        /// Path: `/form`
        public let path: String
    }
}

extension Paths.Form {
    public var testPrimitive: TestPrimitive {
        TestPrimitive(path: path + "/test-primitive")
    }

    public struct TestPrimitive {
        /// Path: `/form/test-primitive`
        public let path: String

        /// Test passing primitive query parameters
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var id: Int?
            public var id2: Int
            public var id3: Int

            public init(id: Int? = nil, id2: Int, id3: Int) {
                self.id = id
                self.id2 = id2
                self.id3 = id3
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(id, forKey: "id")
                encoder.encode(id2, forKey: "id2")
                encoder.encode(id3, forKey: "id3")
                return encoder.items
            }
        }

        /// Inlining simple queries
        public func post(name: String) -> Request<Void> {
            .post(path, query: [("name", name)])
        }

        /// Inlining more complex queries (with an enum)
        public func patch(type: `Type`) -> Request<Void> {
            .patch(path, query: makePatchQuery(type))
        }

        private func makePatchQuery(_ type: `Type`) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type")
            return encoder.items
        }

        public enum `Type`: String, Codable, CaseIterable {
            case cat
            case dog
        }
    }
}

extension Paths.Form {
    public var testArray: TestArray {
        TestArray(path: path + "/test-array")
    }

    public struct TestArray {
        /// Path: `/form/test-array`
        public let path: String

        /// Form Array Explode True
        public func get(type: [String]) -> Request<Void> {
            .get(path, query: makeGetQuery(type))
        }

        private func makeGetQuery(_ type: [String]) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type")
            return encoder.items
        }

        /// Form Array Explode False
        public func post(type: [String]) -> Request<Void> {
            .post(path, query: makePostQuery(type))
        }

        private func makePostQuery(_ type: [String]) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", explode: false)
            return encoder.items
        }
    }
}

extension Paths.Form {
    public var testObject: TestObject {
        TestObject(path: path + "/test-object")
    }

    public struct TestObject {
        /// Path: `/form/test-object`
        public let path: String

        /// Form Object Explode True
        public func get(type: `Type`) -> Request<Void> {
            .get(path, query: makeGetQuery(type))
        }

        private func makeGetQuery(_ type: `Type`) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type")
            return encoder.items
        }

        public struct `Type`: Codable {
            public var id: String
            public var name: String?

            public init(id: String, name: String? = nil) {
                self.id = id
                self.name = name
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(id, forKey: "id")
                encoder.encode(name, forKey: "name")
                return encoder.items
            }
        }

        /// Form Object Explode False
        public func post(type: `Type`) -> Request<Void> {
            .post(path, query: makePostQuery(type))
        }

        private func makePostQuery(_ type: `Type`) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", explode: false)
            return encoder.items
        }
    }
}

extension Paths {
    public static var delimeters: Delimeters {
        Delimeters(path: "/delimeters")
    }

    public struct Delimeters {
        /// Path: `/delimeters`
        public let path: String
    }
}

extension Paths.Delimeters {
    public var testArray: TestArray {
        TestArray(path: path + "/test-array")
    }

    public struct TestArray {
        /// Path: `/delimeters/test-array`
        public let path: String

        /// Space Delimited Explode False
        public func get(type: [String]) -> Request<Void> {
            .get(path, query: makeGetQuery(type))
        }

        private func makeGetQuery(_ type: [String]) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", explode: false, delimiter: " ")
            return encoder.items
        }

        /// Pipe Delimited Explode False
        public func post(type: [String]? = nil) -> Request<Void> {
            .post(path, query: makePostQuery(type))
        }

        private func makePostQuery(_ type: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", explode: false, delimiter: "|")
            return encoder.items
        }

        /// Space Delimited Explode True
        public func put(type: [String]) -> Request<Void> {
            .put(path, query: makePutQuery(type))
        }

        private func makePutQuery(_ type: [String]) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", delimiter: " ")
            return encoder.items
        }

        /// Pipe Delimited Explode True
        public func patch(type: [String]? = nil) -> Request<Void> {
            .patch(path, query: makePatchQuery(type))
        }

        private func makePatchQuery(_ type: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", delimiter: "|")
            return encoder.items
        }
    }
}

extension Paths {
    public static var deepObject: DeepObject {
        DeepObject(path: "/deep-object")
    }

    public struct DeepObject {
        /// Path: `/deep-object`
        public let path: String

        /// Form Object Explode False
        public func get(type: `Type`) -> Request<Void> {
            .get(path, query: makeGetQuery(type))
        }

        private func makeGetQuery(_ type: `Type`) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", explode: false, isDeepObject: true)
            return encoder.items
        }

        public struct `Type`: Codable {
            public var id: String
            public var name: String?

            public init(id: String, name: String? = nil) {
                self.id = id
                self.name = name
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(id, forKey: "id")
                encoder.encode(name, forKey: "name")
                return encoder.items
            }
        }
    }
}

public enum Paths {}
