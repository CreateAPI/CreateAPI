// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation

/// A pet title
///
/// A pet description
public struct PetGenerated: Codable {
    public var id: Int
    /// Example: "Buddy"
    public var name: String
    public var tag: String?

    public init(id: Int, name: String, tag: String? = nil) {
        self.id = id
        self.name = name
        self.tag = tag
    }
}

public struct StoreGenerated: Codable {
    public var pets: [PetGenerated]

    public init(pets: [PetGenerated]) {
        self.pets = pets
    }
}

public struct ErrorGenerated: Codable {
    public var code: Int
    public var message: String

    public init(code: Int, message: String) {
        self.code = code
        self.message = message
    }
}

public struct DogGenerated: Codable {
    /// A pet title
    ///
    /// A pet description
    public var petGenerated: PetGenerated
    public var breed: Breed?

    public enum Breed: String, Codable, CaseIterable {
        case large = "Large"
        case medium = "Medium"
        case small = "Small"
    }

    public init(petGenerated: PetGenerated, breed: Breed? = nil) {
        self.petGenerated = petGenerated
        self.breed = breed
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.petGenerated = try PetGenerated(from: decoder)
        self.breed = try values.decodeIfPresent(Breed.self, forKey: "breed")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(petGenerated, forKey: "petGenerated")
        try values.encodeIfPresent(breed, forKey: "breed")
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
